WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.115
We've seen how to use integer variables to store and keep track of numbers.

00:00:05.115 --> 00:00:09.435
Another very popular type of variables in Java is the string variable.

00:00:09.435 --> 00:00:12.570
A string variable is used to store names,

00:00:12.570 --> 00:00:15.269
words or even whole sentences.

00:00:15.269 --> 00:00:18.359
Basically anything that's made up of characters.

00:00:18.359 --> 00:00:24.780
In Java, a character is a single alphabetical letter or digit or even a symbol like

00:00:24.780 --> 00:00:27.495
the dollar sign or a hash or a at

00:00:27.495 --> 00:00:31.940
pretty much anything that you can use when you're creating a password for example.

00:00:31.940 --> 00:00:37.365
So, if you want to store a phrase or a word that's made up of those characters,

00:00:37.365 --> 00:00:39.335
you should use a string variable.

00:00:39.335 --> 00:00:41.655
That's where the name string comes from,

00:00:41.655 --> 00:00:45.899
being like a string connecting bunch of characters like this.

00:00:45.899 --> 00:00:49.579
Let's say we wanted to store the bus driver's name in a variable.

00:00:49.579 --> 00:00:53.475
We first need to declare that string variable and give it a name,

00:00:53.475 --> 00:00:56.020
just like we did with declaring integers.

00:00:56.020 --> 00:00:59.130
We start by typing in the variable type which in this case is

00:00:59.130 --> 00:01:03.570
a string and then the variable name which is something that we come up with.

00:01:03.570 --> 00:01:05.924
In this case, I call it driver.

00:01:05.924 --> 00:01:09.060
This declaration statement is like as if we've

00:01:09.060 --> 00:01:12.254
created this empty box that can store a string inside,

00:01:12.254 --> 00:01:16.935
but remember it can only store strings from now on not integers,

00:01:16.935 --> 00:01:19.750
not anything else just strings.

00:01:19.750 --> 00:01:23.189
So, the next thing we need to do is initialize it.

00:01:23.189 --> 00:01:26.969
Notice that I've surrounded this string here with quotation marks.

00:01:26.969 --> 00:01:29.275
Remember when, I used them earlier with the print line.

00:01:29.275 --> 00:01:32.472
This basically means we're referring to the word Hamish,

00:01:32.472 --> 00:01:36.534
literally, not a variable called Hamish.

00:01:36.534 --> 00:01:39.209
That's why this is called a string literal.

00:01:39.209 --> 00:01:43.149
This initialization fills our box with the word Hamish.

00:01:43.150 --> 00:01:45.100
Notice that if, I didn't put the quotation marks

00:01:45.099 --> 00:01:47.969
here the computer would think that this is

00:01:47.969 --> 00:01:50.429
a variable called Hamish and would try to

00:01:50.430 --> 00:01:53.575
find it and would go crazy when it couldn't find it.

00:01:53.575 --> 00:01:58.520
But now since we have this new variable driver and it has the word Hamish in it,

00:01:58.519 --> 00:02:01.129
there's actually a lot that Java can do.

00:02:01.129 --> 00:02:03.799
String variables are really cool variables:

00:02:03.799 --> 00:02:06.530
it can count the number of letters in the string,

00:02:06.530 --> 00:02:08.390
it can change the string to

00:02:08.389 --> 00:02:13.125
all capital letters and it can do a lot more that we're going to see later on.

00:02:13.125 --> 00:02:17.080
Let's start by programming the computer to count the letters in the string.

00:02:17.080 --> 00:02:18.290
For that we can use

00:02:18.289 --> 00:02:23.564
the length command that's written as length and then empty parentheses here.

00:02:23.564 --> 00:02:26.974
This instruction here would count the number of letters

00:02:26.974 --> 00:02:30.784
inside the variable driver not the word driver itself,

00:02:30.784 --> 00:02:33.319
but whatever is stored inside that variable,

00:02:33.319 --> 00:02:36.739
but we need to store that number in a variable since letter counts are

00:02:36.740 --> 00:02:41.480
just natural numbers we can use an integer for that.

00:02:41.479 --> 00:02:43.709
Now that we've stored the number of letters

00:02:43.710 --> 00:02:46.245
in the word Hamish inside their variable letters,

00:02:46.245 --> 00:02:50.340
let's print out the variable letters and see what it displays.

00:02:50.340 --> 00:02:53.715
If we run that program the print output would be six,

00:02:53.715 --> 00:02:57.900
which is exactly the number of characters inside that string here.

00:02:57.900 --> 00:03:00.990
Perfect. Let's see if we wanted to change something in

00:03:00.990 --> 00:03:05.060
the string like update every character to become a capital letter.

00:03:05.060 --> 00:03:08.759
For that we can use the command toUpperCase.

00:03:08.759 --> 00:03:11.507
Again, it's just a string variable dot,

00:03:11.507 --> 00:03:14.849
this operation to uppercase followed by empty parentheses,

00:03:14.849 --> 00:03:18.769
but we need to store that into our string variable driver.

00:03:18.770 --> 00:03:21.930
So, we're basically telling our computer program to update

00:03:21.930 --> 00:03:27.018
the variable driver to be equal to whatever the old driver variable was,

00:03:27.018 --> 00:03:29.335
but uppercasing every single letter,

00:03:29.335 --> 00:03:31.409
making it a capital letter.

00:03:31.409 --> 00:03:36.090
So, let's print out our variable driver to see what happened to it.

00:03:36.090 --> 00:03:39.689
Once we were run this program this is the output that we get.

00:03:39.689 --> 00:03:44.294
It's exactly the same string but every letter is now a capital letter.

00:03:44.294 --> 00:03:47.084
Thanks to this command toUpperCase.

00:03:47.085 --> 00:03:49.004
There's another one called toLowerCase which

00:03:49.004 --> 00:03:51.840
obviously does the opposite and there's more.

00:03:51.840 --> 00:03:56.069
We'll learn a lot more about strings and what we can do with them later on,

00:03:56.069 --> 00:03:58.139
but next let's have a look at

00:03:58.139 --> 00:04:01.439
another cool thing we can do with strings called concatenation.

