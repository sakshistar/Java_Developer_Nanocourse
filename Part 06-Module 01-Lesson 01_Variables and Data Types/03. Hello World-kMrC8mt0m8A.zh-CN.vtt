WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.100
计算机非常擅长执行命令

00:00:03.100 --> 00:00:07.205
但是这些命令必须精确且详细

00:00:07.205 --> 00:00:11.679
例如 如果你没有给出细节信息 就要求计算机对文件排序

00:00:11.679 --> 00:00:15.864
那么计算机并不知道你想对哪些文件排序 也不知道你想依据名称

00:00:15.865 --> 00:00:17.980
数据或大小进行排序

00:00:17.980 --> 00:00:21.859
这个命令中存在太多未回答的问题

00:00:21.859 --> 00:00:25.189
应当使用一个更为精确的命令列表 让计算机

00:00:25.190 --> 00:00:29.615
一步步精确完成 打开某个特定文件夹

00:00:29.615 --> 00:00:30.984
浏览其中所有文件

00:00:30.984 --> 00:00:32.484
找出时间最近的一个文件

00:00:32.484 --> 00:00:33.784
放置在最上面

00:00:33.784 --> 00:00:36.644
对其余文件重复这个命令

00:00:36.645 --> 00:00:41.165
这个命令列表回答了计算机可能遇到的所有问题

00:00:41.164 --> 00:00:43.994
并且计算机毫无疑问愿意执行这些命令

00:00:43.994 --> 00:00:47.169
因此 这些命令列表应当使用

00:00:47.170 --> 00:00:51.564
计算机可以理解的语言 如 Java

00:00:51.564 --> 00:00:54.859
Java 是一种计算机语言 使用

00:00:54.859 --> 00:00:59.590
基本的英语单词 但要以计算机可以理解的特殊方式

00:00:59.590 --> 00:01:01.460
Java 提供大型命令库

00:01:01.460 --> 00:01:04.454
你可以直接使用

00:01:04.454 --> 00:01:09.114
例如这个命令 这可能是你在这个课程中经常使用的

00:01:09.114 --> 00:01:11.409
这个命令要求计算机

00:01:11.409 --> 00:01:14.064
在屏幕上显示文本信息等内容

00:01:14.064 --> 00:01:16.120
或运算结果

00:01:16.120 --> 00:01:18.145
或计算机做出的选择

00:01:18.144 --> 00:01:22.828
书写如下 System.out.println ();

00:01:22.828 --> 00:01:26.169
简写为  println 后面是一个圆括号

00:01:26.170 --> 00:01:29.620
然后以分号为结尾

00:01:29.620 --> 00:01:33.390
这是一个计算机系统命令 可以显示

00:01:33.390 --> 00:01:38.415
某个文本 通过输出文本到屏幕上 成为新的一行

00:01:38.415 --> 00:01:40.450
那么它可以准确输出什么呢？

00:01:40.450 --> 00:01:43.534
任何你写入圆括号中的内容

00:01:43.534 --> 00:01:46.950
所以 如果我们要输出这条 "Hello, World!" 的信息

00:01:46.950 --> 00:01:49.019
这就是我们在这写入的内容

00:01:49.019 --> 00:01:51.373
所以 当你运行这个命令  "Hello, World!" 这条信息

00:01:51.373 --> 00:01:53.454
就会显示出来

00:01:53.454 --> 00:01:55.495
听起来很简单吧

00:01:55.495 --> 00:01:57.510
不过 我们需要高度重视

00:01:57.510 --> 00:02:00.525
写 Java 程序时的几个事项

00:02:00.525 --> 00:02:02.430
让我们来看一下

00:02:02.430 --> 00:02:05.940
首先要知道 Java 区分大小写

00:02:05.939 --> 00:02:09.550
即大写字母和小写字母不同

00:02:09.550 --> 00:02:13.860
所以如果我们这样写命令 system.out.println();

00:02:13.860 --> 00:02:16.616
虽然内容一样 但是 s 小写

00:02:16.616 --> 00:02:18.630
Java 就会无法理解

00:02:18.629 --> 00:02:21.599
我们所说的内容 也不能运行这个命令

00:02:21.599 --> 00:02:25.155
同时还要注意我在此处使用了引号

00:02:25.155 --> 00:02:27.855
因为我们希望显示 "Hello, World!" 信息

00:02:27.855 --> 00:02:30.090
与我们输入的完全一致

00:02:30.090 --> 00:02:31.284
随后我们可以看看其他选项

00:02:31.284 --> 00:02:35.375
最后 结尾处的小分号

00:02:35.375 --> 00:02:38.520
告诉计算机这是命令的结尾

00:02:38.520 --> 00:02:42.060
我在分号后面输入的任何内容 都会是一条新命令的开头

00:02:42.060 --> 00:02:43.740
当我们书写多行复杂命令时

00:02:43.740 --> 00:02:47.395
这非常方便

00:02:47.395 --> 00:02:50.175
现在 大家可以自己尝试一下

00:02:50.175 --> 00:02:55.060
这节视频课结束后 你可以在此处编辑这一命令 运行自己的程序

00:02:55.060 --> 00:02:58.064
可以把此处的信息改为显示 "Java Rocks!"

00:02:58.064 --> 00:03:00.000
用来代替 "Hello, World!"

