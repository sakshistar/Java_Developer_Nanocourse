WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.965
在我们之前公交车的例子中

00:00:01.965 --> 00:00:04.740
我们学会了如何完成基本的算术运算

00:00:04.740 --> 00:00:07.705
如使用加号 将两个数字加起来

00:00:07.705 --> 00:00:11.820
例如 如果我们使用语句 int x = 2 + 3

00:00:11.820 --> 00:00:14.460
可以在这里完成这类运算

00:00:14.460 --> 00:00:18.765
计算得到 5 然后将 5 存储如变量 x 中

00:00:18.765 --> 00:00:21.320
对于减法 可以使用减号

00:00:21.320 --> 00:00:24.695
如 int y = 4 – 5

00:00:24.695 --> 00:00:27.129
整数也可以存储负数

00:00:27.129 --> 00:00:30.684
所以这个可以将值 - 1 存储到 y 中

00:00:30.684 --> 00:00:33.074
你也可以直接编写负数

00:00:33.075 --> 00:00:35.455
如 int temp = - 20

00:00:35.454 --> 00:00:38.429
这样可以将值 - 20 存储到变量 temp 中

00:00:38.429 --> 00:00:42.255
对于乘法 可以使用星号 *

00:00:42.255 --> 00:00:44.940
即键盘上的 shift8 键

00:00:44.939 --> 00:00:50.114
因此 这可以计算 7 * 4 并且将值 28 存储到变量 days 中

00:00:50.115 --> 00:00:52.065
对于除法

00:00:52.064 --> 00:00:54.059
我们可以使用斜线

00:00:54.060 --> 00:00:59.850
如 double div = 5/2 可以得到结果 2.5

00:00:59.850 --> 00:01:03.435
不过 即使我们将结果存在双精度浮点数变量中

00:01:03.435 --> 00:01:06.405
因为我们用两个整数 5 和 2 相除

00:01:06.405 --> 00:01:08.775
结果也会成为整数

00:01:08.775 --> 00:01:14.275
舍去分数部分 只将值 2 存储到变量 div 中

00:01:14.275 --> 00:01:17.160
但是如果你想得到这个除法的精确结果

00:01:17.159 --> 00:01:20.954
你要保证其中至少有一个数字是双精度浮点数字符

00:01:20.954 --> 00:01:22.530
例如

00:01:22.530 --> 00:01:27.960
double accurate = 5/2.0 这样可以得到精确的值

00:01:27.959 --> 00:01:31.409
只有除以 2.0 这个除法才能得到

00:01:31.409 --> 00:01:35.164
双精度浮点数 准确地储存到变量中

00:01:35.165 --> 00:01:39.480
对于只有两个整数的除法也会出现这种情况 如 24/5

00:01:39.480 --> 00:01:41.969
即使答案是 4.8

00:01:41.969 --> 00:01:44.250
也会舍弃分数部分

00:01:44.250 --> 00:01:47.625
只将值 4 存储到变量 div2 中

00:01:47.625 --> 00:01:50.974
注意 这并不是取近似值

00:01:50.974 --> 00:01:53.304
而是直接舍弃分数部分

00:01:53.305 --> 00:01:56.670
所以如果想得到 24/5 的确切结果

00:01:56.670 --> 00:01:59.640
你要保证这两个数字中至少有一个是双精度浮点数

00:01:59.640 --> 00:02:04.984
如 5.0 然后将值 4.8 存储如变量 accurate2 中

00:02:04.984 --> 00:02:08.550
我们在接下来类型转换的内容中也很快会讨论这些

00:02:08.550 --> 00:02:11.790
所有这些运算都可以应用于变量本身

00:02:11.789 --> 00:02:14.849
例如 如果我们这样设置 x = 2 + 3;

00:02:14.849 --> 00:02:19.030
得到 5 然后 y = 4 - 5;

00:02:19.030 --> 00:02:20.800
得到 - 1

00:02:20.800 --> 00:02:22.500
这样 x 的值是 5

00:02:22.500 --> 00:02:24.509
y 的值是 - 1

00:02:24.509 --> 00:02:29.364
现在我们可以将变量 x 和 y 相乘 将结果存储到 z 中

00:02:29.365 --> 00:02:34.260
这样做可以将两个变量中存储的值相乘

00:02:34.259 --> 00:02:37.444
然后将乘法的结果放入变量 z 中

00:02:37.444 --> 00:02:40.454
即将值 - 5 放入变量 z 中

00:02:40.455 --> 00:02:45.065
我们甚至可以在一个语句中加入多个算术运算

00:02:45.064 --> 00:02:47.969
例如 如果我想计算剩下的 tip 数量

00:02:47.969 --> 00:02:51.435
根据我已经支付的金额和找回的零钱

00:02:51.435 --> 00:02:54.870
我会用支付金额减去零钱 然后

00:02:54.870 --> 00:02:58.950
用得到的结果乘以 0.2 即 20%

00:02:58.949 --> 00:03:01.019
注意 在进行乘法之前我在这里围绕减法

00:03:01.020 --> 00:03:03.689
如何使用这套括号

00:03:03.689 --> 00:03:06.599
这就要求计算机先做减法

00:03:06.599 --> 00:03:10.349
然后根据减法的结果 再做乘法

00:03:10.349 --> 00:03:15.419
所以在这个例子中 我们根据支付金额减去零钱 可以得到值 6.75

00:03:15.419 --> 00:03:22.619
然后这个结果乘以 0.2 可以得到 1.35

00:03:22.620 --> 00:03:25.045
然后将其存储到变量 tip 中

00:03:25.044 --> 00:03:28.439
所以我知道应当支付小费 $1.35

00:03:28.439 --> 00:03:31.180
但是如果我不使用这套括号

00:03:31.180 --> 00:03:33.900
计算机就会优先进行乘法

00:03:33.900 --> 00:03:36.210
和除法运算 然后再做加法和减法运算

00:03:36.210 --> 00:03:38.474
也就是说 一旦变成这样的语句

00:03:38.474 --> 00:03:42.495
在做减法之前会先做乘法部分

00:03:42.495 --> 00:03:46.664
计算得出值 0.65 后 再用 10 减去 0.65

00:03:46.664 --> 00:03:49.349
得到的结果是 9.35

00:03:49.349 --> 00:03:51.254
这将是一笔不菲的小费

00:03:51.254 --> 00:03:53.894
所以记住要使用这套括号

00:03:53.895 --> 00:03:57.330
尤其是以特定顺序进行算术运算时

00:03:57.330 --> 00:04:01.035
因为计算机总是会先做乘除

00:04:01.034 --> 00:04:04.020
后做加减

00:04:04.020 --> 00:04:05.205
如果存在疑问

00:04:05.205 --> 00:04:07.000
可以在运算中使用括号

