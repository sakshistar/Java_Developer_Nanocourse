WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.115
我们已经看到 如何利用整数变量 存储和记录数字

00:00:05.115 --> 00:00:09.435
Java 中另一种变量类型是 string (字符串) 变量

00:00:09.435 --> 00:00:12.570
string (字符串) 变量用于存储名称

00:00:12.570 --> 00:00:15.269
词语 甚至整句话

00:00:15.269 --> 00:00:18.359
主要由字符构成

00:00:18.359 --> 00:00:24.780
在 Java 中 字符是单个字母 数字 或符号

00:00:24.780 --> 00:00:27.495
如美元符号 # 或 @

00:00:27.495 --> 00:00:31.940
类似于创建密码时使用的内容

00:00:31.940 --> 00:00:37.365
所以 如果你想存储这些符号构成的短语或词语

00:00:37.365 --> 00:00:39.335
你应当使用 string (字符串) 变量

00:00:39.335 --> 00:00:41.655
这就是字符串这一名称的由来

00:00:41.655 --> 00:00:45.899
类似于一根线连接这样一串符号

00:00:45.899 --> 00:00:49.579
我们来说一下 在变量中存储公交车司机的名字

00:00:49.579 --> 00:00:53.475
我们首先需要声明这个 string (字符串) 变量 将之命名

00:00:53.475 --> 00:00:56.020
如同我们之前声明整数变量一样

00:00:56.020 --> 00:00:59.130
首先 我们输入变量类型 在这个案例中

00:00:59.130 --> 00:01:03.570
变量类型是 String (字符串) 然后输入我们自己想出的变量名

00:01:03.570 --> 00:01:05.924
在这个案例中 我把它命名为 driver (司机)

00:01:05.924 --> 00:01:09.060
这个声明语句好比我们已经

00:01:09.060 --> 00:01:12.254
创建了这个空框 可以在里面存储字符串

00:01:12.254 --> 00:01:16.935
不过要记住 从现在起 这只能存储字符串 不能存储整数

00:01:16.935 --> 00:01:19.750
也不能存储字符串以外的内容

00:01:19.750 --> 00:01:23.189
接下来 我们需要进行初始化

00:01:23.189 --> 00:01:26.969
注意 我在这个字符串上加上了引号

00:01:26.969 --> 00:01:29.275
记住 我之前在输出行使用过引号

00:01:29.275 --> 00:01:32.472
这表明我们使用它表示 Hamish 这个单词

00:01:32.472 --> 00:01:36.534
只是使用字面意义 而不是表示 Hamish 变量

00:01:36.534 --> 00:01:39.209
这就是为什么称为字符串常数值

00:01:39.209 --> 00:01:43.149
初始化后 框中为单词 Hamish

00:01:43.150 --> 00:01:45.100
注意 如果我在此处没有加引号

00:01:45.099 --> 00:01:47.969
计算机会认为这是

00:01:47.969 --> 00:01:50.429
变量 Hamish 然后就会试图

00:01:50.430 --> 00:01:53.575
寻找这个变量 如果找不到就会陷入崩溃

00:01:53.575 --> 00:01:58.520
现在既然我们有了变量 driver (司机) 其中含有单词 Hamish

00:01:58.519 --> 00:02:01.129
实际上 Java 就可以做很多事情了

00:02:01.129 --> 00:02:03.799
字符串变量的确非常酷

00:02:03.799 --> 00:02:06.530
可以计算字符串中字母的数量

00:02:06.530 --> 00:02:08.390
可以将字符串都变成

00:02:08.389 --> 00:02:13.125
大写字母 随后我们可以看到字符串变量可以做更多的事情

00:02:13.125 --> 00:02:17.080
我们首先进行计算机编程 计算字符串中字母的数量

00:02:17.080 --> 00:02:18.290
为此 我们可以使用

00:02:18.289 --> 00:02:23.564
长度命令 此处写为 length ();

00:02:23.564 --> 00:02:26.974
这个命令可以计算变量 driver (司机) 中字母的数量

00:02:26.974 --> 00:02:30.784
而不是 driver (司机) 这个单词本身

00:02:30.784 --> 00:02:33.319
但是无论变量中存储什么内容

00:02:33.319 --> 00:02:36.739
我们需要在变量中存储数字 因为字母数量

00:02:36.740 --> 00:02:41.480
是自然数 我们可以使用 integer

00:02:41.479 --> 00:02:43.709
既然我们在变量字母中

00:02:43.710 --> 00:02:46.245
存储了 Hamish 单词的字母数量

00:02:46.245 --> 00:02:50.340
我们输出变量字母 观察显示什么内容

00:02:50.340 --> 00:02:53.715
如果我们运行这个程序 将会输出 6

00:02:53.715 --> 00:02:57.900
恰好是字符串中字符的数量

00:02:57.900 --> 00:03:00.990
非常棒 我们看一下 我们是否可以改变字符串的内容

00:03:00.990 --> 00:03:05.060
例如将每个字符变为大写字母

00:03:05.060 --> 00:03:08.759
为此 我们使用命令 toUpperCase

00:03:08.759 --> 00:03:11.507
再次说明一下 这只是一个字符串变量 dot

00:03:11.507 --> 00:03:14.849
这个 toUpperCase 运算要加上空括号 ()

00:03:14.849 --> 00:03:18.769
但是我们需要存储在字符变量 driver (司机) 中

00:03:18.770 --> 00:03:21.930
因此 我们主要是告诉计算机程序

00:03:21.930 --> 00:03:27.018
在原有变量 driver (司机) 的基础上 更新变量 driver (司机)

00:03:27.018 --> 00:03:29.335
将每个字母进行大写

00:03:29.335 --> 00:03:31.409
使之成为大写字母

00:03:31.409 --> 00:03:36.090
因此 我们可以输出变量 driver (司机) 并进行观察

00:03:36.090 --> 00:03:39.689
我们一旦运行这个程序 就会得到结果

00:03:39.689 --> 00:03:44.294
仍然是一样的字符串 但是都是大写字母的形式

00:03:44.294 --> 00:03:47.084
这得益于 toUpperCase 命令

00:03:47.085 --> 00:03:49.004
另外一个命令称为 toLowerCase

00:03:49.004 --> 00:03:51.840
与 toUpperCase 命令恰好相反 同时还有更多命令

00:03:51.840 --> 00:03:56.069
我们将会学到许多关于字符的内容 随后将会一一介绍

00:03:56.069 --> 00:03:58.139
接下来我们看一下

00:03:58.139 --> 00:04:01.439
使用字符串可以实现的另一个很酷的操作 称为串联

