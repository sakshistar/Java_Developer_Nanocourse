WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.334
So far, we've seen a couple of different variable types.

00:00:03.334 --> 00:00:07.543
We've already used some integer variables and seen how to declare them,

00:00:07.543 --> 00:00:12.030
initialize them, and update them to keep track of numbers as they change.

00:00:12.029 --> 00:00:13.910
However, the way Java stores

00:00:13.910 --> 00:00:19.074
an integer value is pretty much like using a relatively small box.

00:00:19.074 --> 00:00:22.574
And for the same reason that small boxes are easier to move around,

00:00:22.574 --> 00:00:27.219
integers tend to make your programs run a lot faster than other types.

00:00:27.219 --> 00:00:32.049
That's why Java limits the value of an integer to this 10-digit number over here.

00:00:32.049 --> 00:00:36.265
Anything larger than that won't fit into an integer variable.

00:00:36.265 --> 00:00:38.590
This would work fine for most programs,

00:00:38.590 --> 00:00:41.890
but sometimes we need to keep track of much larger numbers.

00:00:41.890 --> 00:00:45.320
That's why Java offers this variable type called, long.

00:00:45.320 --> 00:00:49.344
Long variables can store much larger numbers than integer,

00:00:49.344 --> 00:00:53.759
but with the cost of making your program run slightly slower.

00:00:53.759 --> 00:00:55.780
So, when writing a program,

00:00:55.780 --> 00:00:58.570
you should decide if the variable that you're going to use would

00:00:58.570 --> 00:01:01.715
ever need to have a value larger than this value here.

00:01:01.715 --> 00:01:03.785
If so, then use a long.

00:01:03.784 --> 00:01:07.489
If not, then using the integers would be the wiser choice.

00:01:07.489 --> 00:01:11.079
Both integers and longs can also store negative values.

00:01:11.079 --> 00:01:13.719
However, they cannot store fractions,

00:01:13.719 --> 00:01:16.780
and that's why Java has this third datatype called,

00:01:16.780 --> 00:01:20.120
double, which can store pretty much anything,

00:01:20.120 --> 00:01:21.670
a normal positive number,

00:01:21.670 --> 00:01:24.329
a negative number, fractional number.

00:01:24.329 --> 00:01:26.500
However, just like the long type,

00:01:26.500 --> 00:01:29.469
it comes with a cost of slowing down your program.

00:01:29.469 --> 00:01:32.200
So, it's still much wiser to use integers or

00:01:32.200 --> 00:01:35.630
longs when your values don't have any fractions in them.

00:01:35.629 --> 00:01:37.739
When storing text, however,

00:01:37.739 --> 00:01:40.689
we can use the string variable that we've seen earlier.

00:01:40.689 --> 00:01:44.170
We can declare it and initialize it just like any other variable.

00:01:44.170 --> 00:01:47.829
However, when initializing a string variable to a particular text,

00:01:47.829 --> 00:01:50.804
we usually use those quotation marks around the text.

00:01:50.805 --> 00:01:53.455
Another text datatype is called a character,

00:01:53.454 --> 00:01:55.179
which is short in to a char.

00:01:55.180 --> 00:01:59.600
It allows you to store just a single letter without having to use store in a string.

00:01:59.599 --> 00:02:02.140
Notice that we're using single codes here now,

00:02:02.140 --> 00:02:04.575
instead of the double codes with a string.

00:02:04.575 --> 00:02:08.205
You can store any type of character into a character variable,

00:02:08.205 --> 00:02:11.424
even single digits like the number 3,

00:02:11.425 --> 00:02:14.400
but be careful not to confuse it with an integer 3.

00:02:14.400 --> 00:02:19.735
A character variable, is used to display text or concatenated with other strings,

00:02:19.735 --> 00:02:24.130
but not for mathematical operations like with integers or longs.

00:02:24.129 --> 00:02:27.745
Also remember that a character can only store one letter.

00:02:27.745 --> 00:02:34.324
So if we try to set this character variable 10 into this one-zero setting here,

00:02:34.324 --> 00:02:36.965
Java would complain and won't accept it.

00:02:36.965 --> 00:02:41.849
Sometimes, instead of wanting to store a number in a variable or a text,

00:02:41.849 --> 00:02:45.544
we would want to store the result of a decision that the computer made.

00:02:45.544 --> 00:02:47.829
And this is when we use the boolean variable.

00:02:47.830 --> 00:02:49.960
It can only have two values,

00:02:49.960 --> 00:02:52.000
either true or false.

00:02:52.000 --> 00:02:55.474
Pretty much like the answer of a yes or no question,

00:02:55.474 --> 00:02:58.370
or like a checkbox whether it's checked or not.

00:02:58.370 --> 00:03:00.819
But we'll see a lot more about how to use

00:03:00.819 --> 00:03:04.579
this boolean variables in the next lesson when we talk about decision.

