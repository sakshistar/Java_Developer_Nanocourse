WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.569
We've seen how dividing two integers would cause the result to also

00:00:03.569 --> 00:00:07.040
be an integer even if the division results in a fractional number.

00:00:07.040 --> 00:00:12.240
In Java, this fractional part is just thrown away and only the integer part remains.

00:00:12.240 --> 00:00:14.144
This is called truncation,

00:00:14.144 --> 00:00:16.500
because we're basically cutting off all that

00:00:16.500 --> 00:00:19.065
digits on the right-hand side of the decimal point.

00:00:19.065 --> 00:00:21.210
Sometimes, it's actually handy to truncate

00:00:21.210 --> 00:00:24.475
a fractional number and only leave the integer part behind.

00:00:24.475 --> 00:00:27.750
For example, say you're writing a Java program that would predict

00:00:27.750 --> 00:00:31.300
the number of students who would sign up for your course in the next few years.

00:00:31.300 --> 00:00:34.799
Your calculations could result in a fractional number of students,

00:00:34.799 --> 00:00:37.709
but you don't really care about fractional people.

00:00:37.710 --> 00:00:40.070
All you need is the whole number itself.

00:00:40.070 --> 00:00:43.155
In this case, if you got the value of 25.5,

00:00:43.155 --> 00:00:47.655
you can estimate that at least 25 students would sign up for your class.

00:00:47.655 --> 00:00:52.125
To do that, you can explicitly convert a double variable into an integer.

00:00:52.125 --> 00:00:55.134
Say your Java prediction program looks something like this,

00:00:55.134 --> 00:00:56.949
where you are multiplying the current number of

00:00:56.950 --> 00:00:59.990
students by the rate of growth that you're estimating,

00:00:59.990 --> 00:01:04.140
calculating and predicting the number of future students in those variable future here.

00:01:04.140 --> 00:01:07.373
Now because we're multiplying those two doubles together,

00:01:07.373 --> 00:01:09.495
the result itself becomes a double.

00:01:09.495 --> 00:01:11.925
And if I print the result of the program here,

00:01:11.924 --> 00:01:14.621
it would result in the output of 25.5.

00:01:14.621 --> 00:01:17.355
To get rid of this fractional part here,

00:01:17.355 --> 00:01:20.615
we can convert that double variable into an integer.

00:01:20.614 --> 00:01:25.852
Here, I created a new integer called approx and set it to equal to the variable future,

00:01:25.852 --> 00:01:29.323
but asking Java to convert it to an integer first.

00:01:29.323 --> 00:01:31.954
I've put int between the parenthesis here,

00:01:31.954 --> 00:01:36.420
which tells Java that I want the integer value of our double future.

00:01:36.420 --> 00:01:39.465
So, if I print out our new approx value,

00:01:39.465 --> 00:01:41.880
it would print out only 25.

00:01:41.879 --> 00:01:45.780
This part here is called casting because we basically casted

00:01:45.780 --> 00:01:50.215
or molded this value of the future variable to become an integer.

00:01:50.215 --> 00:01:51.615
You can also do the opposite,

00:01:51.614 --> 00:01:54.254
where you cast an integer to become a double.

00:01:54.254 --> 00:01:58.224
Imagine we had this division where we're dividing the variables x and y.

00:01:58.224 --> 00:02:00.859
They are both declared as integers up here.

00:02:00.859 --> 00:02:05.430
So how do we force this division to calculate the accurate fractional answer?

00:02:05.430 --> 00:02:09.530
Remember that dividing two integers would itself result into an integer value.

00:02:09.530 --> 00:02:12.360
So if we print out this value of div here,

00:02:12.360 --> 00:02:14.820
it would just give us two instead of 2.5.

00:02:14.819 --> 00:02:17.930
However, if we try to cast one of the variables, say x,

00:02:17.930 --> 00:02:21.990
to become a double using this parenthesis surrounding the word double,

00:02:21.990 --> 00:02:25.680
this will force the division to result into an accurate value.

00:02:25.680 --> 00:02:29.969
Casting is a really important concept in programming and you should always be aware of

00:02:29.969 --> 00:02:34.479
what types of variables are and when to convert a value from one type to the other.

