WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.684
Remember when we declared this drivers first name variable earlier?

00:00:04.684 --> 00:00:08.474
Did you notice how I used some capital letters in the name here?

00:00:08.474 --> 00:00:10.064
This is called camel case,

00:00:10.064 --> 00:00:12.884
because it resembles the humps of a camel back.

00:00:12.884 --> 00:00:16.410
However, the first letter here seemed to be a lowercase letter.

00:00:16.410 --> 00:00:18.929
This is called the lower camel case.

00:00:18.929 --> 00:00:21.359
Another variation is called the upper camel case.

00:00:21.359 --> 00:00:25.199
They're both commonly used in Java but in different places.

00:00:25.199 --> 00:00:28.589
For now however, just remember that you should always follow

00:00:28.589 --> 00:00:33.725
the lower camel case when you're creating a new variable name like this one here.

00:00:33.725 --> 00:00:36.870
You can always write variable names the way you want,

00:00:36.869 --> 00:00:40.709
as long as you follow some basic rules which we will go through in a second.

00:00:40.710 --> 00:00:43.829
But it's very common to use camel cases when we

00:00:43.829 --> 00:00:47.350
create variable names that have more than just one single word.

00:00:47.350 --> 00:00:52.380
Because as you will see, we can't have spaces between the words in a variable name.

00:00:52.380 --> 00:00:54.840
This camel case makes it a lot easier to read than

00:00:54.840 --> 00:00:58.255
say having them all lower case letters like that.

00:00:58.255 --> 00:01:02.040
So what are those rules that we need to follow when creating variable names?

00:01:02.039 --> 00:01:05.329
Variable names are totally up to you.

00:01:05.329 --> 00:01:10.484
You should always try to use full words that describe what this variable is used for,

00:01:10.484 --> 00:01:12.840
like speed or price.

00:01:12.840 --> 00:01:17.820
Try to avoid using cryptic abbreviations like SP for stock price.

00:01:17.819 --> 00:01:18.989
Instead, you should use

00:01:18.989 --> 00:01:23.435
the camel case format and name your variable stock price like that.

00:01:23.435 --> 00:01:26.780
But always keep in mind those rules.

00:01:26.780 --> 00:01:30.552
First one is that variable names are case sensitive.

00:01:30.552 --> 00:01:32.215
Just like any instruction in Java,

00:01:32.215 --> 00:01:34.905
variable names are also case sensitive.

00:01:34.905 --> 00:01:39.510
Which means if we try to use this variable variable stockPrice here in a statement like

00:01:39.510 --> 00:01:44.580
this but with a small lowercase p instead of this uppercase P here,

00:01:44.579 --> 00:01:47.069
then Java won't understand what this variable

00:01:47.069 --> 00:01:49.934
is because it would assume this is a different variable,

00:01:49.935 --> 00:01:52.745
and it won't find it in our program.

00:01:52.745 --> 00:01:58.625
So, you have to follow the same case of the variables that you've declared earlier.

00:01:58.625 --> 00:02:01.629
This is why Java would not understand this statement.

00:02:01.629 --> 00:02:03.969
Second rule is that you have to start

00:02:03.969 --> 00:02:07.870
your variable names with a letter like an alphabetical letter.

00:02:07.870 --> 00:02:12.490
Even though you can have numbers and symbols within your variable name,

00:02:12.490 --> 00:02:15.625
the first letter always has to be an alphabetical letter.

00:02:15.625 --> 00:02:17.229
So a variable like this,

00:02:17.229 --> 00:02:21.459
which starts with a digit two is wrong and Java won't accept it.

00:02:21.460 --> 00:02:26.034
You can, however, start a variable with a dollar sign or an underscore sign.

00:02:26.034 --> 00:02:27.835
Only those two are acceptable,

00:02:27.835 --> 00:02:30.510
but it's not recommended to do so anyway.

00:02:30.509 --> 00:02:36.500
Final rule is that you can not have white spaces in your variable name.

00:02:36.500 --> 00:02:38.599
It has to be one single word.

00:02:38.599 --> 00:02:41.900
Something like this, string stock price for

00:02:41.900 --> 00:02:46.325
example with a space between stock and price does not make sense,

00:02:46.324 --> 00:02:48.780
and Java won't accept that either.

00:02:48.780 --> 00:02:52.430
So as long as you follow these basic three rules and you keep in mind

00:02:52.430 --> 00:02:56.165
that your variable names explain what the variable is used for,

00:02:56.164 --> 00:03:00.134
then your program would make a lot more sense when someone else is reading it.

00:03:00.134 --> 00:03:02.939
Another thing you can do while declaring

00:03:02.939 --> 00:03:06.155
a variable is initialize it in the same statement.

00:03:06.155 --> 00:03:10.400
Something like this where we have the string player variable being declared here.

00:03:10.400 --> 00:03:13.650
I can actually assign that to a values straight away.

00:03:13.650 --> 00:03:15.515
So in this one statement,

00:03:15.514 --> 00:03:21.209
I'm declaring the variables player and I'm also initializing it to the string Jack.

00:03:21.210 --> 00:03:26.990
Same goes for integers where I can declare an integer price and initialize it to zero,

00:03:26.990 --> 00:03:30.600
or another integer speed initialize it to a hundred and so on.

00:03:30.599 --> 00:03:33.799
So remember that if you want to compact

00:03:33.800 --> 00:03:37.580
your code to lessen the number of lines in your program,

00:03:37.580 --> 00:03:41.560
you can always initialize the variable while declaring it.

00:03:41.560 --> 00:03:47.981
This also guarantees that you would never use a variable without having it initialized,

00:03:47.981 --> 00:03:51.030
which is a really important thing to think about in your programs.

