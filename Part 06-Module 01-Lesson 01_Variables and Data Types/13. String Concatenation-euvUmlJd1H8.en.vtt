WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.154
Another thing we can do to strings,

00:00:02.154 --> 00:00:04.824
is actually add them to other strings.

00:00:04.825 --> 00:00:06.960
This is called string concatenation,

00:00:06.960 --> 00:00:11.634
and it's basically joining strings together to build a longer string.

00:00:11.634 --> 00:00:14.804
Say for example, the driver's first name was Hamish,

00:00:14.804 --> 00:00:16.894
and the last name was Blake.

00:00:16.894 --> 00:00:19.144
Here, I've declared two different variables,

00:00:19.144 --> 00:00:22.000
driverFirstName and driverLastName.

00:00:22.000 --> 00:00:24.315
And I've initialised the driverFirstName to be Hamish,

00:00:24.315 --> 00:00:27.535
and the driverLastName to be Blake.

00:00:27.535 --> 00:00:29.800
Now, we can actually do something like this,

00:00:29.800 --> 00:00:33.359
where I've created a new string called driverFullName,

00:00:33.359 --> 00:00:36.869
and it is actually equal to just the sum of

00:00:36.869 --> 00:00:41.214
those two strings, driverFirstName + driverLastName.

00:00:41.215 --> 00:00:42.825
What this + is doing,

00:00:42.825 --> 00:00:47.890
is it's just joining this variable string here to this variable string there.

00:00:47.890 --> 00:00:49.914
So, I'm expecting that

00:00:49.914 --> 00:00:54.714
the driverFullName string would have the string Hamish Blake in it.

00:00:54.715 --> 00:00:59.320
Let's print it out using the System.out.Println(); statement to see what's inside.

00:00:59.320 --> 00:01:03.509
And the output that I get is HamishBlake.

00:01:03.509 --> 00:01:07.259
Oh, it seemed like it didn't put a space between them though.

00:01:07.260 --> 00:01:10.210
Well, this is because I've just joined those two strings

00:01:10.209 --> 00:01:13.669
together which didn't have any spaces in them.

00:01:13.670 --> 00:01:16.210
And that's what the string concatenation does.

00:01:16.209 --> 00:01:20.869
It just joins those strings without doing anything extra.

00:01:20.870 --> 00:01:25.010
So, let's see how we can add an extra white space in here.

00:01:25.010 --> 00:01:26.680
So, what I'm actually doing is,

00:01:26.680 --> 00:01:31.930
I'm concatenating the first name + a string that has the whitespace in it,

00:01:31.930 --> 00:01:35.230
+ another string which has the last name in it,

00:01:35.230 --> 00:01:39.130
which made our output become Hamish space Blake.

00:01:39.129 --> 00:01:41.109
Perfect.

00:01:41.109 --> 00:01:46.215
You can also use string concatenation to join strings with numbers.

00:01:46.215 --> 00:01:48.170
This trick is very handy when printing out

00:01:48.170 --> 00:01:50.734
some information using the print line statement.

00:01:50.734 --> 00:01:53.359
Remember this example where we declare the stops and

00:01:53.359 --> 00:01:56.245
fare variables and we kept on updating them?

00:01:56.245 --> 00:01:59.885
Well, if we wanted to print out the variable stops and fare,

00:01:59.885 --> 00:02:03.590
we can just add two different print line instructions

00:02:03.590 --> 00:02:06.085
and the output would be three and 15 like so.

00:02:06.084 --> 00:02:08.870
But, what if we wanted to print out something like this?

00:02:08.870 --> 00:02:12.210
The bus made $15 after three stops.

00:02:12.210 --> 00:02:16.640
A full sentence that has both the variables values in it.

00:02:16.639 --> 00:02:19.634
This can be done using a command like that.

00:02:19.634 --> 00:02:21.584
It's just the normal print line command,

00:02:21.585 --> 00:02:25.045
but it has a lot of string concatenations inside.

00:02:25.044 --> 00:02:28.059
Let's investigate it step-by-step.

00:02:28.060 --> 00:02:31.085
The first bar here is string literal,

00:02:31.085 --> 00:02:33.974
which is just strings within quotation marks.

00:02:33.974 --> 00:02:36.965
So, that's going to be printed out exactly as we typed it in,

00:02:36.965 --> 00:02:41.300
all the way from "The bus made $, like so.

00:02:41.300 --> 00:02:44.930
And then we have this + sign which is concatenating something.

00:02:44.930 --> 00:02:47.465
This happened to be the variable fare.

00:02:47.465 --> 00:02:50.390
So, Java would actually go and look up what's

00:02:50.389 --> 00:02:53.869
inside that variable fare because it's not surrounded by quotation marks,

00:02:53.870 --> 00:02:56.375
and it will print out the value stored inside,

00:02:56.375 --> 00:02:58.400
which happened to be 15.

00:02:58.400 --> 00:03:01.765
And then another string concatenation happening here.

00:03:01.764 --> 00:03:06.644
But this time it's concatenating this string literal after.

00:03:06.645 --> 00:03:09.325
So, that gets printed out exactly as it is,

00:03:09.324 --> 00:03:13.209
and then another string concatenation with the variable stops.

00:03:13.210 --> 00:03:15.085
So, Java goes and looks up for stored

00:03:15.085 --> 00:03:18.045
inside the variable stops which happened to be three.

00:03:18.044 --> 00:03:19.784
And that's what gets printed out.

00:03:19.784 --> 00:03:22.794
And then finally the string literal stops.

00:03:22.794 --> 00:03:25.689
So, with this instruction our output becomes,

00:03:25.689 --> 00:03:29.247
"The bus made $15 after 3 stops."

00:03:29.247 --> 00:03:32.034
If each of those variables had different values in it,

00:03:32.034 --> 00:03:34.384
then the output would have changed.

00:03:34.384 --> 00:03:38.219
Notice how I've added some space inside some of the string literals here,

00:03:38.219 --> 00:03:41.395
but I didn't add a space for example, after that $ sign.

00:03:41.395 --> 00:03:45.260
This is because I wanted no spaces between the $ sign and the number here,

00:03:45.259 --> 00:03:50.289
but I do want spaces before and after the word 'after' which I did down there.

00:03:50.289 --> 00:03:51.929
Same goes for the where it 'stops'.

00:03:51.930 --> 00:03:54.280
I just added another space before that as well.

00:03:54.280 --> 00:03:59.044
So, remember that Java would only consider spaces inside the quotation marks,

00:03:59.044 --> 00:04:01.119
and if you don't put them, then words would

00:04:01.120 --> 00:04:04.194
be close to each other without any spaces in between.

00:04:04.194 --> 00:04:07.449
Fantastic. So, now you know how to use

00:04:07.449 --> 00:04:13.979
string concatenation to join strings together or even join variables with strings.

