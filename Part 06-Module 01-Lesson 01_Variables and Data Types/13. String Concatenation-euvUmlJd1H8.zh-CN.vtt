WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.154
我们可以对字符串做的另一件事情

00:00:02.154 --> 00:00:04.824
是将之添加至其它字符串中

00:00:04.825 --> 00:00:06.960
这称为字符串串联

00:00:06.960 --> 00:00:11.634
它可以将字符串联接在一起 形成更长的字符串

00:00:11.634 --> 00:00:14.804
例如 司机的名字是 Hamish

00:00:14.804 --> 00:00:16.894
姓是 Blake

00:00:16.894 --> 00:00:19.144
这里我声明了两个不同的变量

00:00:19.144 --> 00:00:22.000
driverFirstName 和 driverLastName

00:00:22.000 --> 00:00:24.315
然后我把 driverFirstName 初始化为 Hamish

00:00:24.315 --> 00:00:27.535
把 driverLastName 初始化为 Blake 

00:00:27.535 --> 00:00:29.800
现在 我们实际上可以这样做

00:00:29.800 --> 00:00:33.359
创建一个新的字符串 命名为 driverFullName

00:00:33.359 --> 00:00:36.869
它相当于前面两个字符串的综合

00:00:36.869 --> 00:00:41.214
driverFirstName + driverLastName

00:00:41.215 --> 00:00:42.825
+ (加号) 的作用在于

00:00:42.825 --> 00:00:47.890
将这个字符串与另一个字符串联接起来

00:00:47.890 --> 00:00:49.914
所以 我可以得到

00:00:49.914 --> 00:00:54.714
字符串 driverFullName

00:00:54.715 --> 00:00:59.320
我们可以使用 System.out.println(); 语句输出 看一下这个字符串内容是什么

00:00:59.320 --> 00:01:03.509
我得到的输出结果是 HamishBlake

00:01:03.509 --> 00:01:07.259
不过似乎不能在两个字符串之间加空格

00:01:07.260 --> 00:01:10.210
这是因为我刚才连接了两个字符串

00:01:10.209 --> 00:01:13.669
两个字符串之间不能有任何空格

00:01:13.670 --> 00:01:16.210
这就是字符串串联的内容

00:01:16.209 --> 00:01:20.869
它只是连接这些字符串 而无法连接其他内容

00:01:20.870 --> 00:01:25.010
所以 我们来看一下如何在这儿添加额外的空格

00:01:25.010 --> 00:01:26.680
因此 实际上这就是我所做的内容

00:01:26.680 --> 00:01:31.930
我串联了 first name + 中间加上空格的字符串

00:01:31.930 --> 00:01:35.230
+ another string 表示姓的另一个字符串

00:01:35.230 --> 00:01:39.130
所以我们输出结果变为 Hamish Blake

00:01:39.129 --> 00:01:41.109
非常棒

00:01:41.109 --> 00:01:46.215
你也可以使用字符串串联 将字符串和数字连接起来

00:01:46.215 --> 00:01:48.170
使用输出行语句输出信息时

00:01:48.170 --> 00:01:50.734
这非常方便

00:01:50.734 --> 00:01:53.359
是否记得我们声明变量 stops (站点)

00:01:53.359 --> 00:01:56.245
和 fare (费用) 并且不断更新的例子吗？

00:01:56.245 --> 00:01:59.885
如果我们想要输出变量 stops (站点)
和 fare (费用)

00:01:59.885 --> 00:02:03.590
我们只需要添加两个不同的输出行命令

00:02:03.590 --> 00:02:06.085
那么输出结果就会成为 3 和 15

00:02:06.084 --> 00:02:08.870
但是 如果我们想要得到这种结果呢？

00:02:08.870 --> 00:02:12.210
公交车经过三个站点后 收费 $15

00:02:12.210 --> 00:02:16.640
整个语句包含两个变量值

00:02:16.639 --> 00:02:19.634
我们可以利用以下命令实现这一点

00:02:19.634 --> 00:02:21.584
这只是个正常的输出行命令

00:02:21.585 --> 00:02:25.045
但是其中包括许多字符串串联

00:02:25.044 --> 00:02:28.059
让我们一步步来研究

00:02:28.060 --> 00:02:31.085
这里第一行是字符串常数值

00:02:31.085 --> 00:02:33.974
即加引号的字符串

00:02:33.974 --> 00:02:36.965
因此 最后输出结果与我们输入的内容一致

00:02:36.965 --> 00:02:41.300
即  "The bus made $ 之类的内容

00:02:41.300 --> 00:02:44.930
然后我们使用表示串联的 + (加号)

00:02:44.930 --> 00:02:47.465
此处恰好为变量 fare (费用)

00:02:47.465 --> 00:02:50.390
因此 Java 实际上可以查找

00:02:50.389 --> 00:02:53.869
变量 fare (费用) 中的内容 由于没有使用引号

00:02:53.870 --> 00:02:56.375
并且输出其中存储的值

00:02:56.375 --> 00:02:58.400
此处为 15

00:02:58.400 --> 00:03:01.765
然后这里还有一处字符串串联

00:03:01.764 --> 00:03:06.644
不过这次 它串联了后面的字符串常数值

00:03:06.645 --> 00:03:09.325
因此 可以得到与输入内容一致的结果

00:03:09.324 --> 00:03:13.209
以及另外一个含有变量 stops (站点) 的字符串串联

00:03:13.210 --> 00:03:15.085
所以 Java 查找了

00:03:15.085 --> 00:03:18.045
变量 stops (站点) 中存储的内容 此处为 3

00:03:18.044 --> 00:03:19.784
然后得到了输出结果

00:03:19.784 --> 00:03:22.794
最后得到站点的字符串常数值

00:03:22.794 --> 00:03:25.689
因此 这一命令的输出结果为

00:03:25.689 --> 00:03:29.247
"The bus made $15 after three stops." 三站之后公交车收费 $15

00:03:29.247 --> 00:03:32.034
如果每个变量都有不同的值

00:03:32.034 --> 00:03:34.384
那么输出结果会发生变化

00:03:34.384 --> 00:03:38.219
注意 我如何在这些字符串常数值中增加空格

00:03:38.219 --> 00:03:41.395
但是我并没有在 $ 符号后添加空格

00:03:41.395 --> 00:03:45.260
这是因为我不想在 $ 符号和数字之间添加空格

00:03:45.259 --> 00:03:50.289
但是我想在单词 after 的前后添加空格

00:03:50.289 --> 00:03:51.929
同样在 stops 前后添加空格

00:03:51.930 --> 00:03:54.280
我也在这个单词前面添加了空格

00:03:54.280 --> 00:03:59.044
所以 记住 Java 只考虑引号中的空格

00:03:59.044 --> 00:04:01.119
如果你不加空格 单词之间会

00:04:01.120 --> 00:04:04.194
因为缺少空格而过于紧凑

00:04:04.194 --> 00:04:07.449
非常棒 好了 现在你学会了如何使用

00:04:07.449 --> 00:04:13.979
字符串串联 将字符串连接在一起 甚至用字符串连接变量

