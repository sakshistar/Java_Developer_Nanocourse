WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.965
In our bus example earlier,

00:00:01.965 --> 00:00:04.740
we've learned how to do some basic arithmetic operations;

00:00:04.740 --> 00:00:07.705
like using the plus sign to add two numbers together.

00:00:07.705 --> 00:00:11.820
For example, if we had this statement integer x = 2 + 3,

00:00:11.820 --> 00:00:14.460
that would do this calculation over

00:00:14.460 --> 00:00:18.765
here and would calculate 5 and then store 5 into our variable x.

00:00:18.765 --> 00:00:21.320
For subtraction, which is the minus sign;

00:00:21.320 --> 00:00:24.695
like for example, integer y = 4 - 5.

00:00:24.695 --> 00:00:27.129
Integers can also store negative numbers.

00:00:27.129 --> 00:00:30.684
So this one actually store the -1 value inside y.

00:00:30.684 --> 00:00:33.074
You can even write negative numbers directly like;

00:00:33.075 --> 00:00:35.455
integer temp = - 20.

00:00:35.454 --> 00:00:38.429
This would store the value -20 into the variable temp.

00:00:38.429 --> 00:00:42.255
For multiplication, you can use this asterisk sign;

00:00:42.255 --> 00:00:44.940
that's usually shift8 on your keyboard.

00:00:44.939 --> 00:00:50.114
So this would multiply 7 by 4 and store the value 28 in the variable days.

00:00:50.115 --> 00:00:52.065
And to divide numbers,

00:00:52.064 --> 00:00:54.059
we use this forward slash sign;

00:00:54.060 --> 00:00:59.850
like this double div = 5/2 which would result into 2.5.

00:00:59.850 --> 00:01:03.435
However, even though we're storing the result in a double variable here,

00:01:03.435 --> 00:01:06.405
because we're dividing two integers 5 and 2,

00:01:06.405 --> 00:01:08.775
the result also would become an integer;

00:01:08.775 --> 00:01:14.275
throwing away that fractional part and only storing the value 2 into our variable div.

00:01:14.275 --> 00:01:17.160
But if you want to calculate the accurate division result,

00:01:17.159 --> 00:01:20.954
you have to make sure that at least one of those two numbers is a double itself.

00:01:20.954 --> 00:01:22.530
Like for example this;

00:01:22.530 --> 00:01:27.960
double accurate = 5/2.0 which is the exact same value as this,

00:01:27.959 --> 00:01:31.409
except at 2.0 now forces this division to result in

00:01:31.409 --> 00:01:35.164
a double value and store that into our variable accurate.

00:01:35.165 --> 00:01:39.480
This would happen with any division that has only two integers in it; like 24/5,

00:01:39.480 --> 00:01:41.969
even though that would result in 4.8,

00:01:41.969 --> 00:01:44.250
it will just throw away that fractional

00:01:44.250 --> 00:01:47.625
apart and only store the value 4 into the variable div2.

00:01:47.625 --> 00:01:50.974
Notice that it's not approximating it to the nearest integer,

00:01:50.974 --> 00:01:53.304
it's just throwing away that fractional part.

00:01:53.305 --> 00:01:56.670
So if you want the actual division of 24/5,

00:01:56.670 --> 00:01:59.640
then just make sure that at least one of those two numbers is a double;

00:01:59.640 --> 00:02:04.984
like 5.0, and that would store the value 4.8 into our variable accurate2 here.

00:02:04.984 --> 00:02:08.550
We will talk a little bit more about this when we get to the casting very soon.

00:02:08.550 --> 00:02:11.790
All these operations can also be applied to variables themselves.

00:02:11.789 --> 00:02:14.849
Like if we had this set up for example, where x = 2+3,

00:02:14.849 --> 00:02:19.030
which evaluates to 5 and y = 4 - 5,

00:02:19.030 --> 00:02:20.800
which evaluates to -1.

00:02:20.800 --> 00:02:22.500
So x has the value 5 in it,

00:02:22.500 --> 00:02:24.509
and y has the value of -1.

00:02:24.509 --> 00:02:29.364
Now we can actually multiply those two variables x and y and store the result in z.

00:02:29.365 --> 00:02:34.260
What this would do, is it would multiply the values stored inside that two variables,

00:02:34.259 --> 00:02:37.444
and put the result of that multiplication into the variables z;

00:02:37.444 --> 00:02:40.454
storing the value of -5 into the variables z.

00:02:40.455 --> 00:02:45.065
We can even combine more and more arithmetic operations into one statement.

00:02:45.064 --> 00:02:47.969
For example, if I wanted to calculate the amount of tip I should

00:02:47.969 --> 00:02:51.435
leave based on the amount that I've paid and the change I got back,

00:02:51.435 --> 00:02:54.870
I could just subtract change from the amount paid and multiply

00:02:54.870 --> 00:02:58.950
that entire result by 0.2 which is 20 percent.

00:02:58.949 --> 00:03:01.019
Notice how I have used this set of parentheses around

00:03:01.020 --> 00:03:03.689
the subtraction here before I do the multiplication.

00:03:03.689 --> 00:03:06.599
This is to force the computer to apply the subtraction

00:03:06.599 --> 00:03:10.349
before it does the multiplication over the result of that subtraction.

00:03:10.349 --> 00:03:15.419
So in this case, what would happen is paid minus change would calculate the value of 6.75

00:03:15.419 --> 00:03:22.619
and then that result would get multiplied by 0.2 which would valuate to 1.35,

00:03:22.620 --> 00:03:25.045
and that would get stored in the valuable tip;

00:03:25.044 --> 00:03:28.439
so I know I have to pay $1.35 tip.

00:03:28.439 --> 00:03:31.180
But if I didn't have those set of parentheses,

00:03:31.180 --> 00:03:33.900
computers always prioritize multiplications

00:03:33.900 --> 00:03:36.210
and divisions over additions and subtractions;

00:03:36.210 --> 00:03:38.474
which means once it sees a statement like this,

00:03:38.474 --> 00:03:42.495
it would perform that multiplication part before it performs a subtraction;

00:03:42.495 --> 00:03:46.664
calculating the value of 0.65 and then subtracting that from 10,

00:03:46.664 --> 00:03:49.349
giving the result of 9.35;

00:03:49.349 --> 00:03:51.254
that is a big tip.

00:03:51.254 --> 00:03:53.894
So remember to always use those set of parentheses,

00:03:53.895 --> 00:03:57.330
when you want your arithmetic operations to perform in a certain order;

00:03:57.330 --> 00:04:01.035
because computers always try to perform multiplications and divisions,

00:04:01.034 --> 00:04:04.020
before it tries to do any additions or subtractions.

00:04:04.020 --> 00:04:05.205
So if in doubt,

00:04:05.205 --> 00:04:07.000
always surround your operations with

