WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.569
我们已经了解到如何让两个整数相除得到

00:00:03.569 --> 00:00:07.040
整数结果 即便除法的结果可能是分数

00:00:07.040 --> 00:00:12.240
在 Java 中 分数部分直接被舍弃 只保留整数部分

00:00:12.240 --> 00:00:14.144
这叫做截断

00:00:14.144 --> 00:00:16.500
因为我们一般会删除所有

00:00:16.500 --> 00:00:19.065
小数点右侧的数字

00:00:19.065 --> 00:00:21.210
有时 截断

00:00:21.210 --> 00:00:24.475
分数 只保留整数部分 非常方便

00:00:24.475 --> 00:00:27.750
例如 当你编写 Java 程序 预测

00:00:27.750 --> 00:00:31.300
接下来几年学生选课的数量

00:00:31.300 --> 00:00:34.799
你计算的学生数量可能会出现分数部分

00:00:34.799 --> 00:00:37.709
但你并不在意分数部分

00:00:37.710 --> 00:00:40.070
你只需要整数本身

00:00:40.070 --> 00:00:43.155
在这种情况下 如果你得到的值是 25.5

00:00:43.155 --> 00:00:47.655
你可以得出 至少 25 个学生会选择你的课程

00:00:47.655 --> 00:00:52.125
为了得到上述结果 你可以将双精度浮点数变量转化成整数变量

00:00:52.125 --> 00:00:55.134
这样说来 你的 Java 程序会是这样

00:00:55.134 --> 00:00:56.949
用现有学生的数量乘以

00:00:56.950 --> 00:00:59.990
你算出来的增长率

00:00:59.990 --> 00:01:04.140
在变量 future 中 计算并预测未来学生的数量

00:01:04.140 --> 00:01:07.373
现在由于我们将两个双精度浮点数进行相乘

00:01:07.373 --> 00:01:09.495
结果仍是双精度浮点数

00:01:09.495 --> 00:01:11.925
如果我在这里输出程序结果

00:01:11.924 --> 00:01:14.621
那么得到的结果是 25.5

00:01:14.621 --> 00:01:17.355
为了删除分数部分

00:01:17.355 --> 00:01:20.615
我们可以将双精度浮点数变量转化为整数变量

00:01:20.614 --> 00:01:25.852
在这里 我创建了一个新的整数变量 approx 将其设置为等于变量 future

00:01:25.852 --> 00:01:29.323
然后要求 Java 将之转化为整数

00:01:29.323 --> 00:01:31.954
这里我在括号中输入 int

00:01:31.954 --> 00:01:36.420
告诉 Java 我想要得到双精度浮点数 future 的整数值

00:01:36.420 --> 00:01:39.465
所以 如果我输出新的 approx 值

00:01:39.465 --> 00:01:41.880
它只会输出 25

00:01:41.879 --> 00:01:45.780
这称为变量转换 因为我们主要转换

00:01:45.780 --> 00:01:50.215
或重置了变量 future 的值 使之成为整数

00:01:50.215 --> 00:01:51.615
你也可以进行逆向转换

00:01:51.614 --> 00:01:54.254
即将整数转换为双精度浮点数

00:01:54.254 --> 00:01:58.224
想一下 我们在变量 x 和 y 相除时曾经使用过

00:01:58.224 --> 00:02:00.859
这里两个变量均为整数

00:02:00.859 --> 00:02:05.430
所以我们如何用除法计算得出准确的分数答案呢？

00:02:05.430 --> 00:02:09.530
记住 两个整数相除会得到整数值

00:02:09.530 --> 00:02:12.360
如果我们在这里输出 div 的值

00:02:12.360 --> 00:02:14.820
结果是 2 而不是 2.5

00:02:14.819 --> 00:02:17.930
不过 如果我们转换其中一个变量 如 x

00:02:17.930 --> 00:02:21.990
利用括号将 double 括起来 就会成为双精度浮点数变量

00:02:21.990 --> 00:02:25.680
这可以使除法的结果得出准确的值

00:02:25.680 --> 00:02:29.969
变量转换是程序中的重要概念 你应该了解

00:02:29.969 --> 00:02:34.479
变量的类型 以及将一种变量转换为另一种变量的情况

