WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.770
Before using the Mongo driver,

00:00:01.770 --> 00:00:06.210
let's take a look at some of the important classes that the driver has.

00:00:06.209 --> 00:00:08.804
First, the MongoClient.

00:00:08.804 --> 00:00:13.169
This is the base class that holds all the configurations

00:00:13.169 --> 00:00:18.240
and manages a connection between the application and the MongoDB server.

00:00:18.239 --> 00:00:21.109
Then you have the MongoDatabase and the

00:00:21.109 --> 00:00:25.320
MongoCollection that represent a database and a collection.

00:00:25.320 --> 00:00:30.179
Finally, the document which represents a MongoDB document.

00:00:30.179 --> 00:00:33.240
We'll be using the Document class quite a lot,

00:00:33.240 --> 00:00:38.984
especially to define query predicates and return documents back from the collection.

00:00:38.984 --> 00:00:43.920
The first step in connecting to MongoDB is to create a MongoClient.

00:00:43.920 --> 00:00:48.329
A MongoClient gets created using a URI.

00:00:48.329 --> 00:00:54.739
MongoDriver also uses a URI to locate and connect to a MongoDB server.

00:00:54.740 --> 00:00:59.673
This prefix tells MongoDB driver that we're connecting to MongoDB,

00:00:59.673 --> 00:01:04.924
followed by the username and the password followed by

00:01:04.924 --> 00:01:11.469
the server address and the port number followed by the database that we're connecting to.

00:01:11.469 --> 00:01:14.250
Once obtaining a MongoClient,

00:01:14.250 --> 00:01:19.745
we obtain a database object by calling getDatabase.

00:01:19.745 --> 00:01:25.010
Finally, we create our collection using the createCollection method.

00:01:25.010 --> 00:01:27.135
Once we have the collection object,

00:01:27.135 --> 00:01:31.325
then we're free to work with it by creating documents,

00:01:31.325 --> 00:01:35.195
updating them, and removing them if needed.

00:01:35.194 --> 00:01:38.569
So over here, I'm creating a document

00:01:38.569 --> 00:01:43.084
using the document object that is provided in the MongoDB driver.

00:01:43.084 --> 00:01:45.259
I insert the document here,

00:01:45.260 --> 00:01:47.945
and then once it inserted,

00:01:47.944 --> 00:01:53.734
I get the object ID and store it for using in further queries below.

00:01:53.734 --> 00:01:56.370
This first query translates,

00:01:56.370 --> 00:02:01.925
replaces the document just inserted to include the gender field.

00:02:01.924 --> 00:02:07.129
The next one updates the document to rename a field.

00:02:07.129 --> 00:02:14.449
The last one does an absurd for a document that does not exist.

00:02:14.449 --> 00:02:19.919
Let's run this code to see if all the operations complete successfully.

00:02:23.110 --> 00:02:26.360
Looks like there are no errors in the logs.

00:02:26.360 --> 00:02:30.545
Let's head to the MongoShell to check if everything looks good.

00:02:30.544 --> 00:02:36.784
Let's do a find on the patient's collection and there you have it.

00:02:36.784 --> 00:02:42.719
We have the two documents that the code just inserted and updated.

00:02:43.210 --> 00:02:48.965
The MongoDB driver provides an API that is very similar to the MongoShell.

00:02:48.965 --> 00:02:50.610
If you know the shell command,

00:02:50.610 --> 00:02:54.910
you can very easily translate it to the Java driver.

