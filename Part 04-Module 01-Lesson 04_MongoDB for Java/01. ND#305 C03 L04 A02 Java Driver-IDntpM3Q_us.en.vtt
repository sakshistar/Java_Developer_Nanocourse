WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.770
Before using the MongoDriver,

00:00:01.770 --> 00:00:06.210
let's take a look at some of the important classes that the driver has.

00:00:06.209 --> 00:00:08.804
First, the MongoClient.

00:00:08.804 --> 00:00:13.184
This is the base class that holds all the configurations

00:00:13.185 --> 00:00:18.240
and manages a connection between the application and the MongoDB server.

00:00:18.239 --> 00:00:21.119
Then you have the MongoDatabase and the

00:00:21.120 --> 00:00:25.320
MongoCollection that represent a database and a collection.

00:00:25.320 --> 00:00:30.179
Finally, the Document, which represents a MongoDB document.

00:00:30.179 --> 00:00:33.240
We'll be using the Document class quite a lot,

00:00:33.240 --> 00:00:38.765
especially to define query predicates and return documents back from the collection.

00:00:38.765 --> 00:00:41.375
Let's see these classes in action.

00:00:41.375 --> 00:00:46.369
The first step in connecting to MongoDB is to create a MongoClient.

00:00:46.369 --> 00:00:50.780
A MongoClient gets created using a URI.

00:00:50.780 --> 00:00:59.435
Just like JDBC, MongoDriver also uses a URI to locate and connect to a MongoDB server.

00:00:59.435 --> 00:01:04.384
This prefix tells MongoDB driver that we're connecting to MongoDB,

00:01:04.384 --> 00:01:08.180
followed by the username and the password,

00:01:08.180 --> 00:01:12.530
followed by the server address and the port number,

00:01:12.530 --> 00:01:16.174
followed by the database that we're connecting to.

00:01:16.174 --> 00:01:18.954
Once obtaining a MongoClient,

00:01:18.954 --> 00:01:24.454
we obtain a database object by calling getDatabase.

00:01:24.454 --> 00:01:29.390
Finally, we create our collection using the createCollection method.

00:01:29.390 --> 00:01:31.840
Once we have the collection object,

00:01:31.840 --> 00:01:36.085
then we are free to work with it by creating documents,

00:01:36.084 --> 00:01:39.909
updating them, and removing them if needed.

00:01:39.909 --> 00:01:43.280
So over here, I'm creating a document

00:01:43.280 --> 00:01:47.790
using the document object that is provided in the MongoDriver.

00:01:47.790 --> 00:01:49.984
I insert the document here,

00:01:49.984 --> 00:01:52.644
and then, once it's inserted,

00:01:52.644 --> 00:01:59.729
I get the object ID and store it for using in further queries below.

00:02:01.129 --> 00:02:04.554
This first query translates,

00:02:04.555 --> 00:02:10.955
replaces the document just inserted to include the gender field.

00:02:10.955 --> 00:02:16.180
The next one updates the document to rename a field.

00:02:16.180 --> 00:02:23.480
The last one does an upsert for a document that does not exist.

00:02:23.479 --> 00:02:28.979
Let's run this code to see if all the operations complete successfully.

00:02:32.139 --> 00:02:35.404
Looks like there are no errors in the logs.

00:02:35.405 --> 00:02:39.590
Let's head to the MongoShell to check if everything looks good.

00:02:39.590 --> 00:02:45.825
Let's do a find on the patient's collection. There you have it.

00:02:45.824 --> 00:02:51.780
We have the two documents that the code just inserted and updated.

00:02:52.240 --> 00:02:57.995
The MongoDriver provides an API that is very similar to the MongoShell.

00:02:57.995 --> 00:02:59.750
If you know the shell command,

00:02:59.750 --> 00:03:03.960
you can very easily translate it to the Java driver.

