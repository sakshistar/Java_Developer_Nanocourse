WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.570
Now that you have familiarized yourself with the starter code and have played

00:00:04.570 --> 00:00:09.039
around with the new APIs that has been created at the e-commerce application,

00:00:09.039 --> 00:00:14.094
let's go ahead and get a JWT and access the APIs.

00:00:14.095 --> 00:00:18.280
So we will now see what the end product is going to look like.

00:00:18.280 --> 00:00:21.760
So that after that we can go ahead and implement

00:00:21.760 --> 00:00:24.970
JWT authentication in the form of a username and

00:00:24.969 --> 00:00:29.259
password in the e-commerce application and have it working.

00:00:29.260 --> 00:00:34.060
Let's look at this very simple explanation picture

00:00:34.060 --> 00:00:38.695
of the request and response and how they will interact with the server.

00:00:38.695 --> 00:00:42.865
This is a client. The client sends a request to the server,

00:00:42.865 --> 00:00:47.090
and the client server then requests for credentials.

00:00:47.090 --> 00:00:50.300
The client then responds with the credentials which are

00:00:50.299 --> 00:00:53.989
used in order to validate their authenticity.

00:00:53.990 --> 00:00:58.804
This is then gone dispose through the access control.

00:00:58.804 --> 00:01:02.390
Then the authentication response is sent back to

00:01:02.390 --> 00:01:06.875
the user which can either be a fail or a success.

00:01:06.875 --> 00:01:12.920
So you would either get unauthorized user or you would get an okay response.

00:01:12.920 --> 00:01:17.750
How this pans out in the JWT world is that when a user

00:01:17.750 --> 00:01:22.325
successfully logs in which they have already got a 200 OK response,

00:01:22.325 --> 00:01:24.740
they get a JWT token.

00:01:24.739 --> 00:01:32.044
Now every time the user tries to access any of the resources that are there are secure,

00:01:32.045 --> 00:01:38.060
they would need to pass this JWT token that has been given to them from their login,

00:01:38.060 --> 00:01:40.490
so that the server knows that they are

00:01:40.489 --> 00:01:45.214
the authenticated user and they will be allowed access to these resources.

00:01:45.215 --> 00:01:49.475
Let's look at how this looks in the application.

00:01:49.474 --> 00:01:55.033
So previously, we had create API,

00:01:55.034 --> 00:01:58.609
and we were able to create the API with

00:01:58.609 --> 00:02:02.989
just the username because there was no password concept.

00:02:02.989 --> 00:02:08.424
Now we're trying to implement password with JWT.

00:02:08.425 --> 00:02:12.400
I'm going to send- So here in the API,

00:02:12.400 --> 00:02:14.435
I have already implemented it.

00:02:14.435 --> 00:02:17.090
So I'm going to click send,

00:02:17.090 --> 00:02:22.594
and I got an internal server error

00:02:22.594 --> 00:02:27.305
which means that something went wrong in this particular API request.

00:02:27.305 --> 00:02:33.260
So the problem here is that with the change of the API,

00:02:33.259 --> 00:02:38.984
using JWT, now I would need to pass two more fields.

00:02:38.985 --> 00:02:42.730
The first one being password,

00:02:43.909 --> 00:02:48.509
and I have some basic validation added to it,

00:02:48.509 --> 00:02:53.614
which is the length should be at least seven letters.

00:02:53.615 --> 00:02:59.170
So abcdefg.

00:02:59.169 --> 00:03:01.739
When you are creating a user,

00:03:01.740 --> 00:03:07.715
you would usually be asked to confirm the password as well.

00:03:07.715 --> 00:03:10.370
Like in any application when you're creating a user.

00:03:10.370 --> 00:03:13.129
So now this is my new request.

00:03:13.129 --> 00:03:15.799
Let me go ahead and try this.

00:03:15.800 --> 00:03:20.870
So this is a final result.

00:03:20.870 --> 00:03:24.125
I have already implemented password in this.

00:03:24.125 --> 00:03:30.000
So the user gets created only when you enter a password and it confirms password and see

00:03:30.000 --> 00:03:37.060
the status is 200 OK. Now if I'm trying to login as this user,

00:03:37.330 --> 00:03:45.545
and I call this API which is something that I've added and I pass.

00:03:45.544 --> 00:03:49.819
So you would not pass confirm password when you're logging in.

00:03:49.819 --> 00:03:53.099
You just enter your username and password.

00:03:53.270 --> 00:03:58.560
Let's try to login, and I got a 200 OK. Now if I

00:03:58.560 --> 00:04:03.449
look at the headers, the response headers,

00:04:03.449 --> 00:04:05.060
like I was explaining to you,

00:04:05.060 --> 00:04:08.164
since it's been implemented using JWT,

00:04:08.164 --> 00:04:16.264
now I have a JWT token which has the bearer schema and this is how it looks.

00:04:16.264 --> 00:04:19.399
So earlier when I was going through the tutorial,

00:04:19.399 --> 00:04:26.984
I had mentioned that there are three parts of the JWT token,

00:04:26.985 --> 00:04:29.480
and these are the three parts.

00:04:29.480 --> 00:04:33.740
If you can see this there is a period here,

00:04:33.740 --> 00:04:36.665
and this is part two,

00:04:36.665 --> 00:04:40.060
and this is part three.

00:04:40.060 --> 00:04:43.754
So header, payload, and signature.

00:04:43.754 --> 00:04:45.365
So that's pretty much it.

00:04:45.365 --> 00:04:51.139
What I would do is when I'm trying to do anything with the resources.

00:04:51.139 --> 00:04:53.629
So I'm trying to get access to the resources,

00:04:53.629 --> 00:04:59.045
I would pass this authorization in my header section.

00:04:59.045 --> 00:05:02.270
Let me show that to you next.

00:05:02.269 --> 00:05:07.294
Okay. So now, I have logged in successfully and I had been given

00:05:07.295 --> 00:05:11.600
an authorization and a bearer token or JWT token,

00:05:11.600 --> 00:05:16.010
and I am going to show you what is going to happen when I

00:05:16.009 --> 00:05:20.615
do not pass this token and try to AddToCart.

00:05:20.615 --> 00:05:23.509
So this is my AddToCart API,

00:05:23.509 --> 00:05:26.300
and I click Add to Cart,

00:05:26.300 --> 00:05:30.155
and as you see the headers only has application JSON.

00:05:30.154 --> 00:05:33.034
It does not contain the authorization,

00:05:33.035 --> 00:05:35.314
which is why I got to forbidden,

00:05:35.314 --> 00:05:38.375
which is an unauthorized user 403.

00:05:38.375 --> 00:05:42.500
What I need to do now as I mentioned before is I need to

00:05:42.500 --> 00:05:47.160
get the authorization added as a header and then make

00:05:47.160 --> 00:05:51.860
the request so that the server identifies me as

00:05:51.860 --> 00:05:57.365
an authorized user and allows me to Add To Cart for this particular user.

00:05:57.365 --> 00:05:59.764
So let's do that.

00:05:59.764 --> 00:06:09.149
I am going to add this to authorization,

00:06:11.149 --> 00:06:15.435
and I'm going to add better token.

00:06:15.435 --> 00:06:20.464
Let me try it in. So here I just

00:06:20.464 --> 00:06:27.194
added an item 2.99 in-memory database,

00:06:27.194 --> 00:06:32.464
and this time I'm an authenticated user who successfully added to cart.

00:06:32.464 --> 00:06:37.759
Now I'm going to show what happens when I submit an order with whatever has been

00:06:37.759 --> 00:06:43.219
added to the cart that one item and this is without my token.

00:06:43.220 --> 00:06:47.810
So the only header I have here is application JSON. Let me send.

00:06:47.810 --> 00:06:50.810
Again, I got access denied or forbidden,

00:06:50.810 --> 00:06:55.939
and I'm going to pick the authorization token again.

00:06:55.939 --> 00:06:58.639
So this is how you would do a bulk edit.

00:06:58.639 --> 00:07:03.394
If you were to just copy paste from postman I'd pick the entire header,

00:07:03.394 --> 00:07:05.569
and I go to submit an order.

00:07:05.569 --> 00:07:08.464
I again click bulk edit and add it here.

00:07:08.464 --> 00:07:16.039
So basically I'm just adding the authentication here and I click, ''Submit.''

00:07:16.040 --> 00:07:18.770
So this time I did not get 403,

00:07:18.769 --> 00:07:20.029
but I got 200,

00:07:20.029 --> 00:07:24.649
which means that I was successfully authenticated and my order was created.

00:07:24.649 --> 00:07:27.935
So this is what we are trying to achieve next.

00:07:27.935 --> 00:07:31.865
So let's look at how this gets implemented

00:07:31.865 --> 00:07:37.050
and there will be step-by-step instructions in order to complete this.

