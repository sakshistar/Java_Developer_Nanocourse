WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.894
遇到只要条件一直为真就要重复执行代码的情况 while 循环真的很实用

00:00:05.894 --> 00:00:08.129
比如当花钱少于一定金额的时候

00:00:08.130 --> 00:00:13.304
或时间未到就继续等待的时候

00:00:13.304 --> 00:00:18.539
可是有时候 我们想在一定次数内重复某件事

00:00:18.539 --> 00:00:25.174
想象有这么个警告 我们就想发出整整十次警告提示

00:00:25.175 --> 00:00:27.039
来看看这个例子

00:00:27.039 --> 00:00:31.739
声明一个叫 raiseAlarm (报警) 的函数 该函数会输出一定条数的警告信息

00:00:31.739 --> 00:00:36.954
这个条数是由输入参数的值决定的 但该函数不会返回任何事物

00:00:36.954 --> 00:00:43.349
于是 输入 public void raiseAlarm 该函数以 numOfWarnings
(警告次数) 为参数

00:00:43.350 --> 00:00:46.435
该参数为一个整数

00:00:46.435 --> 00:00:50.234
因为我们会说明要输出警告的具体次数

00:00:50.234 --> 00:00:53.579
要在重复了一定次数后停止执行代码

00:00:53.579 --> 00:00:58.364
我们需要对循坏每次成功的迭代进行跟踪

00:00:58.365 --> 00:01:03.795
要实现该操作 我们需要在循环前声明一个整数变量

00:01:03.795 --> 00:01:06.210
就管它叫 i 吧 即iteration (迭代) 的首字母

00:01:06.209 --> 00:01:08.899
然后将其初始值设为 1

00:01:08.900 --> 00:01:12.452
通常我们管这个叫循环计数器

00:01:12.451 --> 00:01:15.909
然后 我们得确保只要 i 仍小于或等于 numOfWarnings

00:01:15.909 --> 00:01:20.000
循环就会不断执行

00:01:20.000 --> 00:01:23.540
因此我们的循环条件会是这样

00:01:23.540 --> 00:01:28.485
这里的意思是 我们想重复这条指令

00:01:28.484 --> 00:01:31.763
“println (Warning) ” (输出警告)

00:01:31.763 --> 00:01:35.685
除非 i 不再小于或等于 numOfWarnings

00:01:35.685 --> 00:01:37.810
最后我们要做的

00:01:37.810 --> 00:01:40.909
是跟踪迭代次数

00:01:40.909 --> 00:01:46.549
因此 我们要更新循环计数器 i 在循环里给它加 1

00:01:46.549 --> 00:01:50.045
每次迭代 i 都会加 1

00:01:50.045 --> 00:01:53.650
这个语句称为循环增量

00:01:53.650 --> 00:01:55.415
不过要简写的话

00:01:55.415 --> 00:02:02.110
这个增量可以写成 i++ 意思完全一样

00:02:02.109 --> 00:02:06.814
很简单 就是 i 增加 1 或者给 i 加 1 的意思

00:02:06.814 --> 00:02:10.750
你可以使用简写 也可以全部写出来

00:02:10.750 --> 00:02:13.259
无所谓 它们的功能完全相同

00:02:13.259 --> 00:02:15.239
不过 我们等下就会看到

00:02:15.240 --> 00:02:20.545
用简写的话 程序可读性会强很多 好了

00:02:20.544 --> 00:02:24.092
有了这三个重要部分

00:02:24.092 --> 00:02:28.929
我们的 while 循环就可以以特定次数重复做某事了

00:02:28.930 --> 00:02:31.355
我们来跟踪这个循环 看看怎么样

00:02:31.354 --> 00:02:35.869
假设我们要在参数值为 5 的情况下调用这个函数

00:02:35.870 --> 00:02:39.960
于是令变量 numOfWarnings 等于 5

00:02:39.960 --> 00:02:43.715
首先 我们把变量 i 初始化为 1

00:02:43.715 --> 00:02:48.560
然后就到了循环这里 开始比较 i 和 numOfWarnings 的值

00:02:48.560 --> 00:02:51.677
因为 numOfWarnings 被设为 5

00:02:51.677 --> 00:02:56.055
所以要比较的是 i 是否小于或等于 5 比较结果为真

00:02:56.055 --> 00:03:01.355
既然为真 我们就进入循环 开始执行里面的指令

00:03:01.354 --> 00:03:04.729
第一个语句说的是 输出一行警告信息

00:03:04.729 --> 00:03:07.879
所以我们的输出里会有一个警告

00:03:07.879 --> 00:03:09.829
第二个语句是给 i 增量

00:03:09.830 --> 00:03:12.785
也就是只给 i 加 1 并更新 i

00:03:12.784 --> 00:03:14.840
使 i 值变为 2

00:03:14.840 --> 00:03:17.320
然后就到了循环尾部

00:03:17.320 --> 00:03:20.259
于是我们回到这上面来 重复条件

00:03:20.259 --> 00:03:23.060
判断 2 是否小于或等于 numOfWarnings

00:03:23.060 --> 00:03:25.914
而这里 numOfWarnings 等于 5

00:03:25.914 --> 00:03:27.544
所以结果仍为真

00:03:27.544 --> 00:03:32.780
也就是我们又得进入循环 再输出一次警告

00:03:32.780 --> 00:03:38.689
再来 给 i 增加 1 然后到达循环尾部

00:03:38.689 --> 00:03:40.639
回到比较来

00:03:40.639 --> 00:03:43.029
3 还是小于或等于 5

00:03:43.030 --> 00:03:47.069
所以再进来 输出警告信息

00:03:47.069 --> 00:03:49.739
再给 i 增量 再回来判断循环条件

00:03:49.740 --> 00:03:53.531
还是小于或等于 5

00:03:53.531 --> 00:03:54.956
于是我再进到循环

00:03:54.956 --> 00:03:56.209
再输出一次

00:03:56.210 --> 00:03:58.610
给 i 增量 使其为 5

00:03:58.610 --> 00:04:03.515
现在我们回到循环开端 比较 5 和 numOfWarnings 的值

00:04:03.514 --> 00:04:07.099
仍然是小于或等于 5 因为 5 等于 5

00:04:07.099 --> 00:04:11.719
所以条件为真 进入循环 再次输出警告

00:04:11.719 --> 00:04:15.689
给 i 增量 使其为 6

00:04:15.689 --> 00:04:18.050
回来 做判断

00:04:18.050 --> 00:04:19.780
6 小于或等于 5 吗？

00:04:19.779 --> 00:04:23.500
不 这就意味着在进行这部分比较的时候

00:04:23.500 --> 00:04:25.125
条件为假

00:04:25.125 --> 00:04:28.720
所以我们不会进入循环 直接跳出来了

00:04:28.720 --> 00:04:30.890
函数由此结束

00:04:30.889 --> 00:04:33.639
所以 如果我们调用这个函数 设其参数为 5 的话

00:04:33.639 --> 00:04:36.180
我们就能看到程序输出五次警告

