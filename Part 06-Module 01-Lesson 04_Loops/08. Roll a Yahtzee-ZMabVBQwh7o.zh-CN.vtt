WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.275
好了 现在我们来想想要怎么修改

00:00:04.275 --> 00:00:08.995
才能让这个程序完全模拟快艇骰子的机制 采用五个骰子而非三个

00:00:08.994 --> 00:00:11.741
首先 我们需要声明这两个变量

00:00:11.742 --> 00:00:13.395
dice4 和 dice5

00:00:13.394 --> 00:00:16.919
然后调用 rollDice 函数分别给它们赋值

00:00:16.920 --> 00:00:22.415
现在 我们调用了五次这个 rollDice 函数来模拟五个不同的骰子

00:00:22.414 --> 00:00:24.480
与之前一样 在 while 循环里

00:00:24.480 --> 00:00:29.440
我们也要调用这些函数五次 对变量 dice4 和 dice5 进行更新

00:00:29.440 --> 00:00:31.500
我们每掷一次五颗骰子

00:00:31.500 --> 00:00:33.588
就要给变量 count 加 1

00:00:33.588 --> 00:00:38.004
因为我们是同时投掷了五颗骰子

00:00:38.005 --> 00:00:41.795
最后 我们需要更新这整个 while 循环的条件

00:00:41.795 --> 00:00:44.730
所以现在不只要判断 dice1 是否等于 dice2

00:00:44.729 --> 00:00:47.554
且 dice2 是否等于 dice3

00:00:47.554 --> 00:00:50.250
我们还需判断 dice3 是否等于 dice4

00:00:50.250 --> 00:00:54.054
且 dice4 是否等于 dice5

00:00:54.054 --> 00:00:59.619
所有条件都由这些括号括起 括号前有个表示“非”的符号

00:00:59.619 --> 00:01:04.953
也就意味着只要条件非真 while 循环就会一直执行下去

00:01:04.953 --> 00:01:08.890
也就是说只要五颗骰子点数没有完全相同 循环就会一直执行

00:01:08.890 --> 00:01:11.980
注意 我不需要特地说明

00:01:11.980 --> 00:01:15.655
dice5 等于 dice2 因为这是个隐含条件

00:01:15.655 --> 00:01:18.579
如果这个条件成立了

00:01:18.579 --> 00:01:22.614
这个成立了 这个成立了 这个也成立了

00:01:22.614 --> 00:01:27.579
那就意味着五个骰子点数都相同

00:01:27.579 --> 00:01:29.644
顺便提一句

00:01:29.644 --> 00:01:33.865
注意我把这个写成了两行 而不是一行

00:01:33.864 --> 00:01:36.530
这只是为了增强可读性

00:01:36.530 --> 00:01:38.739
通常来说 在 Java 里 指令是可以拆行的

00:01:38.739 --> 00:01:41.259
只要别把它拆散就好

00:01:41.260 --> 00:01:46.719
通常这么做是为了增强可读性 而不是降低

00:01:46.719 --> 00:01:52.069
所以目前的话 如果你不得不把长指令写成一行 那也不必担心

00:01:52.069 --> 00:01:53.769
这只是个小建议

00:01:53.769 --> 00:01:56.000
告诉你可以像我这样做而已

