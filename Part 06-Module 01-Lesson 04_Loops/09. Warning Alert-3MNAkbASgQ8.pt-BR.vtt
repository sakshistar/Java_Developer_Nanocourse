WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.133
Laços while são muito bons
para repetir coisas

00:00:03.167 --> 00:00:06.067
enquanto alguma condição
continuar verdadeira.

00:00:06.100 --> 00:00:09.968
Enquanto o dinheiro gasto for
menor do que uma certa quantia,

00:00:10.000 --> 00:00:13.167
ou esperando até o tempo
chegar a um dado momento.

00:00:13.200 --> 00:00:18.367
Mas às vezes queremos repetir algo
um número específico de vezes.

00:00:18.400 --> 00:00:22.100
Imagine que há um alerta
e queremos mostrar uma mensagem

00:00:22.133 --> 00:00:24.701
exatamente 10 vezes.

00:00:24.734 --> 00:00:26.934
Vamos ver um exemplo.

00:00:26.968 --> 00:00:29.734
Vamos declarar uma função
chamada raiseAlarm

00:00:29.767 --> 00:00:32.934
que imprime um certo número
de mensagens de alerta

00:00:32.968 --> 00:00:35.601
com base no número
do parâmetro de entrada

00:00:35.634 --> 00:00:36.934
e não retorne nada.

00:00:36.968 --> 00:00:44.467
Então seria public void raiseAlarm
que recebe o parâmetro numOfWarnings,

00:00:44.501 --> 00:00:50.400
que é int, porque vamos especificar
um certo número que queremos mostrar.

00:00:50.434 --> 00:00:53.667
Para parar depois de um certo
número de repetições,

00:00:53.701 --> 00:00:58.501
precisamos contar as iterações
que foram completadas.

00:00:58.534 --> 00:01:01.667
Para isso, precisamos declarar
uma variável int

00:01:01.701 --> 00:01:03.701
antes de começar o laço.

00:01:03.734 --> 00:01:06.334
Vamos chamar de i,
de iterações.

00:01:06.367 --> 00:01:08.667
Vamos inicializar como 1.

00:01:08.701 --> 00:01:12.234
Isto costuma ser chamado
de contador do laço.

00:01:12.267 --> 00:01:18.133
Agora queremos que o laço continue
enquanto ela for menor ou igual

00:01:18.167 --> 00:01:19.901
ao número de alertas.

00:01:19.934 --> 00:01:23.534
Essa será a condição do laço,
bem aqui.

00:01:23.567 --> 00:01:28.634
Estamos dizendo que queremos
repetir esta instrução,

00:01:28.667 --> 00:01:30.534
imprimir "Warning",

00:01:30.567 --> 00:01:35.434
enquanto i for menor ou igual
a numOfWarnings.

00:01:35.467 --> 00:01:40.801
A última coisa a fazer é guardar
o número de iterações que fizemos.

00:01:40.834 --> 00:01:43.868
Isso se faz atualizando
o contador i

00:01:43.901 --> 00:01:46.501
adicionando 1 a ele
dentro do laço.

00:01:46.534 --> 00:01:50.167
A cada iteração,
i aumenta em 1.

00:01:50.200 --> 00:01:53.667
Esta linha se chama
incremento do laço.

00:01:53.701 --> 00:01:59.501
Para abreviar, este incremento
pode ser escrito como i++,

00:01:59.534 --> 00:02:02.267
que significa
exatamente a mesma coisa,

00:02:02.300 --> 00:02:06.767
aumentar i em 1,
adicionar 1 a i.

00:02:06.801 --> 00:02:11.501
Você pode usar a versão abreviada
ou a mais longa, tanto faz,

00:02:11.534 --> 00:02:15.434
elas fazem a mesma coisa,
mas como veremos mais tarde,

00:02:15.467 --> 00:02:19.133
esta versão curta
deixa o programa mais legível.

00:02:19.167 --> 00:02:23.901
Aqui está. Com essas 3 partes
importantes do laço,

00:02:23.934 --> 00:02:26.667
construímos um laço
que repete alguma coisa

00:02:26.701 --> 00:02:28.767
um número específico
de vezes.

00:02:28.801 --> 00:02:31.367
Vamos fazer o traço
e ver o que acontece.

00:02:31.400 --> 00:02:36.033
Digamos que chamamos a função
com o parâmetro igual a 5.

00:02:36.067 --> 00:02:39.801
Assim numOfWarnings
é igual a 5.

00:02:39.834 --> 00:02:43.834
Começamos inicializando
a variável i como 1.

00:02:43.868 --> 00:02:48.634
Então chegamos no laço
e comparamos i com numOfWarnings.

00:02:48.667 --> 00:02:54.901
Como numOfWarnings é 5,
comparamos se i &lt;= 5,

00:02:54.934 --> 00:02:56.167
que é verdadeiro.

00:02:56.200 --> 00:02:58.767
Como é verdadeiro,
entramos no laço,

00:02:58.801 --> 00:03:01.200
e executamos os comandos
dentro dele.

00:03:01.234 --> 00:03:04.501
O primeiro só diz
para imprimir "Warning".

00:03:04.534 --> 00:03:07.400
Então nossa saída
teria "Warning".

00:03:07.434 --> 00:03:10.133
A segunda linha
incrementa o i,

00:03:10.167 --> 00:03:12.734
somando 1 no i
e atualizando-o,

00:03:12.767 --> 00:03:15.234
fazendo i ter o valor de 2.

00:03:15.267 --> 00:03:18.534
Chegamos ao fim do laço,
então voltamos para cima,

00:03:18.567 --> 00:03:20.334
e repetimos a condição.

00:03:20.367 --> 00:03:25.801
Checamos se 2 &lt;= numOfWarnings,
que neste caso é 5,

00:03:25.834 --> 00:03:27.667
então ainda é verdadeiro,

00:03:27.701 --> 00:03:30.033
por isso entramos
no laço de novo,

00:03:30.067 --> 00:03:32.868
e imprimimos "Warning"
mais uma vez.

00:03:32.901 --> 00:03:36.734
De novo, incrementamos i,
fazendo ser 1 a mais,

00:03:36.767 --> 00:03:39.534
chegamos ao fim do laço,
voltamos para cima,

00:03:39.567 --> 00:03:42.901
fazemos a comparação,
e 3 ainda é menor ou igual a 5,

00:03:42.934 --> 00:03:46.968
então entramos de novo,
e imprimimos a mensagem.

00:03:47.000 --> 00:03:51.167
Incrementamos i de novo,
e checamos a condição do laço,

00:03:51.200 --> 00:03:54.901
que ainda é menor ou igual a 5,
entramos no laço de novo,

00:03:54.934 --> 00:03:58.467
imprimimos mais uma vez,
incrementamos i para 5,

00:03:58.501 --> 00:04:01.267
e depois voltamos
para o início do laço,

00:04:01.300 --> 00:04:05.300
comparando 5 com numOfWarnings,
que ainda é menor ou igual a 5,

00:04:05.334 --> 00:04:06.934
porque 5 = 5,

00:04:06.968 --> 00:04:08.300
então é verdadeiro,

00:04:08.334 --> 00:04:11.801
entramos no laço,
e imprimimos "Warning" de novo.

00:04:11.834 --> 00:04:15.467
Depois incrementamos i,
fazendo com que seja 6,

00:04:15.501 --> 00:04:17.968
voltamos para cima,
fazemos a checagem,

00:04:18.000 --> 00:04:20.734
se 6 &lt;= 5, mas não é.

00:04:20.767 --> 00:04:25.000
Assim, chegamos a esta parte,
esta condição é falsa,

00:04:25.033 --> 00:04:27.033
então não entramos no laço,

00:04:27.067 --> 00:04:28.767
só saímos.

00:04:28.801 --> 00:04:30.801
É o fim da função.

00:04:30.834 --> 00:04:33.701
Se chamarmos a função
com o parâmetro 5,

00:04:33.734 --> 00:04:36.067
vemos "Warning" ser impresso
5 vezes.

