WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:05.367
Você sabia que a pirâmide de Gizé
é composta de 2 milhões de blocos?

00:00:05.400 --> 00:00:09.000
Imagine que queremos construir
uma pirâmide pequena aqui,

00:00:09.033 --> 00:00:10.667
mais ou menos assim.

00:00:10.701 --> 00:00:14.567
A camada de baixo
tem 9 blocos, que é 3 vezes 3,

00:00:14.601 --> 00:00:19.334
e a segunda camada
são 2 vezes 2 blocos,

00:00:19.367 --> 00:00:21.834
e a última camada
é só esse bloco.

00:00:21.868 --> 00:00:26.634
Esta pirâmide tem 14 blocos,
1 mais 4 mais 9.

00:00:26.667 --> 00:00:29.767
E se quiséssemos colocar
mais uma camada embaixo,

00:00:29.801 --> 00:00:31.734
feita de 5 vezes 5 blocos?

00:00:31.767 --> 00:00:35.167
Qual o número total de blocos
teríamos nesta pirâmide?

00:00:35.200 --> 00:00:38.667
E se quiséssemos uma pirâmide
com 100 níveis de altura?

00:00:38.701 --> 00:00:41.968
O número de blocos
cresce muito rápido.

00:00:42.000 --> 00:00:45.067
Em vez de contar os blocos
manualmente,

00:00:45.100 --> 00:00:49.501
por que não escreve uma função
em java que conte para você?

00:00:49.534 --> 00:00:53.767
Ela pode receber uma variável que
é o número de níveis que queremos

00:00:53.801 --> 00:00:57.033
e retornar
o número de blocos necessários.

00:00:57.067 --> 00:01:00.934
Por exemplo, neste caso,
se a entrada for 3,

00:01:00.968 --> 00:01:04.267
ela vai retornar 14,
porque precisamos de 3 vezes 3,

00:01:04.300 --> 00:01:07.968
mais 2 vezes 2,
mais um, que dá 14.

00:01:08.000 --> 00:01:11.067
Em vez de contar os blocos
manualmente,

00:01:11.100 --> 00:01:15.567
por que não escreve uma função
em java que conte para você?

00:01:15.601 --> 00:01:20.033
Ela pode receber uma variável que
é o número de níveis na pirâmide

00:01:20.067 --> 00:01:23.801
e retornar o número de blocos
necessários para construí-la.

00:01:23.834 --> 00:01:27.300
Por exemplo, neste caso,
se a entrada for 3,

00:01:27.334 --> 00:01:30.501
ela vai retornar 14 blocos.

00:01:30.534 --> 00:01:34.067
Ela funciona somando os blocos
para cada nível.

00:01:34.100 --> 00:01:36.868
Começando pelo primeiro,
1 vezes 1,

00:01:36.901 --> 00:01:40.534
mais a segunda camada,
que são 2 vezes 2 blocos,

00:01:40.567 --> 00:01:43.868
mais a terceira camada,
que são 3 vezes 3 blocos.

00:01:43.901 --> 00:01:47.100
Somando esses números,
obtemos o valor 14,

00:01:47.133 --> 00:01:49.234
que é a saída desta função.

00:01:49.267 --> 00:01:51.067
Tente implementar
esta função

00:01:51.100 --> 00:01:53.300
para funcionar
com qualquer entrada

00:01:53.334 --> 00:01:56.100
e calcular o número
de blocos na pirâmide.

