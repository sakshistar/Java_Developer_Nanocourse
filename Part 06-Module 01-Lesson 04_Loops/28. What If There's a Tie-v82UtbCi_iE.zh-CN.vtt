WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.169
正确答案其实是 Kimberli

00:00:04.169 --> 00:00:07.859
为什么呢？ 我们来跟踪程序 看看是怎么回事

00:00:07.860 --> 00:00:15.120
首先创建这个变量 size 并将其初始化为 names. length

00:00:15.119 --> 00:00:18.309
因此 size 值为 7

00:00:18.309 --> 00:00:24.157
然后创建这个变量 longestName 将其初始化为 names [0]

00:00:24.157 --> 00:00:26.190
也就是这个值

00:00:26.190 --> 00:00:28.770
所以 longestName 变为 Anja

00:00:28.769 --> 00:00:31.144
然后创建 for 循环

00:00:31.144 --> 00:00:32.698
将 i 初始化为 1

00:00:32.698 --> 00:00:39.811
然后条件是 i 小于 size 增量为 i++

00:00:39.811 --> 00:00:45.000
所以在循环里 我们会判断 names [i].length 是否大于
longestName.length

00:00:45.000 --> 00:00:46.670
names [i]

00:00:46.670 --> 00:00:52.230
在这个时候是 Kimberli 而 longestName 是 Anja

00:00:52.229 --> 00:00:56.839
这个是 8 个字符长度 而这个只有 4 个

00:00:56.840 --> 00:00:59.000
所以这个 if 语句为真

00:00:59.000 --> 00:01:05.159
为 8 的 names[i].length 比为 4 的 longestName.length 大

00:01:05.159 --> 00:01:07.704
所以我们进入 if 条件

00:01:07.704 --> 00:01:13.019
将 longestName 的值更新为 names 的 也就是更新为 Kimberli

00:01:13.019 --> 00:01:15.170
我们继续 给 i 加 1

00:01:15.170 --> 00:01:17.144
现在来判断 Edmond

00:01:17.144 --> 00:01:18.481
进行比较

00:01:18.481 --> 00:01:21.992
Edmond 只有 6 个字符长度 和 8 比的话

00:01:21.992 --> 00:01:27.134
我们就不用进入 if 条件里了 继续循环就好

00:01:27.135 --> 00:01:28.440
比较 Shenna

00:01:28.439 --> 00:01:30.579
这也是 6 个字符长

00:01:30.579 --> 00:01:32.704
并不比 Kimberli 大

00:01:32.704 --> 00:01:37.390
所以 if 条件为假 我们不需要更新 longestName 继续就好

00:01:37.390 --> 00:01:40.704
现在到了 Apolonia 它有 8 个字符长

00:01:40.704 --> 00:01:46.629
而我们的 if 条件说的是 如果 names [i] 也就是 Apolonia.length

00:01:46.629 --> 00:01:50.834
也就是 8 比 longestName.length 大

00:01:50.834 --> 00:01:53.824
后者指的是 Kimberli.length 值为 8

00:01:53.825 --> 00:01:59.829
因此条件说的是如果 8 大于 8 所以条件非真

00:01:59.829 --> 00:02:01.730
因为 8 不大于 8

00:02:01.730 --> 00:02:06.614
所以我们不进入这个语句 因此不更新 longestName

00:02:06.614 --> 00:02:10.799
所以 longestName 依然为 Kimberli 我们继续循环

00:02:10.800 --> 00:02:16.445
剩下的两个字符串都比 Kimberli 小

00:02:16.444 --> 00:02:21.384
所以结束循环后 我们返回出的 longestName 值仍为 Kimberli

00:02:21.384 --> 00:02:24.689
这就是为什么在这个实现过程中

00:02:24.689 --> 00:02:27.974
这个案例实际上会返回 Kimberli

00:02:27.974 --> 00:02:29.539
概括地说

00:02:29.539 --> 00:02:33.375
程序会返回出它找到的第一个最长字符串

00:02:33.375 --> 00:02:38.569
不过 这个函数还有另一种实现的可能

00:02:38.569 --> 00:02:41.954
那就是这个判断 大于或等于

00:02:41.955 --> 00:02:45.060
我们来跟踪这个 看看它会返回什么结果

00:02:45.060 --> 00:02:48.223
longestName 会再次被初始化为 Anja

00:02:48.223 --> 00:02:52.349
在循环里 我们向下来到 Kimberli

00:02:52.349 --> 00:02:54.120
该字符串比 Anja 长

00:02:54.120 --> 00:02:57.895
所以我们把 Anja 更新掉 再次向下来到 Edmond

00:02:57.895 --> 00:03:01.140
比 Kimberli 小 所以跳过这个

00:03:01.139 --> 00:03:04.649
Shenna 也还是比 Kimberli 小 所以也跳掉

00:03:04.650 --> 00:03:09.246
现在是 Apolonia 为 8 Kimberli 也为 8

00:03:09.246 --> 00:03:13.439
所以我们的条件现在是如果 8 大于或等于 8

00:03:13.439 --> 00:03:15.560
为真

00:03:15.560 --> 00:03:20.870
所以进入 if 语句内部 更新 longestName 为 names [i] 的值 也就是
Apolonia

00:03:20.870 --> 00:03:24.405
所以这一次 longestName 更新成了 Apolonia

00:03:24.405 --> 00:03:26.967
接着判断 Caroll

00:03:26.967 --> 00:03:30.230
以及最后一个名字 都比 Apolonia 小

00:03:30.229 --> 00:03:32.699
所以最后我们返回出的 longestName

00:03:32.699 --> 00:03:34.909
变成了这个

00:03:34.909 --> 00:03:38.234
所以一个小小的变化 就像这个判断

00:03:38.235 --> 00:03:42.230
从大于变成了大于或等于 就会造成这么点不同

