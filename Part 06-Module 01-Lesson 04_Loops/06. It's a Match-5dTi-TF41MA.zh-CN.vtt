WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.120
这次我们要解决的问题

00:00:03.120 --> 00:00:06.480
是计算我们要掷五个骰子多少次 才能得到一只快艇

00:00:06.480 --> 00:00:09.675
五个骰子似乎有点复杂

00:00:09.675 --> 00:00:12.375
一开始我们还是简单点好

00:00:12.375 --> 00:00:15.324
所以我们暂时先只掷两个骰子

00:00:15.324 --> 00:00:18.300
目标是不断计算并返回出投掷次数

00:00:18.300 --> 00:00:21.835
直到两个骰子点数相同为止

00:00:21.835 --> 00:00:23.730
一旦我们写出了这个操作的代码

00:00:23.730 --> 00:00:28.949
我们就可以修改一下 往里面添加更多骰子 从而解决真正的问题

00:00:28.949 --> 00:00:32.189
要写代码来解决复杂的问题

00:00:32.189 --> 00:00:35.074
有个常用的好办法 就是像这样把问题拆分开来

00:00:35.075 --> 00:00:37.955
把问题抽象化或简化

00:00:37.954 --> 00:00:39.684
写出解决简化版问题的代码

00:00:39.685 --> 00:00:43.200
然后在那个代码的基础上进行修改 直到能解决真正的问题为止

00:00:43.200 --> 00:00:46.350
要计算让两个骰子点数相同的投掷次数

00:00:46.350 --> 00:00:49.715
我们需要声明这个叫 keepRolling (继续掷) 的函数

00:00:49.715 --> 00:00:51.585
该函数没有任何输入参数

00:00:51.585 --> 00:00:56.024
而且会返回一个整数值 也就是需要投掷的次数

00:00:56.024 --> 00:00:57.969
要模拟掷骰子的情景

00:00:57.969 --> 00:01:02.185
我们需要用上节课创建好的 rollDice (掷骰子) 函数

00:01:02.185 --> 00:01:03.929
rollDice 会返回一个随机数

00:01:03.929 --> 00:01:07.590
范围在 1 到 6 之间 模拟了掷一颗骰子的情景

00:01:07.590 --> 00:01:09.525
因此我们需要调用这个函数两次

00:01:09.525 --> 00:01:13.055
并将它们的值分别赋给变量 dice1 (骰子 1 ) 和 dice2 (骰子 2)

00:01:13.055 --> 00:01:15.300
然后在这再声明一个整数变量

00:01:15.299 --> 00:01:17.649
以便我们跟踪投掷次数

00:01:17.650 --> 00:01:19.920
我把这个变量初始化为 1 因为到目前为止

00:01:19.920 --> 00:01:22.185
我们只掷了一次那两个骰子

00:01:22.185 --> 00:01:26.234
接下来 只要骰子点数不同 我们就需要不断重掷

00:01:26.234 --> 00:01:29.670
我们可以用 while 循环来检查骰子点数是否相同

00:01:29.670 --> 00:01:31.875
然后在循环里进行重掷

00:01:31.875 --> 00:01:37.069
也就是当 dice1 和 dice2 不相等时

00:01:37.069 --> 00:01:41.244
我们就要重掷骰子以期获得相同的点数

00:01:41.245 --> 00:01:42.689
所以在 while 循环里

00:01:42.689 --> 00:01:46.840
我们再次调用这个 rollDice 函数来给 dice1 和 dice2 赋值

00:01:46.840 --> 00:01:50.755
然后给 count 加 1 把这次投掷加进投掷次数中

00:01:50.754 --> 00:01:53.159
记住 这里我们只需加 1

00:01:53.159 --> 00:01:57.659
因为这两个调用函数模仿的是同时掷两个骰子的情景

00:01:57.659 --> 00:01:59.039
最后总会有那么一次

00:01:59.040 --> 00:02:01.770
两个骰子返回出了相同的值

00:02:01.769 --> 00:02:04.089
于是 dice1 等于 dice2

00:02:04.090 --> 00:02:05.820
while 循环得以结束

00:02:05.819 --> 00:02:08.159
这个时候 我们就可以安全地

00:02:08.159 --> 00:02:10.469
把迄今为止得到的计值返回出来

00:02:10.469 --> 00:02:15.284
该值即得到相同点数所需的投掷次数 看起来不错

00:02:15.284 --> 00:02:19.145
现在我们让代码来执行一些例子 跟踪看看能不能奏效

00:02:19.145 --> 00:02:21.730
首先

00:02:21.729 --> 00:02:25.599
我们调用这个 rollDice 函数 将其返回值赋给 dice1

00:02:25.599 --> 00:02:28.555
假设随机返回出的值为 4

00:02:28.555 --> 00:02:31.885
下一行再次调用 rollDice 赋值给 dice2

00:02:31.884 --> 00:02:34.060
假设这个返回值为 2

00:02:34.060 --> 00:02:35.784
所以 dice1 里的值是 4

00:02:35.784 --> 00:02:37.879
dice2 里的是 2

00:02:37.879 --> 00:02:40.764
然后把变量 count 初始化为 1

00:02:40.764 --> 00:02:43.189
进行 while 条件判断

00:02:43.189 --> 00:02:46.384
判断 dice1 和 dice2 是否相同

00:02:46.384 --> 00:02:48.789
这里 4 和 2 并不相同

00:02:48.789 --> 00:02:52.734
所以循环条件为真 我们需要进入循环

00:02:52.735 --> 00:02:54.500
重掷骰子

00:02:54.500 --> 00:02:56.365
再次调用两次 rollDice 函数

00:02:56.365 --> 00:02:58.850
更新 dice1 和 2 的值

00:02:58.849 --> 00:03:01.405
假设这次 dice1 的值变为 6

00:03:01.405 --> 00:03:03.580
dice2 的值变为 5

00:03:03.580 --> 00:03:06.719
之后给变量 count 加 1

00:03:06.719 --> 00:03:09.574
将其从 1 更新为 2

00:03:09.574 --> 00:03:12.750
我们已经到了 while 循环的右括号

00:03:12.750 --> 00:03:16.409
所以回到这上面来 再次进行比较

00:03:16.409 --> 00:03:18.604
我们的 dice1 和 dice2 不一样

00:03:18.604 --> 00:03:21.899
6 和 5 的确不一样 所以条件为真

00:03:21.900 --> 00:03:23.594
再次进入循环

00:03:23.594 --> 00:03:27.419
再次用 rollDice 更新 dice1 和 dice2

00:03:27.419 --> 00:03:30.689
假设这一次我们得到的值为 2 和 3

00:03:30.689 --> 00:03:32.680
count 再加 1

00:03:32.680 --> 00:03:34.425
更新为 3

00:03:34.425 --> 00:03:38.165
然后回到上面 继续进行循环条件判断

00:03:38.164 --> 00:03:41.094
判断 dice1 和 dice2 是否相同

00:03:41.094 --> 00:03:42.534
2 和 3 不相同

00:03:42.534 --> 00:03:46.064
所以条件为真 我们得再进入循环

00:03:46.064 --> 00:03:48.585
再次更新 dice1 和 dice2

00:03:48.585 --> 00:03:51.469
假设这次我们得到了 1 和 1

00:03:51.469 --> 00:03:54.194
给 count 加 1 使其变为 4

00:03:54.194 --> 00:03:57.305
也就是说到目前为止我们共投掷了 4 次

00:03:57.305 --> 00:04:00.885
然后再回来 进行循环条件判断

00:04:00.884 --> 00:04:03.849
这一次 dice1 和 dice2 一样了

00:04:03.849 --> 00:04:09.000
所以条件判断结果为假

00:04:09.000 --> 00:04:11.389
也就是说 while 循环不会再执行内部代码

00:04:11.389 --> 00:04:15.209
直接跳到了这里的右花括号 程序继续往下执行

00:04:15.210 --> 00:04:18.745
不过这里循环后只有返回 count 值的指令

00:04:18.745 --> 00:04:20.954
所以我们返回出值 4

00:04:20.954 --> 00:04:26.419
也就是说 等到两个骰子点数相同 我们已经投掷了四次

00:04:26.420 --> 00:04:28.920
你觉得我们要怎么修改这个代码

00:04:28.920 --> 00:04:32.810
才能让它适用于三个骰子的情景而非两个呢？

