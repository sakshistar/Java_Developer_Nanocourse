WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.530
所以 要用 while 循环 以一定次数重复某件事

00:00:04.530 --> 00:00:08.414
我们得用到这三个重要部分 循环计数器、

00:00:08.414 --> 00:00:12.139
循环条件以及循环增量

00:00:12.140 --> 00:00:15.419
这三个部分需要共同合作

00:00:15.419 --> 00:00:19.449
确保循环会以我们要的次数重复执行

00:00:19.449 --> 00:00:23.669
不过事实上 Java 提供了另一种循环 叫做 for 循环

00:00:23.670 --> 00:00:28.935
其功能基本与我们在这用 while 循环做的事一样 不过写起来更方便

00:00:28.934 --> 00:00:33.479
我们来看看要怎么用 for 循环来实现 raiseAlarm 函数

00:00:33.479 --> 00:00:35.654
for 循环写起来是这样的

00:00:35.655 --> 00:00:41.505
for 后面是括号 然后这里有三个部分 由分号隔开

00:00:41.505 --> 00:00:46.115
这三个部分基本上就是我们在 while 循环里做的那三步

00:00:46.115 --> 00:00:49.005
第一个部分放循环计数器

00:00:49.005 --> 00:00:51.568
也就是 int (整数) i=1

00:00:51.567 --> 00:00:53.789
和这里的第一条对应

00:00:53.789 --> 00:00:59.119
第二个部分是循环条件 和 while 循环完全相同

00:00:59.119 --> 00:01:01.064
即 i &lt;= numOfWarnings

00:01:01.064 --> 00:01:03.076
和这里的第二条对应

00:01:03.076 --> 00:01:05.129
最后一个部分是循环增量

00:01:05.129 --> 00:01:06.339
就是 i++

00:01:06.340 --> 00:01:09.755
和上面的第三条对应

00:01:09.754 --> 00:01:13.769
不过 注意 i++ 后面没有分号

00:01:13.769 --> 00:01:18.484
我们只用这两个分号来分隔这三个部分

00:01:18.484 --> 00:01:25.500
所以 虽然 for 循环要做的事和这个完全相同 但要写成这样

00:01:25.500 --> 00:01:31.745
for (int i = 1; i &lt;= numOfWarnings ; i++ )

00:01:31.745 --> 00:01:36.600
然后在花括号里面 我们想重复执行什么指令就写什么

00:01:36.599 --> 00:01:39.867
注意 在循环里 我们不再进行增量操作

00:01:39.867 --> 00:01:42.599
因为这个循环的定义已经包含了这部分

00:01:42.599 --> 00:01:45.479
我们来跟踪循环 看看怎么样

00:01:45.480 --> 00:01:50.255
正如你所见 用 for 循环来写的话 函数看起来简单很多

00:01:50.254 --> 00:01:53.574
因为所有东西都被写到了这一行里

00:01:53.575 --> 00:01:57.189
为了测试 我们再次假设实参为 5

00:01:57.189 --> 00:02:02.474
于是给 numOfWarnings 赋值为 5 然后来到这里

00:02:02.474 --> 00:02:07.384
for 循环要做的第一件事 就是把 i 初始值设为 1

00:02:07.385 --> 00:02:12.560
然后进行比较 判断 i 是否小于或等于 numOfWarnings

00:02:12.560 --> 00:02:15.405
现在这个值是 5 所以结果为真

00:02:15.405 --> 00:02:17.360
不过它现在还不会进行增量操作

00:02:17.360 --> 00:02:19.475
而是立刻进入循环

00:02:19.474 --> 00:02:21.094
执行这里的指令

00:02:21.094 --> 00:02:22.745
也就是输出警告

00:02:22.745 --> 00:02:25.334
到达循环尾部 然后我们回到这上面来

00:02:25.334 --> 00:02:27.979
这时循环要做的第一件事就是增量

00:02:27.979 --> 00:02:30.394
也就是说 for 循环每完成一次迭代

00:02:30.395 --> 00:02:33.094
就会先进行增量操作

00:02:33.094 --> 00:02:35.210
在这里就是使 i 变为 2

00:02:35.210 --> 00:02:37.254
完成了增量操作

00:02:37.254 --> 00:02:40.180
循环就会继续进行判断

00:02:40.180 --> 00:02:43.453
i 是否小于或等于 numOfWarnings 呢？

00:02:43.453 --> 00:02:45.580
是的

00:02:45.580 --> 00:02:49.020
于是我们再次进入循环 输出警告

00:02:49.020 --> 00:02:51.185
到达循环尾部

00:02:51.185 --> 00:02:54.670
回来 进行增量操作 使 i 变为 3

00:02:54.669 --> 00:02:59.139
进行比较 3 小于或等于 5

00:02:59.139 --> 00:03:02.839
于是进入循环 输出警告

00:03:02.840 --> 00:03:06.731
继续重复这件事 i 为 4 小于 5

00:03:06.731 --> 00:03:09.889
输出警告 然后 i 再次得到增量

00:03:09.889 --> 00:03:13.389
变成 5 判断结果仍为真

00:03:13.389 --> 00:03:16.459
于是进入循环 输出警告

00:03:16.460 --> 00:03:17.900
现在 我们到达了循环尾部

00:03:17.900 --> 00:03:20.805
回来 将 i 增量为 6

00:03:20.805 --> 00:03:22.129
做判断

00:03:22.129 --> 00:03:25.715
这一次 6 不再小于或等于 5 了

00:03:25.715 --> 00:03:28.189
所以我们不会进入循环

00:03:28.189 --> 00:03:32.109
正如你所见 就连变量的跟踪过程也和 while 循环的完全相同

00:03:32.110 --> 00:03:33.560
唯一不同的就是写法

00:03:33.560 --> 00:03:36.259
for 循环更紧凑 可读性更强

