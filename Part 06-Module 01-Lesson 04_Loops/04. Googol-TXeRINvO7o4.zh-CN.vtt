WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.620
你知道谷歌的名称 Google 一开始只是巧妙地借用了单词 Googol 吗？

00:00:04.620 --> 00:00:12.179
Googol (古戈尔) 是个数学术语 指的是一个很大的数 即 1 后面跟着 100 个 0

00:00:12.179 --> 00:00:14.669
谷歌很喜欢这个词 因为它看起来

00:00:14.669 --> 00:00:18.405
就像因特网里有的网页那么多

00:00:18.405 --> 00:00:21.390
事实上 古戈尔太大了

00:00:21.390 --> 00:00:25.335
Java 里没有一个值数据类型能存放它

00:00:25.335 --> 00:00:29.944
就算是长整型数据能储存的最大值也只是 2 的 63 次方

00:00:29.943 --> 00:00:34.524
不过是个 19 位数罢了

00:00:34.524 --> 00:00:40.564
事实上 整个宇宙的电子数远少于一个古戈尔

00:00:40.564 --> 00:00:43.949
不过我们可以把古戈尔储存为一串字符

00:00:43.950 --> 00:00:48.600
因为它只由 101 个字符组成

00:00:48.600 --> 00:00:51.725
所以 Java 里的一个字符串就能容纳它

00:00:51.725 --> 00:00:56.408
虽然把古戈尔储存在一个字符串里 我们无法对其实施任何数学运算

00:00:56.408 --> 00:01:01.620
但我们可以用这个字符串来做其它事情 比如输出该字符串

00:01:01.619 --> 00:01:07.064
然而 输出 101 个字符似乎有点枯燥

00:01:07.064 --> 00:01:11.753
那我们何不用 while 循环来创建这个字符串呢？

00:01:11.754 --> 00:01:15.650
先把字符串初始化为 1

00:01:15.650 --> 00:01:21.700
然后我们可以在 while 循环内为其串接一个字符串 0

00:01:21.700 --> 00:01:26.450
while 循环会不断检查字符串长度是否仍小于 101

00:01:26.450 --> 00:01:32.969
在长度变为 101 之前 每循环一次 字符串都会多串接一个 0

00:01:32.969 --> 00:01:35.500
所以我们需要跟踪字符串长度

00:01:35.500 --> 00:01:39.180
因此 我们需要声明一个变量 即 len 然后将其初始化

00:01:39.180 --> 00:01:44.723
也就是声明变量为整数 然后将 googol.length 的值赋给该变量

00:01:44.722 --> 00:01:47.730
length 函数会计算这个字符串的长度

00:01:47.730 --> 00:01:51.704
返回出结果并将值赋给变量 len

00:01:51.704 --> 00:01:55.140
然后我们还要在循环里更新这个变量

00:01:55.140 --> 00:01:58.844
使其一直跟踪字符串 googol 的长度

00:01:58.844 --> 00:02:01.885
你知道 while 条件该怎么写吗？

00:02:01.885 --> 00:02:06.600
记住 我们需要不断迭代这个循环

00:02:06.599 --> 00:02:12.000
直到 googol 不再小于 101 这个长度为止

