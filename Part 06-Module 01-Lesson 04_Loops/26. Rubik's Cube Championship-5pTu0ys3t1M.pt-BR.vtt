WEBVTT
Kind: captions
Language: pt-BR

00:00:41.000 --> 00:00:42.901
Pouco menos de um minuto.

00:00:42.934 --> 00:00:48.200
Nada impressionante, comparado
ao tempo de qualquer campeão mundial.

00:00:48.234 --> 00:00:52.133
Eles resolvem o cubo de Rubik
em menos de 10 segundos.

00:00:52.167 --> 00:00:56.567
Isso exige muita prática e memória,
e dedos muito rápidos.

00:00:56.601 --> 00:01:00.634
Este é um exemplo
dos melhores tempos oficiais.

00:01:00.667 --> 00:01:03.267
Podem achar
a pessoa mais rápida?

00:01:03.801 --> 00:01:07.634
Lucas Etter.
14 anos, de Kentucky, EUA.

00:01:07.667 --> 00:01:13.601
Ele teve o melhor recorde em 2015.
Foi o mais rápido a solucionar o cubo

00:01:13.634 --> 00:01:17.300
quebrando a barreira dos 5 segundos
pela 1ª vez.

00:01:17.334 --> 00:01:19.467
Mas voltemos ao quadro.

00:01:19.501 --> 00:01:22.767
Pensem sobre como acharam
o jogador mais rápido.

00:01:22.801 --> 00:01:25.000
Parece intuitivo
para nós, humanos,

00:01:25.033 --> 00:01:27.534
mas e se quiséssemos
escrever uma função

00:01:27.567 --> 00:01:31.100
que ache o menor número
numa lista dessas?

00:01:31.133 --> 00:01:36.767
Vejamos como o nosso cérebro funciona
quando buscamos o menor número

00:01:36.801 --> 00:01:40.801
numa lista de números
como aquele quadro, por exemplo.

00:01:40.834 --> 00:01:44.334
Tenho aqui um vetor de doubles
chamado Speed

00:01:44.367 --> 00:01:49.300
que tem esses números,
indexados de zero até 6.

00:01:49.334 --> 00:01:54.467
Para achar o menor número aqui,
devo ir de um em um,

00:01:54.501 --> 00:01:59.033
e só lembrar
do menor número que vi.

00:01:59.067 --> 00:02:04.601
Armazeno ele nesta variável
chamada min, de mínimo.

00:02:05.133 --> 00:02:07.334
Vamos do começo.

00:02:07.367 --> 00:02:10.300
O primeiro valor é 7,85.

00:02:10.334 --> 00:02:14.901
Por enquanto, é o menor,
então vai para a nossa variável min.

00:02:14.934 --> 00:02:20.534
Seguimos,
e o segundo valor é 7,32.

00:02:20.567 --> 00:02:26.267
Eu me pergunto:
Speed[1], esta célula aqui,

00:02:26.300 --> 00:02:28.834
é menor
do que o nosso mínimo?

00:02:30.701 --> 00:02:37.501
Sim, é, então eu atualizo o mínimo
com o novo valor, 7,32.

00:02:38.200 --> 00:02:40.033
Vou seguindo,

00:02:40.934 --> 00:02:46.667
e me pergunto de novo:
Speed[2] é menor do que o mínimo?

00:02:47.267 --> 00:02:51.834
Ela é 4,9
e o mínimo é 7,32.

00:02:51.868 --> 00:02:58.234
Sim, é, eu atualizo o mínimo
com esse novo valor, 4,9.

00:02:59.133 --> 00:03:05.367
Seguindo, pergunto de novo:
Speed[3] é menor do que o mínimo?

00:03:05.400 --> 00:03:09.667
Ela é 6,22,
e o mínimo é 4,9.

00:03:09.701 --> 00:03:15.033
Obviamente, ela não é menor,
então não atualizo o mínimo.

00:03:15.634 --> 00:03:22.033
Vou em frente, chego a 5,4,
que não é menor que 4,9,

00:03:22.067 --> 00:03:29.033
então vou seguindo.
7,3 também não é menor que 4,9.

00:03:29.067 --> 00:03:35.067
Vou continuando,
5,19 também não é menor que o mínimo.

00:03:35.100 --> 00:03:41.434
Termino toda a lista,
e o valor mínimo que achei foi 4,9.

00:03:42.200 --> 00:03:45.000
O que fizemos
chama-se algoritmo.

00:03:45.033 --> 00:03:48.300
Basicamente seguir
um número sistemático de passos

00:03:48.334 --> 00:03:51.334
até acharmos a solução correta
que queremos.

00:03:51.367 --> 00:03:54.200
Pensar assim nos ajuda
a escrever código.

00:03:54.234 --> 00:03:56.801
Vejamos como
implementar isso no Java.

00:03:56.834 --> 00:04:00.133
Suponha que queremos escrever
numa função como essa,

00:04:00.167 --> 00:04:04.667
uma função chamada search que recebe
como parâmetro um vetor de doubles

00:04:04.701 --> 00:04:06.000
chamado speed,

00:04:06.033 --> 00:04:07.834
e retorna um só double,

00:04:07.868 --> 00:04:11.400
que é o mais rápido,
ou o menor valor neste vetor.

00:04:11.434 --> 00:04:15.667
O parâmetro é o vetor speed,
que é um vetor de doubles,

00:04:15.701 --> 00:04:19.467
e retorna um double,
que é a maior velocidade encontrada.

00:04:19.501 --> 00:04:23.534
Vou deixar isto como exemplo
para fazer o traço mais tarde.

00:04:24.400 --> 00:04:28.234
A primeira coisa a fazer
é ver o tamanho do vetor

00:04:28.267 --> 00:04:30.968
e guardar na variável
chamada size.

00:04:31.000 --> 00:04:35.601
Qualquer vetor .length calcula
quantas células tem no vetor

00:04:35.634 --> 00:04:38.400
e retorna um número inteiro
com esse valor.

00:04:38.434 --> 00:04:44.300
Neste caso, o tamanho é 7,
porque temos 7 células.

00:04:44.334 --> 00:04:47.501
O próximo passo é criar
esta variável chamada min,

00:04:47.534 --> 00:04:50.367
que lembra do menor número
enquanto seguimos,

00:04:50.400 --> 00:04:53.834
e vamos inicializá-la
com o primeiro item do vetor,

00:04:53.868 --> 00:04:55.734
que é speed[0];

00:04:55.767 --> 00:05:02.100
Depois desta instrução,
a variável min teria 7,85 nela.

00:05:02.133 --> 00:05:05.100
Se fosse outro vetor
passado como parâmetro,

00:05:05.133 --> 00:05:09.000
ela pegaria o valor
do primeiro item.

00:05:09.033 --> 00:05:14.000
Então precisamos usar um laço,
para iterarmos sobre este vetor.

00:05:14.033 --> 00:05:16.734
O contador do laço
é inicializado em 1

00:05:16.767 --> 00:05:19.901
e nossa condição é i&lt;size.

00:05:19.934 --> 00:05:26.267
Ou seja, o contador contaria de 1
até antes de chegar a size.

00:05:26.300 --> 00:05:31.200
E o incremento é só i++,
estamos sempre adicionando 1.

00:05:31.234 --> 00:05:36.334
Começamos de 1 porque já
atribuímos min ao primeiro item.

00:05:36.367 --> 00:05:40.167
Devemos começar a comparar
do item com índice 1

00:05:40.200 --> 00:05:43.400
até o fim, que é size.

00:05:43.434 --> 00:05:44.868
O que fazemos?

00:05:44.901 --> 00:05:50.567
Dentro do laço, nos perguntamos
se esse valor, nessa hora específica,

00:05:50.601 --> 00:05:54.701
no laço, é menor
que nosso valor mínimo.

00:05:54.734 --> 00:05:56.634
Usamos uma condição if.

00:05:56.667 --> 00:06:02.400
if(speed[i]&lt;min)

00:06:02.434 --> 00:06:06.567
speed[i] aponta
uma célula específica no vetor

00:06:06.601 --> 00:06:09.033
dependendo do valor de i.

00:06:09.067 --> 00:06:13.934
Começa apontando para esta célula,
depois vai para esta,

00:06:13.968 --> 00:06:15.767
e assim por diante.

00:06:15.801 --> 00:06:18.634
E estamos sempre
comparando ao mínimo.

00:06:18.667 --> 00:06:22.767
Se for menor que o mínimo,
nós o atualizamos para esse valor

00:06:22.801 --> 00:06:24.601
que tem em speed[i].

00:06:24.634 --> 00:06:26.634
Quando o laço
estiver completo,

00:06:26.667 --> 00:06:29.801
após visitarmos
todas as células,

00:06:29.834 --> 00:06:31.701
podemos retornar mínimo,

00:06:31.734 --> 00:06:36.734
pois a esse ponto, temos certeza de que
o mínimo teria o menor valor no vetor.

