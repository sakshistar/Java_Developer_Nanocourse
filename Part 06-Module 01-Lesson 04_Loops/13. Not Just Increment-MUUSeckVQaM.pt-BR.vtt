WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:05.567
Já vimos como usar laços for
para contar de 1 até algum número.

00:00:05.601 --> 00:00:08.901
Mas tem mais coisas que
podemos fazer com laços for.

00:00:08.934 --> 00:00:12.501
Por exemplo, não precisamos
sempre começar com 1.

00:00:12.534 --> 00:00:17.033
Se você quiser uma função que
soma os números de 15 até 20,

00:00:17.067 --> 00:00:20.100
15 + 16... até 20,

00:00:20.133 --> 00:00:22.267
e retorne a soma total,

00:00:22.300 --> 00:00:25.767
a função seria escrita como
public int addNumbers,

00:00:25.801 --> 00:00:27.801
que não recebe parâmetros,

00:00:27.834 --> 00:00:30.501
mas retorna um int,
que é a soma total.

00:00:30.534 --> 00:00:34.467
A primeira coisa a fazer
é inicializar sum como zero

00:00:34.501 --> 00:00:36.400
e começar o laço.

00:00:36.434 --> 00:00:41.100
Podemos fazer o laço usar
a variável i como contador

00:00:41.133 --> 00:00:43.000
começando por 15,

00:00:43.033 --> 00:00:46.934
e a condição seria
i menor ou igual a 20.

00:00:46.968 --> 00:00:50.000
E o incremento seria i++.

00:00:50.033 --> 00:00:54.033
Dentro do laço,
somaríamos i em sum

00:00:54.067 --> 00:00:56.467
e atualizaríamos sum
com o novo valor.

00:00:56.501 --> 00:00:58.000
Quando o laço terminar,

00:00:58.033 --> 00:01:02.901
teríamos o número total,
15 + 16... até 20,

00:01:02.934 --> 00:01:05.467
e retornaríamos
como retorno da função.

00:01:05.501 --> 00:01:09.534
Vamos fazer o traço do laço
para ver o que acontece.

00:01:09.567 --> 00:01:12.534
Começamos com sum
inicializada em zero,

00:01:12.567 --> 00:01:14.200
com o valor de zero,

00:01:14.234 --> 00:01:17.868
depois entramos no laço,
inicializando i como 15,

00:01:17.901 --> 00:01:21.467
e como i é menor ou igual a 20,
isso é verdadeiro,

00:01:21.501 --> 00:01:24.901
então entramos no laço
e rodamos esta linha,

00:01:24.934 --> 00:01:27.167
que é sum = sum + i.

00:01:27.200 --> 00:01:29.901
sum era zero, sum + i é 15,

00:01:29.934 --> 00:01:33.300
e sum é atualizada
como o resultado da conta,

00:01:33.334 --> 00:01:34.400
que é 15.

00:01:34.434 --> 00:01:37.601
Chegamos ao fim do laço,
então voltamos para cima,

00:01:37.634 --> 00:01:41.934
incrementamos o contador,
que passa a ser 16,

00:01:41.968 --> 00:01:44.634
e fazemos a checagem.

00:01:44.667 --> 00:01:47.467
i é menor ou igual a 20?
É, sim.

00:01:47.501 --> 00:01:50.501
Entramos de novo,
somamos i a sum de novo,

00:01:50.534 --> 00:01:52.934
atualizamos sum,
somando i a sum,

00:01:52.968 --> 00:01:58.400
que é 15 + 16, e o resultado
entra em sum, que é 31,

00:01:58.434 --> 00:02:00.267
e assim por diante.

00:02:00.300 --> 00:02:04.834
Incrementamos i de novo para 17,
a comparação é verdadeira,

00:02:04.868 --> 00:02:09.200
entramos, atualizamos sum,
e incrementamos i,

00:02:09.234 --> 00:02:11.400
fazemos a comparação,

00:02:11.434 --> 00:02:14.968
atualizamos sum,
incrementamos i,

00:02:15.000 --> 00:02:19.400
comparação, sum,
incrementa i, comparação...

00:02:19.434 --> 00:02:23.000
Neste ponto, sum é 105,

00:02:23.033 --> 00:02:24.801
chegamos ao fim do laço,

00:02:24.834 --> 00:02:27.767
subimos, incrementamos i,
que passa a ser 21,

00:02:27.801 --> 00:02:31.767
e fazemos a comparação,
se i é menor ou igual a 20,

00:02:31.801 --> 00:02:35.000
e agora i é 21,
então a comparação é falsa.

00:02:35.033 --> 00:02:37.601
Por isso,
não entramos mais no laço,

00:02:37.634 --> 00:02:40.000
viemos para cá,
onde diz return sum.

00:02:40.033 --> 00:02:43.701
A função termina retornando
o valor de sum, que é 105.

00:02:43.734 --> 00:02:45.667
Este é o valor correto.

00:02:45.701 --> 00:02:51.467
A ideia aqui é que, como começamos
i com um valor que não era 1, era 15,

00:02:51.501 --> 00:02:54.167
e a condição do laço
ia até 20,

00:02:54.200 --> 00:02:58.801
vemos que i varia de 15
até sair do laço.

00:02:58.834 --> 00:03:01.534
Outra coisa que podemos fazer
com laços for

00:03:01.567 --> 00:03:04.133
é contar para baixo,
em vez de para cima.

00:03:04.167 --> 00:03:07.467
Este laço conta de 1 até 3.

00:03:07.501 --> 00:03:10.868
Rodando, obtemos
esta saída, 1 2 3.

00:03:10.901 --> 00:03:15.334
Isto é por causa do i++,
que é o incremento do laço.

00:03:15.367 --> 00:03:18.033
Ele faz i aumentar de 1
a cada vez,

00:03:18.067 --> 00:03:20.801
indo de 1 para 2 para 3.

00:03:20.834 --> 00:03:26.067
Mas se quisermos que a saída
fosse 3 2 1, contando para baixo,

00:03:26.100 --> 00:03:29.601
podemos usar a notação i--.

00:03:29.634 --> 00:03:34.267
Assim como i++ soma 1 a i
e atualiza o valor,

00:03:34.300 --> 00:03:39.467
i-- subtrai 1 de i
e atualiza o valor também.

00:03:39.501 --> 00:03:42.100
Se chama decremento,

00:03:42.133 --> 00:03:45.467
porque i está diminuindo
a cada vez.

00:03:45.501 --> 00:03:49.434
É a mesma coisa que dizer
que i é igual a i-1.

00:03:49.467 --> 00:03:51.868
É só uma abreviação.

00:03:51.901 --> 00:03:55.901
Mas usando i--,
estamos contando para baixo,

00:03:55.934 --> 00:03:59.167
então queremos que o laço
comece pelo número maior,

00:03:59.200 --> 00:04:00.734
que seria 3.

00:04:00.767 --> 00:04:04.200
Então i começa em 3
e conta para baixo.

00:04:04.234 --> 00:04:07.634
Mas a condição do laço
também precisa mudar.

00:04:07.667 --> 00:04:11.234
Pode tentar descobrir qual deve
ser a condição do laço?

