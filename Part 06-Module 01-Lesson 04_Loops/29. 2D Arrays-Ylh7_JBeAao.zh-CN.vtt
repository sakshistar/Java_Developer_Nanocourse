WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.669
之前我们已经学习了

00:00:02.669 --> 00:00:06.150
如何计算一个双精度数组的平均值 并以平均温度的计算做了示范

00:00:06.150 --> 00:00:08.429
假设我们现在想写点 Java 代码

00:00:08.429 --> 00:00:12.460
来对这样的成绩表做基本的成绩分析

00:00:12.460 --> 00:00:14.910
这里给出了 4 个不同科目的成绩

00:00:14.910 --> 00:00:16.664
涉及了 5 个不同的学生

00:00:16.664 --> 00:00:18.419
所以表格有 4 乘 5 项

00:00:18.420 --> 00:00:22.810
也就是有 20 个成绩

00:00:22.809 --> 00:00:25.229
可能我们会想 行啊

00:00:25.230 --> 00:00:28.359
我们可以把所有成绩存储到一个有 20 个整数长的整数数组里

00:00:28.359 --> 00:00:31.844
但我们要做的分析很多 这么做并没有什么好处

00:00:31.844 --> 00:00:34.875
比如 如果我们想得到每个学生的平均成绩

00:00:34.875 --> 00:00:39.409
我们就得逐个进行平均值计算

00:00:39.409 --> 00:00:43.334
但如果把所有整数都存放到这么个数组里

00:00:43.335 --> 00:00:46.620
那就会很麻烦

00:00:46.619 --> 00:00:50.544
因为我们得把每个学生的每门科目成绩和数组索引号对应起来

00:00:50.545 --> 00:00:54.539
解决办法之一是将这些成绩存放到多个数组中

00:00:54.539 --> 00:00:59.804
我们可以分别给每个学生创建一个数组 然后在其中存放四门科目的成绩

00:00:59.804 --> 00:01:02.340
然后我们可以使用循环

00:01:02.340 --> 00:01:04.590
计算每个学生的平均成绩等

00:01:04.590 --> 00:01:07.439
但假如我们想计算每门科目的平均成绩

00:01:07.439 --> 00:01:11.245
比如说我们要观察学生在生物这一门学科的整体表现

00:01:11.245 --> 00:01:14.870
那我们就需要将这所有数组的这个项都访问一遍

00:01:14.870 --> 00:01:19.100
这个时候循环可没办法帮我们

00:01:19.099 --> 00:01:21.949
不过 我们可以为各科分别创建一个数组

00:01:21.950 --> 00:01:25.280
而不是为各学生分别创建数组

00:01:25.280 --> 00:01:28.144
这样我们就能够轻松算出各科目的平均分了

00:01:28.144 --> 00:01:31.854
但这样一来 我们又无法对各学生的成绩进行循环操作了

00:01:31.855 --> 00:01:33.770
这就是为什么当你处理一些

00:01:33.769 --> 00:01:36.125
表格或网格之类的数据时

00:01:36.125 --> 00:01:39.545
Java 会为你提供一种叫二维数组的东西

00:01:39.545 --> 00:01:44.480
你可以把二维数组想成是一个数组的数组

00:01:44.480 --> 00:01:50.135
也就是把这张表里的每一行想成是一个个整数数组

00:01:50.135 --> 00:01:56.015
我们可以把这些数组绑在一起放到一个大数组里

00:01:56.015 --> 00:01:59.810
这样一来 每个数组都有一个索引 从 0 到 3 编号

00:01:59.810 --> 00:02:04.575
而这些数组里的每一项也有索引

00:02:04.575 --> 00:02:06.960
要声明一个二维数组

00:02:06.959 --> 00:02:09.919
你需要输入存放在数组里的数据类型

00:02:09.919 --> 00:02:12.319
再输入两对方括号

00:02:12.319 --> 00:02:13.754
之后输入数组名

00:02:13.754 --> 00:02:19.474
这是因为实际上我们是在创建一个叫 grades 的整数数组数组

00:02:19.474 --> 00:02:23.305
二维数组的美妙之处就在于 你可以访问这个表格的任一项

00:02:23.306 --> 00:02:25.310
只要给出两个索引就行了

00:02:25.310 --> 00:02:29.240
比如 如果我们想知道 Tim 的生物成绩

00:02:29.240 --> 00:02:32.600
我们可以输入 grades [2] [1]

00:02:32.599 --> 00:02:36.799
这里的 2 是我们要的数组的索引号

00:02:36.800 --> 00:02:38.647
也就是生物

00:02:38.646 --> 00:02:41.074
而第二对方括号里的这个 1

00:02:41.074 --> 00:02:45.074
指的是那个数组里的项的索引

00:02:45.074 --> 00:02:49.674
grades [2] [1] 存放的就是 75 这个值

00:02:49.675 --> 00:02:53.420
假如我们想知道 Sam 的英语成绩

00:02:53.419 --> 00:02:56.780
这个成绩是存放在 grades [1] [3] 中的

00:02:56.780 --> 00:02:59.344
因为英语的索引号为 1

00:02:59.344 --> 00:03:02.080
而 Sam 的索引号为 3

00:03:02.080 --> 00:03:05.690
所以通常我们要先输入数组的索引

00:03:05.689 --> 00:03:08.509
随后在第二对方括号里

00:03:08.509 --> 00:03:11.629
再输入那个数组里相关项的索引

00:03:11.629 --> 00:03:16.000
那么要找出 Sandra 的美术成绩 我们得用什么索引呢？

