WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Notice that this loop counter here is not only

00:00:03.000 --> 00:00:05.964
there to control how many times the loop should iterate.

00:00:05.964 --> 00:00:10.390
It can actually be used inside the loop as a variable. Let's see how.

00:00:10.390 --> 00:00:13.455
Say for example you want to change the warning message

00:00:13.455 --> 00:00:16.605
to actually say the number of the warning it's displaying,

00:00:16.605 --> 00:00:17.910
like Warning # 1,

00:00:17.910 --> 00:00:21.460
Warning # 2, 3, 4, and 5.

00:00:21.460 --> 00:00:27.905
This can be done by simply concatenating our variable i to our warning message here.

00:00:27.905 --> 00:00:30.270
Everything else can remain the same.

00:00:30.269 --> 00:00:33.019
Let's trace this program and see what's going on.

00:00:33.020 --> 00:00:36.700
If we call our function raiseAlarm by passing in the value of five,

00:00:36.700 --> 00:00:39.625
so number of warnings is equal to five.

00:00:39.625 --> 00:00:41.924
We start by initializing i to one,

00:00:41.924 --> 00:00:45.674
and then we compare i to the number of warnings.

00:00:45.674 --> 00:00:47.009
If it's less than or equal to five,

00:00:47.009 --> 00:00:49.619
which is true, so we step inside our loop.

00:00:49.619 --> 00:00:54.584
First thing we're doing is we're printing out warning number concatenated with i.

00:00:54.585 --> 00:00:56.755
In that case i is equal to one.

00:00:56.755 --> 00:01:00.455
So this is going to print out Warning # 1.

00:01:00.454 --> 00:01:01.704
We've reached the end of the loop,

00:01:01.704 --> 00:01:03.244
so what's the first thing we do?

00:01:03.244 --> 00:01:06.379
We increment i, making it two,

00:01:06.379 --> 00:01:10.795
and then, once we increment i we go and do our check.

00:01:10.796 --> 00:01:12.673
Two is less than or equal to five,

00:01:12.673 --> 00:01:15.204
and that's true, so we step inside our loop.

00:01:15.204 --> 00:01:16.763
Now i is equal to two,

00:01:16.763 --> 00:01:19.079
so when we concatenate it with warning number,

00:01:19.079 --> 00:01:21.209
we get the message Warning # 2.

00:01:21.209 --> 00:01:23.954
Iterating so we increment i,

00:01:23.954 --> 00:01:25.563
we do our comparison,

00:01:25.563 --> 00:01:28.619
and then we step inside making Warning # 3,

00:01:28.620 --> 00:01:29.730
because i is three,

00:01:29.730 --> 00:01:31.814
and the same for four,

00:01:31.814 --> 00:01:33.194
we do our comparison,

00:01:33.194 --> 00:01:40.289
print it out and five print it out and then once i becomes six,

00:01:40.290 --> 00:01:41.890
we do our comparison,

00:01:41.890 --> 00:01:44.340
so six is no longer less than or equal to five,

00:01:44.340 --> 00:01:48.590
so we do not step inside our loop and we just finish our function.

00:01:48.590 --> 00:01:52.760
We can do a lot of cool stuff using the variable i,

00:01:52.760 --> 00:01:56.510
because it keeps changing as the loop increments.

00:01:56.510 --> 00:02:01.253
However, you have to be very careful not to change the variable i,

00:02:01.253 --> 00:02:04.370
because it's still used to control the loop.

00:02:04.370 --> 00:02:06.079
Let's have a look at an example.

00:02:06.079 --> 00:02:09.900
This loop here starts with initializing i to one and it keeps

00:02:09.900 --> 00:02:15.360
iterating as long as i is less than or equal to three and it increments i by one.

00:02:15.360 --> 00:02:20.890
The first thing it does is it takes away one from i and it prints out i.

00:02:20.889 --> 00:02:23.975
If we think of what this loop is doing,

00:02:23.975 --> 00:02:27.909
it obviously loops from one to three so it goes one, two, three.

00:02:27.909 --> 00:02:31.150
And then we're subtracting one and we're printing i.

00:02:31.150 --> 00:02:35.110
So maybe we can think that this would print zero, one, two.

00:02:35.110 --> 00:02:38.440
Well, let's trace it and see what we get.

00:02:38.439 --> 00:02:41.770
First thing we do is we initialize i to one and then we

00:02:41.770 --> 00:02:45.490
do our comparison is i less than or equal to three? Yes, it is.

00:02:45.490 --> 00:02:48.070
So we step inside and then the first thing we do

00:02:48.069 --> 00:02:51.324
is we change i to be equal to i minus one.

00:02:51.324 --> 00:02:53.424
So that makes i zero,

00:02:53.425 --> 00:02:57.160
because we subtract one from i and that was one,

00:02:57.159 --> 00:03:01.324
and we update i to become that subtraction, which is zero.

00:03:01.324 --> 00:03:03.375
And then we printout i,

00:03:03.375 --> 00:03:05.270
which in our case is zero,

00:03:05.270 --> 00:03:06.985
so the output becomes zero.

00:03:06.985 --> 00:03:08.665
We end our loop,

00:03:08.664 --> 00:03:09.919
we go back up here.

00:03:09.919 --> 00:03:12.219
The first thing we do is we increment i making it

00:03:12.219 --> 00:03:15.949
one and then we do our comparison i less than or equal to three.

00:03:15.949 --> 00:03:19.714
Yes, it is. So we step inside our loop and we do this again.

00:03:19.715 --> 00:03:22.849
We subtract one from i which was one making it

00:03:22.849 --> 00:03:27.900
zero and then we step into the print line and print out zero.

00:03:27.900 --> 00:03:30.629
We finish our loop, we go back up here,

00:03:30.629 --> 00:03:33.314
we increment i to become one again.

00:03:33.314 --> 00:03:36.175
And of course one is still less than or equal to three,

00:03:36.175 --> 00:03:41.225
and that keeps on happening over and over and over.

00:03:41.224 --> 00:03:44.544
This actually is called an infinite loop,

00:03:44.544 --> 00:03:47.139
because this loop would never end.

00:03:47.139 --> 00:03:50.409
It would keep repeating itself for infinity.

00:03:50.409 --> 00:03:54.180
You have to actually stop your program and force to quit it.

00:03:54.180 --> 00:03:58.314
Infinite loops are quite common if you're not careful enough.

00:03:58.314 --> 00:04:02.379
So, feel free to use i as part of your program inside

00:04:02.379 --> 00:04:08.620
the loop but always be careful not to change it to something that is not in your control.

00:04:08.620 --> 00:04:12.745
In this case, the problem was because we were assigning a value to i,

00:04:12.745 --> 00:04:15.849
while i was still being used as our loop counter,

00:04:15.849 --> 00:04:19.540
and because every time we increment it and then decremented again,

00:04:19.540 --> 00:04:23.608
I would always iterate between one and zero and it would never end,

00:04:23.608 --> 00:04:26.134
because it would never reach three.

00:04:26.134 --> 00:04:28.629
However, if we implement our loop this way,

00:04:28.629 --> 00:04:30.909
then we're safe. Let's have a look at why.

00:04:30.910 --> 00:04:32.590
The only change we did,

00:04:32.589 --> 00:04:36.699
is we created this new variable x and when we subtract one from i,

00:04:36.699 --> 00:04:39.829
we actually store it in x rather than update the variable i.

00:04:39.829 --> 00:04:42.009
Let's trace this and see what happens.

00:04:42.009 --> 00:04:45.610
i starts by one and then we check if it's less than or equal to three.

00:04:45.610 --> 00:04:51.400
It is, so we step inside and then we update the variable x to be i minus one.

00:04:51.399 --> 00:04:52.814
So one minus one is zero,

00:04:52.814 --> 00:04:54.754
so x becomes zero.

00:04:54.754 --> 00:04:56.834
And then we print out x.

00:04:56.834 --> 00:04:59.219
So our output becomes zero.

00:04:59.220 --> 00:05:01.510
We finish this iteration so we go back up.

00:05:01.509 --> 00:05:04.629
We add one to i, and notice here because I hasn't

00:05:04.629 --> 00:05:08.670
changed so we're adding one to one and it becomes two.

00:05:08.670 --> 00:05:12.069
Two is still less than or equal to three, so it's true.

00:05:12.069 --> 00:05:16.550
So we step inside our loop and then we update x to be i minus one.

00:05:16.550 --> 00:05:18.925
i is two so x becomes one.

00:05:18.925 --> 00:05:20.439
And then we print out x,

00:05:20.439 --> 00:05:23.004
which in our case is one so we print out one.

00:05:23.004 --> 00:05:25.524
This is the end of this iteration, we go back up,

00:05:25.524 --> 00:05:29.490
we increment i to make it three and then we do our comparison,

00:05:29.490 --> 00:05:31.414
and in this case it's still true,

00:05:31.415 --> 00:05:33.020
so we step inside our loop,

00:05:33.019 --> 00:05:37.000
we update x to become two and then we print out x here.

00:05:37.000 --> 00:05:40.285
We go back up for increment i, making it four,

00:05:40.285 --> 00:05:44.007
but four is no longer less than or equal to three,

00:05:44.007 --> 00:05:46.173
so we're not going to even step into the loop,

00:05:46.173 --> 00:05:49.355
we're not going to update x and we're not going to print out anything.

00:05:49.355 --> 00:05:51.009
This is the end of the loop.

00:05:51.009 --> 00:05:53.829
The reason this was safe compared to the infinite loop we had

00:05:53.829 --> 00:05:57.444
earlier is because we were not updating the variable i.

00:05:57.444 --> 00:06:00.834
So the lesson learned from this is that we are

00:06:00.834 --> 00:06:05.419
allowed to use i as a variable as long as we don't update it.

00:06:05.420 --> 00:06:07.735
Let's see another example that's also safe.

00:06:07.735 --> 00:06:10.389
In this example, the only thing we're doing inside

00:06:10.389 --> 00:06:14.365
the loop is we're saying print i, i times two.

00:06:14.365 --> 00:06:16.030
Notice that we're not updating i,

00:06:16.029 --> 00:06:20.349
were just multiplying it by two as we're printing it out.

00:06:20.350 --> 00:06:22.210
So instead of printing out i,

00:06:22.209 --> 00:06:24.574
were printing out twice i.

00:06:24.574 --> 00:06:27.454
Let's trace this program and see what's happening.

00:06:27.454 --> 00:06:30.175
The first thing is we initialize i to be one,

00:06:30.175 --> 00:06:32.620
and then we compare it if it's less than or equal to three,

00:06:32.620 --> 00:06:34.540
which is true, so we step inside,

00:06:34.540 --> 00:06:36.610
we printout i times two,

00:06:36.610 --> 00:06:39.814
which is two because i is one.

00:06:39.814 --> 00:06:42.060
We reach the end of the iteration,

00:06:42.060 --> 00:06:44.730
we increment i to become two.

00:06:44.730 --> 00:06:48.610
The reason that this is okay is because i hasn't changed,

00:06:48.610 --> 00:06:50.610
so when we reached our increment,

00:06:50.610 --> 00:06:54.245
it was still one so it jumps up to two as normal.

00:06:54.245 --> 00:06:55.644
And then we do our comparison,

00:06:55.644 --> 00:06:57.479
i is less than or equal to three. Yes, it is.

00:06:57.480 --> 00:06:58.790
So we step inside.

00:06:58.790 --> 00:07:00.285
We print i times two.

00:07:00.285 --> 00:07:03.705
i is two, so the output would be four.

00:07:03.704 --> 00:07:04.964
And then we go back up,

00:07:04.964 --> 00:07:06.924
we increment i to become three,

00:07:06.925 --> 00:07:09.129
three is still less than or equal to three,

00:07:09.129 --> 00:07:13.075
so we step inside and we print out three times two which is six.

00:07:13.074 --> 00:07:16.019
We increment i which makes it four,

00:07:16.019 --> 00:07:18.359
but four is no longer less than or equal to three,

00:07:18.360 --> 00:07:21.254
so that's false and we don't print anything.

00:07:21.254 --> 00:07:23.310
Once that condition becomes false,

00:07:23.310 --> 00:07:27.555
we do not step into the loop and we just exit. So there you go.

00:07:27.555 --> 00:07:30.449
It's really handy when we use the variable i

00:07:30.449 --> 00:07:34.170
or whatever the loop counter is called inside our loop.

00:07:34.170 --> 00:07:36.990
Remember that you could also do this with while loops of course,

00:07:36.990 --> 00:07:40.100
just be very careful not to change it.

00:07:40.100 --> 00:07:45.000
Let's have a look at how we can actually use loops to calculate stuff for us.

