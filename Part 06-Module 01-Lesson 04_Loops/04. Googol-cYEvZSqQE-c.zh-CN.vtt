WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.238
所以正确答案是 while(len &lt; 101)

00:00:05.238 --> 00:00:08.625
思路就是

00:00:08.625 --> 00:00:13.320
只要 len 仍不等于正确长度 就一直重复这个循环

00:00:13.320 --> 00:00:18.060
也就是说 只要 len 还小于 101 我们就会再加一个 0

00:00:18.059 --> 00:00:21.134
如果我们在这里加个等号

00:00:21.135 --> 00:00:25.665
使条件变为 while(len &lt;= 101)

00:00:25.664 --> 00:00:27.309
那么最终就会多出一个 0

00:00:27.309 --> 00:00:32.820
因为这会导致函数再次进入循环 多加一个 0

00:00:32.820 --> 00:00:34.500
如果你还不信

00:00:34.500 --> 00:00:36.960
我们来试试跟踪这个循环的最后几步

00:00:36.960 --> 00:00:40.804
看看这背后究竟发生了什么

00:00:40.804 --> 00:00:45.755
现在我们的字符串 googol 已经有了 97 个 0

00:00:45.755 --> 00:00:48.940
变量 len 已经更新为 98

00:00:48.939 --> 00:00:51.875
因为在 97 个 0 前面还有个 1

00:00:51.875 --> 00:00:54.024
所以有 98 个字符

00:00:54.024 --> 00:00:56.964
但 98 还是小于 101

00:00:56.965 --> 00:01:00.720
所以 while 条件仍为真

00:01:00.719 --> 00:01:03.329
所以我们再进入循环 再加一个 0

00:01:03.329 --> 00:01:05.447
现在有 98 个 0 了

00:01:05.447 --> 00:01:07.012
长度 len 变为 99

00:01:07.012 --> 00:01:11.540
99 还是小于 101 所以条件仍为真

00:01:11.540 --> 00:01:15.756
因为条件为真 所以我们再次进入循环 再加一个 0

00:01:15.756 --> 00:01:18.700
所以现在是 1 后面跟着 99 个 0

00:01:18.700 --> 00:01:21.310
长度为 100

00:01:21.310 --> 00:01:24.753
结束循环 回来进行比较

00:01:24.753 --> 00:01:27.594
100 小于 101 所以条件为真

00:01:27.594 --> 00:01:29.641
因为为真

00:01:29.641 --> 00:01:31.759
我们进入循环 再加一个 0

00:01:31.760 --> 00:01:36.540
于是我们的 googol 字符串终于有 100 个 0 在 1 后面了

00:01:36.540 --> 00:01:39.175
接下来 我们更新变量 len

00:01:39.174 --> 00:01:40.414
使其变为 101

00:01:40.415 --> 00:01:43.960
到达循环尾部

00:01:43.959 --> 00:01:47.594
再回来 因为现在长度为 101

00:01:47.594 --> 00:01:50.325
不再小于 101

00:01:50.325 --> 00:01:53.195
也就是说现在条件为假

00:01:53.194 --> 00:02:00.000
所以跳出循环 而我们的字符串现在就有整整 100 个 0 跟在 1 的后面了

