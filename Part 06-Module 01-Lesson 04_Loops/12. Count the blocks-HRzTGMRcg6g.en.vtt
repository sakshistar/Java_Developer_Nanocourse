WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.629
Did you know that the Giza pyramid Khufu is made up of two million blocks?

00:00:05.629 --> 00:00:10.664
Well, imagine we want to build our own small pyramid here that looks something like this.

00:00:10.664 --> 00:00:14.584
The lowest layer is made up of nine blocks, three times three.

00:00:14.585 --> 00:00:19.260
And then the second layer is made up of a two by two grid block,

00:00:19.260 --> 00:00:21.815
and then the last layer is just this one block.

00:00:21.815 --> 00:00:24.315
This pyramid is made up of 14 blocks.

00:00:24.315 --> 00:00:26.905
One plus four plus nine.

00:00:26.905 --> 00:00:29.130
Now think, what if we wanted to add another layer

00:00:29.129 --> 00:00:31.890
underneath that's made up of five by five blocks?

00:00:31.890 --> 00:00:35.160
How many total number of blocks would we need to build that pyramid?

00:00:35.159 --> 00:00:38.779
What if we wanted our pyramid to be 100 levels high?

00:00:38.780 --> 00:00:41.945
Well, the number of blocks grows really quickly.

00:00:41.945 --> 00:00:45.134
So, instead of having to count the number of blocks manually,

00:00:45.134 --> 00:00:46.979
why don't you write a Java function that would

00:00:46.979 --> 00:00:49.799
calculate the total number of blocks for you?

00:00:49.799 --> 00:00:51.404
It can take an input argument,

00:00:51.405 --> 00:00:53.560
that is the number of levels that we want,

00:00:53.560 --> 00:00:57.039
and it will return the number of blocks required to build the pyramid.

00:00:57.039 --> 00:00:59.310
For example, in this case here,

00:00:59.310 --> 00:01:01.020
if it takes the input three,

00:01:01.020 --> 00:01:04.185
then it will return 14 because we need three times three,

00:01:04.185 --> 00:01:05.445
plus two times two,

00:01:05.444 --> 00:01:07.907
plus one, which is 14.

00:01:07.908 --> 00:01:11.070
So, instead of having to count the blocks manually,

00:01:11.069 --> 00:01:13.079
why don't you write a Java function that would

00:01:13.079 --> 00:01:16.109
calculate the total number of blocks for you?

00:01:16.109 --> 00:01:19.765
It would take an input, which is equal to the number of levels in that pyramid,

00:01:19.765 --> 00:01:23.719
and it would output the number of blocks needed to build such pyramid.

00:01:23.719 --> 00:01:25.319
In this case for example,

00:01:25.319 --> 00:01:27.219
the input would be equal to three,

00:01:27.219 --> 00:01:30.689
and it would calculate the number of blocks to be 14.

00:01:30.689 --> 00:01:33.209
The way it works is it adds the number of blocks for

00:01:33.209 --> 00:01:36.779
each level starting with the first one, one times one,

00:01:36.780 --> 00:01:38.310
plus the second layer,

00:01:38.310 --> 00:01:40.469
which is formed of two times two blocks,

00:01:40.469 --> 00:01:43.920
plus the third layer, which is made up of three times three blocks.

00:01:43.920 --> 00:01:47.159
Adding those numbers together gives us the value of 14,

00:01:47.159 --> 00:01:49.295
which is the output of this function.

00:01:49.295 --> 00:01:53.117
Try to implement this function so that it works with any input we give it,

00:01:53.117 --> 00:01:56.000
and it would calculate the number of blocks for such pyramid.

