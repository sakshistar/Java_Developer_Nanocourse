WEBVTT
Kind: captions
Language: en

00:00:40.109 --> 00:00:42.854
Just under one minute.

00:00:42.854 --> 00:00:45.489
But that's far from impressive compared to how long it

00:00:45.490 --> 00:00:48.395
takes for any of the world champions to solve it.

00:00:48.395 --> 00:00:52.295
Speedcubers can actually solve the Rubik's Cube in under 10 seconds.

00:00:52.295 --> 00:00:54.685
It requires a lot of practice and memorization,

00:00:54.685 --> 00:00:56.859
and really fast fingers.

00:00:56.859 --> 00:01:00.729
This is an example of some of the fastest times officially recorded.

00:01:00.729 --> 00:01:03.804
Can you find the fastest person on the table?

00:01:03.804 --> 00:01:06.810
Lucas Etter, a 14-year-old from Kentucky,

00:01:06.810 --> 00:01:11.365
U.S. And he has the world's largest record in 2015,

00:01:11.364 --> 00:01:13.566
for the fastest time to solve a Rubik's cube,

00:01:13.566 --> 00:01:17.314
breaking the five second barrier for the first time ever.

00:01:17.314 --> 00:01:19.575
But, let's go back to the leaderboard here.

00:01:19.575 --> 00:01:23.200
I'd like you to think about how you found the fastest player.

00:01:23.200 --> 00:01:26.650
I know that sounds very intuitive for us humans but what if we wanted to write

00:01:26.650 --> 00:01:31.234
a function that finds that smallest number in an array like this.

00:01:31.233 --> 00:01:35.599
So, let's have a look at how our brains actually work when we're searching

00:01:35.599 --> 00:01:40.849
for the smallest number in a list of numbers like the leaderboard for example.

00:01:40.849 --> 00:01:44.329
Here, I have this array of doubles called speed,

00:01:44.329 --> 00:01:46.454
that has these numbers in it.

00:01:46.454 --> 00:01:49.144
Indexed from zero all the way to six.

00:01:49.144 --> 00:01:51.864
To find the smallest number here,

00:01:51.864 --> 00:01:55.039
I just have to go through them one by one and

00:01:55.040 --> 00:01:59.070
just only remember the smallest number I've seen so far.

00:01:59.069 --> 00:02:05.244
I'll store the smallest number I've seen so far in this variable called min for minimum.

00:02:05.245 --> 00:02:07.365
Let's start from the very beginning.

00:02:07.364 --> 00:02:10.180
The very first value is 7.85.

00:02:10.180 --> 00:02:12.090
And that's the smallest we've seen so far.

00:02:12.090 --> 00:02:14.515
So that goes into our minimum variable.

00:02:14.514 --> 00:02:16.614
And then, we move on.

00:02:16.615 --> 00:02:20.675
And the second value is 7.32.

00:02:20.675 --> 00:02:24.313
So I ask this question, is speed of one,

00:02:24.312 --> 00:02:29.274
is this cell here smaller than our minimum?

00:02:29.275 --> 00:02:35.645
Yes it is. So, I update the minimum to get the new value in it,

00:02:35.645 --> 00:02:40.245
7.32. And then, I move on.

00:02:40.245 --> 00:02:43.384
And then, I ask myself this question again,

00:02:43.384 --> 00:02:46.715
is speed of two less than the minimum?

00:02:46.715 --> 00:02:49.610
Speed of two here is 4.9,

00:02:49.610 --> 00:02:51.685
and then, the minimum is 7.32.

00:02:51.685 --> 00:02:56.641
Yes it is. So I update the minimum with that new value here.

00:02:56.641 --> 00:03:01.659
4.9. Moving on. And then,

00:03:01.659 --> 00:03:03.159
I ask the question again,

00:03:03.159 --> 00:03:05.460
is speed of three less than minimum?

00:03:05.460 --> 00:03:09.805
Speed of three is 6.22, and minimum is 4.9.

00:03:09.805 --> 00:03:12.800
So obviously it's not less than it anymore.

00:03:12.800 --> 00:03:15.621
So I don't update minimum.

00:03:15.621 --> 00:03:17.320
I move on. And then,

00:03:17.319 --> 00:03:19.930
I get to 5.4.

00:03:19.930 --> 00:03:22.125
5.4 is not less than 4.9.

00:03:22.125 --> 00:03:24.534
So I continue to move on.

00:03:24.534 --> 00:03:29.094
And then, 7.3 is not smaller than 4.9.

00:03:29.094 --> 00:03:30.990
So I continue moving on.

00:03:30.990 --> 00:03:35.150
5.19 is also not smaller than the minimum.

00:03:35.150 --> 00:03:41.730
So I end up going through the entire array and the minimum value that I found was 4.9.

00:03:41.729 --> 00:03:45.119
What we've just done here is called an algorithm.

00:03:45.120 --> 00:03:48.140
It's basically following a systematic number of steps,

00:03:48.139 --> 00:03:51.034
until we find the correct solution we want.

00:03:51.034 --> 00:03:54.289
Thinking that way helps us writing code.

00:03:54.289 --> 00:03:56.965
So let's see how we can implement this in Java.

00:03:56.965 --> 00:03:59.810
Assume we want to write it in a function like so.

00:03:59.810 --> 00:04:01.400
A function called search,

00:04:01.400 --> 00:04:03.020
that accepts a parameter,

00:04:03.020 --> 00:04:07.480
an array of doubles called speed and returns a single double,

00:04:07.479 --> 00:04:11.324
that is the fastest or the smallest value in this array.

00:04:11.324 --> 00:04:13.234
So the parameters is this speed array,

00:04:13.235 --> 00:04:15.475
which is an array of doubles.

00:04:15.474 --> 00:04:19.550
And, it returns a double which is the fastest speed found.

00:04:19.550 --> 00:04:23.555
I'll just leave this here as an example for us to trace later.

00:04:23.555 --> 00:04:27.110
The first thing we need to do is get the length of

00:04:27.110 --> 00:04:31.009
our array and store it into a variable called size.

00:04:31.009 --> 00:04:34.509
Any array.length calculates how many cells

00:04:34.509 --> 00:04:38.235
is in that array and returns an integer number of that value.

00:04:38.235 --> 00:04:44.895
In this case, our size is actually seven because we have seven cells in our array.

00:04:44.894 --> 00:04:47.569
The next step is to create this variable called min,

00:04:47.569 --> 00:04:50.074
which remember is the smallest number as we go.

00:04:50.074 --> 00:04:53.644
And we're going to initialize it to the very first item in our array,

00:04:53.644 --> 00:04:55.529
which is speed of zero.

00:04:55.529 --> 00:04:57.679
So, after this instruction,

00:04:57.680 --> 00:05:01.910
the variable min would have 7.85 in it.

00:05:01.910 --> 00:05:05.180
If there was another array passed in as a parameter then

00:05:05.180 --> 00:05:08.975
it would just grab whatever value is in the very first item.

00:05:08.975 --> 00:05:14.000
Then, we actually need to use a loop so that we can iterate over this array.

00:05:14.000 --> 00:05:20.004
Our loop counter is initialized to one and our condition is i less than size.

00:05:20.004 --> 00:05:22.564
That means that our counter would count up from one

00:05:22.564 --> 00:05:26.045
all the way until just before it reaches size.

00:05:26.045 --> 00:05:28.250
And the increment is just i++,

00:05:28.250 --> 00:05:31.355
which means we're adding just one every time.

00:05:31.355 --> 00:05:33.500
The reason we start from one is because we have

00:05:33.500 --> 00:05:36.420
already assigned minimum to the very first item.

00:05:36.420 --> 00:05:41.600
So we need to start comparing from the item with index one all the way till the end,

00:05:41.600 --> 00:05:44.695
which is size. So what do we do?

00:05:44.694 --> 00:05:47.514
Inside the loop we ask ourselves the question.

00:05:47.514 --> 00:05:54.314
Is this value at that particular time in the loop smaller than our minimum value?

00:05:54.314 --> 00:05:56.500
We'll do that with an if condition.

00:05:56.500 --> 00:06:02.175
That'll say if (speed [i] &lt; min).

00:06:02.175 --> 00:06:09.030
Speed of i is pointing to a particular cell in the array depending on the value of i.

00:06:09.029 --> 00:06:11.914
So it starts by pointing at this particular cell

00:06:11.915 --> 00:06:15.765
and then it moves on to this one and so on.

00:06:15.764 --> 00:06:18.360
And each time we're comparing it to minimum.

00:06:18.360 --> 00:06:20.370
If it is smaller than minimum,

00:06:20.370 --> 00:06:24.375
then we update minimum to get that value inside speed of i.

00:06:24.375 --> 00:06:26.279
Once our loop is complete,

00:06:26.279 --> 00:06:29.549
which means that we've visited every single cell in the array,

00:06:29.550 --> 00:06:31.590
we can just return minimum.

00:06:31.589 --> 00:06:34.019
Because at this point of time we're certain

00:06:34.019 --> 00:06:37.000
that minimum would have the smallest value in the array.

