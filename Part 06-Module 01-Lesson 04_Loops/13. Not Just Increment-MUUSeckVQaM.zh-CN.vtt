WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.495
到目前为止 我们学习了怎么用 for 循环从 1 一直计数到较大的数字

00:00:05.495 --> 00:00:08.970
但我们还可以用 for 循环来做些别的

00:00:08.970 --> 00:00:12.780
比如 我们不一定要从 1 开始

00:00:12.779 --> 00:00:17.375
假设你想写一个函数 从 15 一直累加到 20

00:00:17.376 --> 00:00:22.400
即 15 加 16 再一直加到 20 然后返回总和

00:00:22.399 --> 00:00:23.639
函数要这么写

00:00:23.640 --> 00:00:27.780
public int addNumbers 该函数没有输入参数

00:00:27.780 --> 00:00:30.770
但会返回一个整数 也就是总和

00:00:30.769 --> 00:00:33.158
首先我们把变量 sum 初始化为 0

00:00:33.158 --> 00:00:36.240
然后开始循环

00:00:36.240 --> 00:00:38.115
这里我们可以给循环

00:00:38.115 --> 00:00:43.210
一个变量 i 也就是我们的循环计数器 一开始将其设为 15

00:00:43.210 --> 00:00:50.054
然后条件可以是 i &lt;= 20 增量就是 i ++

00:00:50.054 --> 00:00:53.207
在循环里面 通常我们会把 i

00:00:53.207 --> 00:00:56.310
和 sum 相加 然后将 sum 更新为相加后的新值

00:00:56.310 --> 00:00:57.945
等到循环结束

00:00:57.945 --> 00:01:00.719
我们就能得到总和

00:01:00.719 --> 00:01:05.670
也就是 15 加 16 一直加到 20 的结果 然后作为函数结果返回出来

00:01:05.670 --> 00:01:09.754
我们来跟踪这个循环 看看具体会发生什么

00:01:09.754 --> 00:01:12.449
先将 sum 初始化为 0

00:01:12.450 --> 00:01:18.185
所以这个值为 0 然后进入循环 把 i 初始化为 15

00:01:18.185 --> 00:01:21.658
因为 i 小于或等于 20 条件为真

00:01:21.658 --> 00:01:25.079
所以进入循环 执行这个语句

00:01:25.079 --> 00:01:27.477
也就是 sum = sum + i

00:01:27.477 --> 00:01:30.530
sum 为 0 所以 sum 加 i 为 15

00:01:30.531 --> 00:01:34.945
所以 sum 更新为本计算的结果 也即 15

00:01:34.944 --> 00:01:36.609
到达循环尾部

00:01:36.609 --> 00:01:39.954
我们回到这上面来 给计数器增量

00:01:39.954 --> 00:01:44.745
使其为 16 然后进行这里的判断

00:01:44.745 --> 00:01:46.660
i 是否小于或等于 20 呢？

00:01:46.659 --> 00:01:48.825
是的 所以我们再进入循环

00:01:48.825 --> 00:01:52.194
再次把 i 和 sum 相加 更新 sum 的值

00:01:52.194 --> 00:01:55.784
把 i 和 sum 相加 也就是 15 加 16

00:01:55.784 --> 00:02:00.119
变量 sum 更新为相加的结果 31 以此类推

00:02:00.120 --> 00:02:02.745
所以再次给 i 增量 使其为 17

00:02:02.745 --> 00:02:04.990
进行比较 仍为真

00:02:04.989 --> 00:02:09.840
进入循环 更新 sum 给 i 增量

00:02:09.840 --> 00:02:14.960
进行比较 更新 sum 给 i 增量

00:02:14.960 --> 00:02:19.455
比较 求和 给 i 增量 比较

00:02:19.455 --> 00:02:23.200
到这里 sum 等于 105

00:02:23.199 --> 00:02:25.537
我们到了循环尾部 回来

00:02:25.538 --> 00:02:32.068
将 i 增量为 21 进行这里的比较 也就是 i 是否小于或等于 20

00:02:32.068 --> 00:02:34.950
现在 i 为 21 于是比较结果为假

00:02:34.949 --> 00:02:37.629
也就意味着我们不会再进入循环

00:02:37.629 --> 00:02:40.280
我们到了这里 要返回 sum

00:02:40.280 --> 00:02:43.590
所以函数结束 返回出了 sum 的值 也就是 105

00:02:43.590 --> 00:02:46.305
这个计算结果是对的

00:02:46.305 --> 00:02:49.655
这里的思路就是 因为我们一开始不是将 i 设为 1

00:02:49.655 --> 00:02:54.000
而是 15 而循环条件会一直判断到 20

00:02:54.000 --> 00:02:59.719
所以你可以看到 i 是从 15 一直往上变化的 直到跳出了循环

00:02:59.719 --> 00:03:03.969
用 for 循环还可以做另一件事 那就是递减计算 而非递增

00:03:03.969 --> 00:03:07.780
比如 这个循环是从 1 递增算到 3 的

00:03:07.780 --> 00:03:11.164
如果我们执行这个循环 就会得到这个输出结果 1、2、3

00:03:11.164 --> 00:03:15.364
这都是这个 i ++ 造成的 因为它是循环增量

00:03:15.365 --> 00:03:19.460
每次它都会给 i 加 1

00:03:19.460 --> 00:03:21.280
于是 i 就会从 1 变为 2 再变为 3

00:03:21.280 --> 00:03:24.175
然而 如果我们想让输出结果从 3 递减为 1

00:03:24.175 --> 00:03:26.210
也就是从 3 一直倒数到 1

00:03:26.210 --> 00:03:29.730
我们可以用这个符号 i --

00:03:29.729 --> 00:03:34.364
就像 i ++ 是给 i 加 1 然后更新 i

00:03:34.365 --> 00:03:39.730
i -- 是给 i 减 1 然后更新 i

00:03:39.729 --> 00:03:42.199
这叫做减量

00:03:42.199 --> 00:03:45.464
因为 i 每次都会减少

00:03:45.465 --> 00:03:49.500
这与写 i = i -1 完全相同

00:03:49.500 --> 00:03:51.925
不过是把公式简写了而已

00:03:51.925 --> 00:03:55.939
不过我们用 i -- 的话 计数器就会倒数

00:03:55.939 --> 00:04:00.849
所以这次我们希望循环能从一个大点的数字开始计数 也就是 3

00:04:00.849 --> 00:04:04.264
因此 i 会从 3 开始倒数

00:04:04.264 --> 00:04:07.844
不过循环条件也得改一下

00:04:07.844 --> 00:04:11.030
你能想出这个循环条件该改成什么样吗？

