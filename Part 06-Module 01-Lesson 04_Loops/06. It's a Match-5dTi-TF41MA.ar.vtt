WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:03.470
المشكلة التي نحاول حلها هنا
هي عدّ المرات

00:00:03.570 --> 00:00:06.373
التي علينا فيها إلقاء خمسة أحجار نرد
للحصول على "ياتسي".

00:00:06.473 --> 00:00:09.576
قد يبدو التعامل مع خمسة أحجار نرد
معقداً بعض الشيء،

00:00:09.676 --> 00:00:12.279
لذا يُفضل البدء بشيء بسيط.

00:00:12.379 --> 00:00:15.215
لنفترض أننا نرمي
حجريّ نرد فقط للوقت الحالي.

00:00:15.315 --> 00:00:18.185
والهدف هو عدّ وإرجاع

00:00:18.285 --> 00:00:21.722
عدد الرميات اللازم
للحصول على رمية يتطابق فيها النردان.

00:00:21.822 --> 00:00:23.624
ما إن نتوصل إلى التعليمات البرمجية
المناسبة لاحتساب ذلك،

00:00:23.724 --> 00:00:28.862
يمكننا تعديلها وإضافة المزيد
من أحجار النرد لحل المشكلة الأصلية.

00:00:28.962 --> 00:00:32.099
عند كتابة تعليمات برمجية
لمعالجة مشكلة معقدة،

00:00:32.199 --> 00:00:34.968
فإنه من المفيد دائماً تيسيطه بهذه الطريقة.

00:00:35.068 --> 00:00:37.838
فكّروا في نسخة مجرّدة
أو مبسّطة من تلك المشكلة،

00:00:37.938 --> 00:00:39.573
ثم اكتبوا الكود اللازم لحل تلك النسخة،

00:00:39.673 --> 00:00:43.110
ثم طوّروا ذلك الكود
إلى أن تحلوا المشكلة الأصلية.

00:00:43.210 --> 00:00:46.246
لإيجاد عدد الرميات اللازمة
لتطابق حجريّ نرد،

00:00:46.346 --> 00:00:49.616
سنقوم بتعريف دالة اسمها keepRolling.

00:00:49.716 --> 00:00:51.485
هذه الدالة لا تستقبل أية وسيطات إدخال،

00:00:51.585 --> 00:00:55.923
وتُرجع عدداً صحيحاً
ألا وهو عدد الرميات اللازمة.

00:00:56.023 --> 00:00:57.858
لمحاكاة رمي أحجار النرد،

00:00:57.958 --> 00:01:02.162
سنستخدم الدالة rollDice
التي أنشأناها في الدرس السابق.

00:01:02.262 --> 00:01:04.932
تُرجع الدالة rollDice
عدداً عشوائياً يتراوح ما بين 1 و6

00:01:05.032 --> 00:01:07.568
وهذا يحاكي عملية إلقاء حجر نرد.

00:01:07.668 --> 00:01:09.503
نحن هنا نستدعي الدالة مرتين،

00:01:09.603 --> 00:01:13.006
ونُسند القيمة المُرجعة إلى المتغيّرين
dice1 و dice2.

00:01:13.106 --> 00:01:15.576
ثم سأعرّف متغيراً آخر
من نوع العدد الصحيح هنا

00:01:15.676 --> 00:01:17.611
سيتتبع عدد الرميات.

00:01:17.711 --> 00:01:22.082
سأهيئه بإسناد الرقم 1 له لأننا رمينا
هذين النردين مرة واحدة حتى الآن.

00:01:22.182 --> 00:01:26.186
بعد ذلك، علينا متابعة رمي حجريّ النرد
في كل مرة لا يتطابقان فيها.

00:01:26.286 --> 00:01:29.623
يمكننا استخدام حلقة "while"
تتأكد مما إذا كان حجري النرد غير متطابقين،

00:01:29.723 --> 00:01:31.825
ثم إعادة رمي حجريّ النرد داخل كتلة "while".

00:01:31.925 --> 00:01:37.030
أي أنه طالما أن dice1 وdice2 غير متساويين،

00:01:37.130 --> 00:01:41.201
علينا إعادة محاولة
وعقد الأمل على حصول تطابق.

00:01:41.301 --> 00:01:42.669
أي أنه داخل حلقة "while"،

00:01:42.769 --> 00:01:46.807
سنستدعي دالة rollDice مرة أخرى
لكل من dice1 وdice2،

00:01:46.907 --> 00:01:50.711
ونضيف 1 إلى العدّاد
لنحتسب هذه الرمية الإضافية التي قمنا بها.

00:01:50.811 --> 00:01:53.113
تذكروا أننا نضيف 1 فقط هنا

00:01:53.213 --> 00:01:57.618
لأن هذين الاستدعاءين
يحاكيان رمي حجريّ النرد مرة واحدة فقط.

00:01:57.718 --> 00:01:59.019
وفي مرحلة ما في نهاية المطاف،

00:01:59.119 --> 00:02:01.788
ستُرجع هتين الرميتين القيمة ذاتها،

00:02:01.889 --> 00:02:04.124
وسيتطابق حجر النرد الأول
مع حجر النرد الثاني،

00:02:04.224 --> 00:02:05.859
وستنتهي حلقة "while" هذه.

00:02:05.959 --> 00:02:10.197
في تلك المرحلة، يمكننا إرجاع
قيمة العدّاد التي احتسبناها حتى الآن،

00:02:10.297 --> 00:02:14.034
والتي ستشير إلى عدد الرميات
التي احتجنا إليها للحصول على ذلك التطابق.

00:02:14.134 --> 00:02:15.302
يبدو هذا جيداً جداً.

00:02:15.402 --> 00:02:19.173
دعنا نتتبع هذا الكود باستخدام بعض الأمثلة
لنرى إن كان فعّالاً.

00:02:19.273 --> 00:02:22.910
إذن، أول ما يحدث هنا
هو استدعاء دالة "rollDice"

00:02:23.010 --> 00:02:25.646
وتخزين القيمة التي أرجعتها
في المتغير "dice1".

00:02:25.746 --> 00:02:28.582
لنفترض أنها أرجعت الرقم 4 عشوائياً.

00:02:28.682 --> 00:02:31.919
السطر التالي يستدعي "rollDice"
مرة أخرى ويخزن القيمة في "dice2".

00:02:32.019 --> 00:02:34.087
ولنفترض أن الدالة أرجعت الرقم 2.

00:02:34.188 --> 00:02:35.822
أي أن المتغير "dice1" يحمل الرقم 4،

00:02:35.923 --> 00:02:37.925
والمتغير "dice2" يحمل الرقم 2.

00:02:38.025 --> 00:02:40.794
ثم نهيّئ متغيّر العد بإسناد الرقم 1 إليه،

00:02:40.894 --> 00:02:43.230
ومن ثم ننتقل إلى شرط "while".

00:02:43.330 --> 00:02:46.433
إنه يتحقق مما إذا كانت قيمتا المتغيران
dice1 وdice2 غير متساويين.

00:02:46.533 --> 00:02:48.836
وفي هذه الحالة،
العددان 4 و2 غير متساويين،

00:02:48.936 --> 00:02:52.773
لذا تكون نتيجة تقييم شرط الحلقة هي "true"
وعليه فإننا ننتقل إلى داخل كتلة الحلقة،

00:02:52.873 --> 00:02:54.541
حيث نعيد رمي حجريّ النرد،

00:02:54.641 --> 00:02:56.410
ونستدعي الدالة "rollDice" مرتين أخريين،

00:02:56.510 --> 00:02:58.879
ونحدّث قيمتيّ المتغيّرين 1 و2.

00:02:58.979 --> 00:03:01.515
لنفترض أن قيمة dice1 أصبحت 6،

00:03:01.615 --> 00:03:03.684
وقيمة dice2 أصبحت 5،

00:03:03.784 --> 00:03:06.820
وبعد ذلك نضيف 1 إلى متغيّر العدّاد count،

00:03:06.920 --> 00:03:09.690
بحيث تصبح قيمته 2 بدلًا من 1.

00:03:09.790 --> 00:03:12.860
نصل إلى القوس المتعرج
الذي يختتم حلقة "while"،

00:03:12.960 --> 00:03:16.496
لذا نعود إلى الأعلى
وننفذ هذه المقارنة من جديد.

00:03:16.597 --> 00:03:18.699
Dice1 وDice2 ليسا متساويان؟

00:03:18.799 --> 00:03:21.802
حسناً، 6 لا تساوي 5، إذن فهذا صحيح.

00:03:21.902 --> 00:03:23.704
وعليه ننزل إلى مستوى الحلقة مرة أخرى،

00:03:23.804 --> 00:03:27.508
ونقوم بتحديث dice1 و dice2
باستخدام دالة "rollDice" مجدداً.

00:03:27.608 --> 00:03:30.777
لنفترض أننا حصلنا
هذه المرة على 2 و3.

00:03:30.878 --> 00:03:32.779
نضيف 1 لمتغيّر العداد count مرة أخرى،

00:03:32.880 --> 00:03:34.515
فتصبح قيمته 3.

00:03:34.615 --> 00:03:38.252
ثم نعود للأعلى وننفذ شرط الحلقة.

00:03:38.352 --> 00:03:41.188
نتحقق مما إذا كانت قيمة المتغير dice1
تساوي قيمة المتغير dice2،

00:03:41.288 --> 00:03:42.623
و2 لا تساوي 3،

00:03:42.723 --> 00:03:46.159
وعليه فإن الشرط متحقق،
لذا سندخل الحلقة من جديد.

00:03:46.260 --> 00:03:48.695
ثم نحدّث dice1 و dice2 مرة أخرى.

00:03:48.795 --> 00:03:51.565
لنفترض أننا حصلنا
هذه المرة على 1 و1،

00:03:51.665 --> 00:03:54.301
ثم نضيف 1 إلى العدّاد count لتصبح قيمته 4،

00:03:54.401 --> 00:03:57.404
ما يعني أننا رمينا حجريّ
النرد أربعة مرات حتى الآن.

00:03:57.504 --> 00:04:01.041
ثم نعود إلى الأعلى
لإجراء مقارنة شرط الحلقة.

00:04:01.141 --> 00:04:03.777
هذه المرة، dice1 وdice2 متساويان.

00:04:03.877 --> 00:04:06.847
لذا تصبح نتيجة تقييم
هذه المقارنة هي "false"،

00:04:06.947 --> 00:04:10.350
ما يعني أن حلقة "while"
لن تنزل إلى المستوى الأدنى بعد الآن،

00:04:10.450 --> 00:04:15.389
وسننتقل مباشرة إلى قوس إغلاق الحلقة هنا
ونتابع تنفيذ بقية البرنامج.

00:04:15.489 --> 00:04:18.926
ولأنه لا يوجد شيء بعد الحلقة
سوى عبارة "return count"،

00:04:19.026 --> 00:04:21.128
فهذا يعني أننا سنُرجع العدد 4.

00:04:21.228 --> 00:04:26.600
وهذا يعني أننا احتجنا إلى رمي حجري النرد
4 مرات لنحصل على التطابق.

00:04:26.700 --> 00:04:29.102
والآن هل يمكنك التفكير
فيما علينا تغييره في هذا الكود

00:04:29.203 --> 00:04:33.073
لجعله قادر على التعامل
مع ثلاثة أحجار نرد بدلًا من اثنين؟

