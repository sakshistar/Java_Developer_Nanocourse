WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.669
We've seen earlier, how to calculate the average of

00:00:02.669 --> 00:00:06.150
an array of doubles to get the average temperature for example.

00:00:06.150 --> 00:00:08.429
Now say we want to write some Java code that would

00:00:08.429 --> 00:00:12.460
perform basic grade analysis for a grade table like this.

00:00:12.460 --> 00:00:14.910
We're given the grades for four different subjects,

00:00:14.910 --> 00:00:16.664
for five different students,

00:00:16.664 --> 00:00:18.419
which ended up with a table that's

00:00:18.420 --> 00:00:22.810
four by five items in it and that's equal to 20 in grades.

00:00:22.809 --> 00:00:25.229
We might think, okay we can store all of

00:00:25.230 --> 00:00:28.359
those in an array of integers that's 20 integers long.

00:00:28.359 --> 00:00:31.844
But this won't help with a lot of the analysis that we want to do.

00:00:31.844 --> 00:00:34.875
Like if we wanted to get the average grade for each student,

00:00:34.875 --> 00:00:39.409
we'd have to perform this average calculation per student individually.

00:00:39.409 --> 00:00:43.334
But if all of these integers were stored in this one array,

00:00:43.335 --> 00:00:46.620
it becomes really tricky to match every number in the array

00:00:46.619 --> 00:00:50.544
to a specific student in a specific subject.

00:00:50.545 --> 00:00:54.539
One solution is to store the grades in multiple arrays.

00:00:54.539 --> 00:00:59.804
We could have an array for every student storing the grades for all the four subjects.

00:00:59.804 --> 00:01:02.340
And then we could use loops for example,

00:01:02.340 --> 00:01:04.590
to calculate the average per student.

00:01:04.590 --> 00:01:07.439
But say we wanted to calculate the average per

00:01:07.439 --> 00:01:11.245
subject to see how students are performing in Biology for example.

00:01:11.245 --> 00:01:14.870
We'd need to access one individual item in

00:01:14.870 --> 00:01:19.100
all of these arrays and loops won't be able to help us for that.

00:01:19.099 --> 00:01:21.949
Instead, we could possibly create an array for

00:01:21.950 --> 00:01:25.280
every subject rather than every student and that way we could easily

00:01:25.280 --> 00:01:28.144
calculate the average for every subject individually

00:01:28.144 --> 00:01:31.854
but we can't loop over the grades for every student anymore.

00:01:31.855 --> 00:01:33.770
That's why when you're trying to deal with data that

00:01:33.769 --> 00:01:36.125
looks something like a table or a grid,

00:01:36.125 --> 00:01:39.545
Java offers something called a two dimensional array.

00:01:39.545 --> 00:01:44.480
You can think of a two dimensional array as an array of arrays.

00:01:44.480 --> 00:01:50.135
Like imagine every single row in this table is an array of integers by itself.

00:01:50.135 --> 00:01:56.015
We can actually bundle all those together into an array of all these arrays, so that,

00:01:56.015 --> 00:01:59.810
each individual array is indexed from zero to three

00:01:59.810 --> 00:02:04.575
and then each item inside these arrays are also indexed.

00:02:04.575 --> 00:02:06.960
To declare a two dimensional array,

00:02:06.959 --> 00:02:09.919
you type in the type of the data that's stored inside,

00:02:09.919 --> 00:02:12.319
followed by two sets of square brackets,

00:02:12.319 --> 00:02:13.754
and then the array name.

00:02:13.754 --> 00:02:19.474
This is because we're actually creating an array of array of integers called grades.

00:02:19.474 --> 00:02:23.305
The beauty of 2D arrays is that you can access any item in this table,

00:02:23.306 --> 00:02:25.310
given the two indices.

00:02:25.310 --> 00:02:29.240
Like, if we wanted to know Tim's grade in biology for example,

00:02:29.240 --> 00:02:32.600
we can type in grades of two and one.

00:02:32.599 --> 00:02:36.799
This two here is referring to the index of the array that we're interested in,

00:02:36.800 --> 00:02:38.647
which is biology in this case,

00:02:38.646 --> 00:02:41.074
and the one here in the second square brackets,

00:02:41.074 --> 00:02:45.074
is referring to the index of the item inside that array.

00:02:45.074 --> 00:02:49.674
Grades of two and one would have 75 stored in it.

00:02:49.675 --> 00:02:53.420
If for example, we wanted to know Sam's grade in English,

00:02:53.419 --> 00:02:56.780
that would be stored in grades of one and three,

00:02:56.780 --> 00:02:59.344
because English has an index of one,

00:02:59.344 --> 00:03:02.080
and Sam has an index of three.

00:03:02.080 --> 00:03:05.690
We always start with the index of the array itself,

00:03:05.689 --> 00:03:08.509
and then the second set of square brackets,

00:03:08.509 --> 00:03:11.629
has the index of the item inside that array.

00:03:11.629 --> 00:03:16.000
What should we use to find out what Sandra's grade was in Arts?

