WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.330
记得不管哪种情况

00:00:03.330 --> 00:00:05.099
while 循环还是 for 循环都好

00:00:05.099 --> 00:00:09.779
我们的循环计数器都只是一个变量 和其它变量没有区别

00:00:09.779 --> 00:00:12.224
我们通常管它叫 i 这只是为了简便

00:00:12.224 --> 00:00:15.344
但我们也可以把它叫成其它名字

00:00:15.345 --> 00:00:17.769
循环增量也是一个道理

00:00:17.769 --> 00:00:22.199
这里其实可以换成任何适用于整数的常规数学运算

00:00:22.199 --> 00:00:24.804
我们来看看几种常见的运算

00:00:24.804 --> 00:00:26.039
最常用的是 i++

00:00:26.039 --> 00:00:29.650
也就是 i = i+1 的简写

00:00:29.650 --> 00:00:33.615
会给 i 加 1

00:00:33.615 --> 00:00:36.820
打个比方 假设 i 等于 10

00:00:36.820 --> 00:00:40.734
i++ 就会使 i 变为 11

00:00:40.734 --> 00:00:42.464
我们也见过 i-- 了

00:00:42.465 --> 00:00:46.242
也就是 i = i-1 的简写

00:00:46.241 --> 00:00:50.474
基本上就是让 i 减去 1 的意思 所以如果 i 为 10

00:00:50.475 --> 00:00:53.010
用了这个就会让 i 变成 9

00:00:53.009 --> 00:00:57.015
我们可以加快一下速度 别只加 1 或减 1

00:00:57.015 --> 00:00:59.759
记住 如果我们要给变量加值

00:00:59.759 --> 00:01:03.731
通常我们会写 i = i+5 或加任何数字

00:01:03.731 --> 00:01:08.314
但也可简写成 i += 那个数

00:01:08.314 --> 00:01:10.700
两种写法意思完全相同

00:01:10.700 --> 00:01:15.875
这里就是给 i 加 5 然后把 i 更新为新值

00:01:15.875 --> 00:01:17.614
假设 i 为 10

00:01:17.614 --> 00:01:21.539
那么更新结果就会是 15

00:01:21.540 --> 00:01:24.765
i 减一个值也是一样的道理

00:01:24.765 --> 00:01:27.890
以 i = i-6 为例

00:01:27.890 --> 00:01:32.097
可以简写成 i -= 6

00:01:32.097 --> 00:01:33.769
这就意味着如果 i 为 10

00:01:33.769 --> 00:01:35.188
那么更新后值就为 4

00:01:35.188 --> 00:01:39.659
乘法和除法也是一个道理

00:01:39.659 --> 00:01:43.590
我们可以让变量乘以一个数字 从而更新变量值 像这样

00:01:43.590 --> 00:01:49.855
i = i*3 这会让 i 乘以 3 并将 i 更新为该乘积

00:01:49.855 --> 00:01:54.984
公式像加减法一样 简写为 i *= 3

00:01:54.983 --> 00:01:59.629
如果 i 等于 10 那么乘以 3 后就会更新为 30

00:01:59.629 --> 00:02:01.729
除法也一样

00:02:01.730 --> 00:02:04.674
我们可以像这样让变量除以一个系数

00:02:04.674 --> 00:02:13.405
i = i/2 会让变量除以 2 并更新变量值为计算结果

00:02:13.405 --> 00:02:17.280
公式简写为 i /= 2

00:02:17.280 --> 00:02:19.770
如果 i 等于 10

00:02:19.770 --> 00:02:23.860
那么它就会除以 2 更新后就是 5

00:02:23.860 --> 00:02:27.985
我们来看些会用到这类简写的例子

00:02:27.985 --> 00:02:32.460
假如你只想输出 2 到 10 之间的偶数

00:02:32.460 --> 00:02:36.115
这就意味着你要创建一个循环 从 2 开始

00:02:36.115 --> 00:02:39.745
一直往上计数到 10 不过每次循环计数器不是加 1

00:02:39.745 --> 00:02:42.185
而是加 2

00:02:42.185 --> 00:02:44.080
这里我们已经写好了函数

00:02:44.080 --> 00:02:47.230
叫 evenNumbers 该函数不接受任何参数 而且不会返回任何结果

00:02:47.229 --> 00:02:53.319
所以写成 public void evenNumbers ( ) { }

00:02:53.319 --> 00:02:57.879
在里面 我们只有这个循环 循环计数器 i 一开始等于 2

00:02:57.879 --> 00:03:02.484
计数器会一直计数 直到 i 不再小于或等于 10

00:03:02.485 --> 00:03:06.175
不过我们的循环增量是 i += 2

00:03:06.175 --> 00:03:12.430
这条指令每次会给 i 加 2

00:03:12.430 --> 00:03:14.340
所以循环每迭代一次 i 就会增加 2

00:03:14.340 --> 00:03:17.140
我们来跟踪这个循环 看看怎么样

00:03:17.139 --> 00:03:20.264
首先将 i 初始化为 2

00:03:20.264 --> 00:03:23.734
因为 i 小于或等于 10 条件为真

00:03:23.735 --> 00:03:25.900
所以进入循环

00:03:25.900 --> 00:03:30.680
执行这条 println 输出语句 将 i 输出 也就是输出 2

00:03:30.680 --> 00:03:33.360
我们到了循环尾部 回到这上面来

00:03:33.360 --> 00:03:35.910
第一件事就是增量

00:03:35.909 --> 00:03:40.280
增量会给循环计数器 i 加 2

00:03:40.280 --> 00:03:43.659
所以 2 就变成 4

00:03:43.659 --> 00:03:46.903
然后比较 i 是否小于或等于 10 条件为真

00:03:46.903 --> 00:03:52.120
所以进入循环 再次输出 i 也就是 4

00:03:52.120 --> 00:03:54.025
再回来

00:03:54.025 --> 00:04:00.573
给计数器加 2 使其为 6 6 仍然小于或等于 10

00:04:00.573 --> 00:04:02.555
所以输出 6

00:04:02.555 --> 00:04:05.194
再回来 加 2

00:04:05.194 --> 00:04:09.264
8 仍然小于或等于 10 所以输出 8

00:04:09.264 --> 00:04:17.319
8 变为 10 而 10 仍然小于或等于 10 所以输出 10

00:04:17.319 --> 00:04:23.409
到了这里 我们回来 给计数器加 2 使之等于 12

00:04:23.410 --> 00:04:27.905
12 不再小于或等于 10 所以条件为假

00:04:27.904 --> 00:04:30.482
也就意味着我们不会再进入循环

00:04:30.483 --> 00:04:32.689
所以不会再输出任何东西

00:04:32.689 --> 00:04:38.959
一旦我们改变了循环增量 从仅仅是 i++ 变成 i += 2 等

00:04:38.959 --> 00:04:44.044
你会发现 i 每次都会加 2 而不是加 1

00:04:44.045 --> 00:04:46.819
再比如你也可以把这个改成 i += 3

00:04:46.819 --> 00:04:49.399
于是每次都会加 3

00:04:49.399 --> 00:04:53.546
记住你还可以用诸如 i *= 2 之类的乘法公式

00:04:53.547 --> 00:04:59.083
那会让 i 每次都乘 2 而不只是加 2

00:04:59.083 --> 00:05:01.010
有了这些运算 你可以做很多事情

