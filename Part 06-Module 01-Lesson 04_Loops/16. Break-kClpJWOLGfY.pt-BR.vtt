WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:01.267
Muitas vezes,

00:00:01.300 --> 00:00:04.767
queremos terminar o laço
antes do que deveria.

00:00:04.801 --> 00:00:06.567
Vamos ver um exemplo.

00:00:06.601 --> 00:00:10.534
Você está escrevendo um programa
para controlar o seu telefone

00:00:10.567 --> 00:00:13.133
para procurar
por redes wi-fi.

00:00:13.167 --> 00:00:17.567
Você quer tentar 10 vezes
e depois desistir.

00:00:17.601 --> 00:00:23.601
Fizemos um laço que começa em 1
e vai até 10, aumentando em 1.

00:00:23.634 --> 00:00:26.467
Isso vai repetir
o que estiver dentro do laço

00:00:26.501 --> 00:00:28.501
exatamente 10 vezes.

00:00:28.534 --> 00:00:32.000
Dentro do laço for,
vamos chamar esta função,

00:00:32.033 --> 00:00:34.100
chamada checkWifi.

00:00:34.133 --> 00:00:37.434
Imagine que esta função
faz a busca pelo wi-fi

00:00:37.467 --> 00:00:40.367
e retorna verdadeiro
se encontrar uma rede.

00:00:40.400 --> 00:00:43.534
Vamos colocar o valor
de retorno desta função

00:00:43.567 --> 00:00:47.501
na variável booleana
que chamamos de wifiAvailable.

00:00:47.534 --> 00:00:52.767
Se ela for verdadeira,
conseguimos encontrar uma rede.

00:00:52.801 --> 00:00:55.767
Se for falsa,
ainda não encontramos nada,

00:00:55.801 --> 00:00:57.467
e continuamos tentando.

00:00:57.501 --> 00:01:01.000
Logo depois, colocamos
esta condição if,

00:01:01.033 --> 00:01:03.501
para checar
se a variável é verdadeira.

00:01:03.534 --> 00:01:08.601
Se for, imprimimos
"Wifi encontrada", e pronto.

00:01:08.634 --> 00:01:15.501
Senão, continuamos procurando
dentro do laço, por 10 vezes.

00:01:15.534 --> 00:01:21.334
Isso vai continuar tentando
10 vezes, até encontrar ou não.

00:01:21.367 --> 00:01:23.000
Isso parece perfeito,

00:01:23.033 --> 00:01:26.000
exceto por um caso estranho.

00:01:26.033 --> 00:01:31.501
Se encontrarmos uma rede
no meio do laço,

00:01:31.534 --> 00:01:34.200
digamos, na quinta tentativa.

00:01:34.234 --> 00:01:40.033
Imagine que, na quinta tentativa,
checkWifi retornou verdadeiro.

00:01:40.067 --> 00:01:45.133
A variável ficou verdadeira,
entramos na condição if,

00:01:45.167 --> 00:01:47.434
e imprimimos
"Wi-fi encontrada".

00:01:47.467 --> 00:01:50.667
Terminamos o if e ainda
estamos dentro do laço,

00:01:50.701 --> 00:01:54.267
então voltamos para cima,
incrementamos i para 6,

00:01:54.300 --> 00:01:58.634
e 6 ainda é menor ou igual a 10,
então voltamos aqui para dentro,

00:01:58.667 --> 00:02:00.467
e chamamos checkWifi
de novo,

00:02:00.501 --> 00:02:03.801
que provavelmente vai
retornar verdadeiro de novo,

00:02:03.834 --> 00:02:06.701
então vai imprimir de novo.

00:02:06.734 --> 00:02:12.734
Vai continuar imprimindo
pelas iterações restantes.

00:02:12.767 --> 00:02:15.734
Isso não é exatamente
o que esperávamos.

00:02:15.767 --> 00:02:20.634
Eu imaginaria que, uma vez
encontrada uma rede,

00:02:20.667 --> 00:02:23.200
queremos terminar a busca.

00:02:23.234 --> 00:02:26.767
Por sorte, o Java tem
uma palavra chamada break.

00:02:26.801 --> 00:02:29.634
Se a colocarmos aqui,

00:02:29.667 --> 00:02:32.901
estamos dizendo que,
ao encontrar a rede,

00:02:32.934 --> 00:02:35.300
e imprimir "Wifi encontrada",

00:02:35.334 --> 00:02:39.167
o break sai deste laço.

00:02:39.200 --> 00:02:44.234
Não vai continuar a rodar,
mesmo se a condição for verdadeira.

00:02:44.267 --> 00:02:48.000
Isso é muito útil em muitas
situações que vamos encontrar.

00:02:48.033 --> 00:02:50.534
Também funciona
com laços while.

00:02:50.567 --> 00:02:52.868
Vamos ver um exemplo.

00:02:52.901 --> 00:02:55.100
Imagine que estamos
jogando um jogo

00:02:55.133 --> 00:02:59.133
cujo objetivo é jogar um dado
até obter um 6.

00:02:59.167 --> 00:03:02.934
Mas se obtiver um 3,
você perde.

00:03:02.968 --> 00:03:08.567
Vamos implementar uma função
que joga um dado até dar 6.

00:03:08.601 --> 00:03:10.367
Se der 6, você ganha.

00:03:10.400 --> 00:03:13.067
Mas se der 3, você perde.

00:03:13.100 --> 00:03:15.200
A função retorna um boolean

00:03:15.234 --> 00:03:18.901
que é verdadeiro se eu ganhar
e falso se eu não ganhar.

00:03:18.934 --> 00:03:20.868
Vamos chamá-la de rollASix.

00:03:20.901 --> 00:03:23.067
Não recebe parâmetros.

00:03:23.100 --> 00:03:28.167
Dentro, vamos só jogar o dado,
com a função rollDice,

00:03:28.200 --> 00:03:31.400
e guardar isso em uma
variável int chamada dice.

00:03:31.434 --> 00:03:35.033
Depois vem o laço, enquanto
dice não for igual a 6,

00:03:35.067 --> 00:03:36.501
continue jogando.

00:03:36.534 --> 00:03:40.100
Perfeito! Este laço
segue jogando o dado

00:03:40.133 --> 00:03:42.267
até encontrar um 6.

00:03:42.300 --> 00:03:46.968
Mas precisamos conferir
se saiu 3 no dado.

00:03:47.000 --> 00:03:52.067
Acrescentamos uma condição,
se dice for igual a 3, break.

00:03:52.100 --> 00:03:55.834
break significa que vamos
sair deste laço while.

00:03:55.868 --> 00:04:00.200
Não vamos continuar tentando,
não vamos mais rodar no laço.

00:04:00.234 --> 00:04:02.300
Acabou, nós perdemos.

00:04:02.334 --> 00:04:06.734
Mas note que,
saindo 6 ou 3,

00:04:06.767 --> 00:04:10.901
nos dois casos vamos chegar
nesta parte aqui.

00:04:10.934 --> 00:04:15.968
Não vamos saber se saiu
6 ou 3 nesta hora.

00:04:16.000 --> 00:04:20.334
Para poder decidir
se ganhamos ou não,

00:04:20.367 --> 00:04:23.634
vamos colocar
outra condição aqui.

00:04:23.667 --> 00:04:27.367
Se dice for igual a 6,
retorna verdadeiro,

00:04:27.400 --> 00:04:29.968
senão, retorna falso.

00:04:30.000 --> 00:04:35.901
Se este laço continuasse tentando
até finalmente conseguir um 6,

00:04:35.934 --> 00:04:40.767
e chegássemos aqui para testar
se o dado realmente é 6,

00:04:40.801 --> 00:04:42.701
retornaríamos verdadeiro.

00:04:42.734 --> 00:04:46.734
Mas se tivesse um 3
no meio das tentativas,

00:04:46.767 --> 00:04:49.634
sairíamos do laço
e terminaríamos aqui,

00:04:49.667 --> 00:04:53.567
fazendo esta condição.
Não é 6, então vai para o else,

00:04:53.601 --> 00:04:55.467
e retorna falso.

00:04:55.501 --> 00:05:00.167
Perfeito! Vemos que break
é muito útil, mesmo com while.

00:05:00.200 --> 00:05:02.100
Vamos ver um exemplo

00:05:02.133 --> 00:05:05.167
onde você vai usar
a palavra break

00:05:05.200 --> 00:05:06.868
para resolver um problema.

