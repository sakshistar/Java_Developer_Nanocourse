WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.000
注意这里的循环计数器

00:00:03.000 --> 00:00:05.964
它不仅控制着循环要迭代的次数

00:00:05.964 --> 00:00:10.390
还能当作变量 放到循环里使用 我们来看具体是怎么样的

00:00:10.390 --> 00:00:13.455
假设你想更改警告信息

00:00:13.455 --> 00:00:16.605
令其具体说明这是第几次警告

00:00:16.605 --> 00:00:17.910
比如像 警告 # 1

00:00:17.910 --> 00:00:21.460
警告 # 2、3、4、5

00:00:21.460 --> 00:00:27.905
要这么做 只需把变量 i 和这里的警告信息串接起来

00:00:27.905 --> 00:00:30.270
其它东西可保持不变

00:00:30.269 --> 00:00:33.019
我们来跟踪这个程序 看看怎么样

00:00:33.020 --> 00:00:36.700
如果我们调用 raiseAlarm 函数 将实参设为 5

00:00:36.700 --> 00:00:39.625
这样一来 numOfWarnings 就等于 5

00:00:39.625 --> 00:00:41.924
我们先将 i 的初始值设为 1

00:00:41.924 --> 00:00:45.674
接着比较 i 与 numOfWarnings

00:00:45.674 --> 00:00:47.009
i 是否小于或等于 5

00:00:47.009 --> 00:00:49.619
条件为真 所以我们进入循环

00:00:49.619 --> 00:00:54.584
首先 我们输出串接着 i 的警告次数

00:00:54.585 --> 00:00:56.755
现在 i 等于 1

00:00:56.755 --> 00:01:00.455
所以输出就会是警告 # 1

00:01:00.454 --> 00:01:01.704
到达循环尾部

00:01:01.704 --> 00:01:03.244
所以接下来我们要先做什么呢？

00:01:03.244 --> 00:01:06.379
将 i 增量 使其为 2

00:01:06.379 --> 00:01:10.795
增量好后 我们继续进行判断

00:01:10.796 --> 00:01:12.673
2 小于或等于 5

00:01:12.673 --> 00:01:15.204
条件为真 进入循环

00:01:15.204 --> 00:01:16.763
现在 i 等于 2 了

00:01:16.763 --> 00:01:19.079
我们将其与警告次数串接起来

00:01:19.079 --> 00:01:21.209
得到了信息 警告 # 2

00:01:21.209 --> 00:01:23.954
进行迭代 也就是给 i 增量

00:01:23.954 --> 00:01:25.563
进行比较

00:01:25.563 --> 00:01:28.619
进入循环 得到警告 # 3

00:01:28.620 --> 00:01:29.730
这是因为 i 为 3

00:01:29.730 --> 00:01:31.814
然后 4 也是一样的

00:01:31.814 --> 00:01:33.194
进行比较

00:01:33.194 --> 00:01:40.289
把信息输出出来 然后是 5 输出 然后 i 变为 6

00:01:40.290 --> 00:01:41.890
进行比较

00:01:41.890 --> 00:01:44.340
6 不再小于或等于 5

00:01:44.340 --> 00:01:48.590
所以我们不进入循环 函数结束

00:01:48.590 --> 00:01:52.760
使用变量 i 我们能做很多很酷的事

00:01:52.760 --> 00:01:56.510
因为随着循环不断增量 i 也会不断变化

00:01:56.510 --> 00:02:01.253
不过你得很小心 别把变量 i 改了

00:02:01.253 --> 00:02:04.370
因为 i 还得控制循环

00:02:04.370 --> 00:02:06.079
举个例子

00:02:06.079 --> 00:02:09.900
这个循环先将 i 初始化为 1 然后不断迭代

00:02:09.900 --> 00:02:15.360
直到 i 不再小于或等于 3 而且每次循环 i 的增量都为 1

00:02:15.360 --> 00:02:20.890
函数会做的第一件事 是将 i 减 1 然后输出 i

00:02:20.889 --> 00:02:23.975
我们来想想这个循环会做什么

00:02:23.975 --> 00:02:27.909
显然循环会从 i 为 1 一直迭代到 i 变为 3 所以参数为 1、2、3时 循环会执行

00:02:27.909 --> 00:02:31.150
接着我们要减 1 后再把 i 输出

00:02:31.150 --> 00:02:35.110
或许我们会以为它会输出 0、1、2

00:02:35.110 --> 00:02:38.440
我们来跟踪这个循环 看看会怎么样

00:02:38.439 --> 00:02:41.770
首先 将 i 初始化为 1 然后进行比较

00:02:41.770 --> 00:02:45.490
i 是否小于或等于 3？ 是的

00:02:45.490 --> 00:02:48.070
于是进入循环 我们要做的第一件事就是改变 i

00:02:48.069 --> 00:02:51.324
使其等于 i 减 1

00:02:51.324 --> 00:02:53.424
也就是说 i 会等于 0

00:02:53.425 --> 00:02:57.160
这是由于我们将 i 减了 1 而 i 为 1

00:02:57.159 --> 00:03:01.324
接着我们把减后的结果更新出来 也就是 0

00:03:01.324 --> 00:03:03.375
然后输出 i

00:03:03.375 --> 00:03:05.270
也就是 0

00:03:05.270 --> 00:03:06.985
于是输出结果变为 0

00:03:06.985 --> 00:03:08.665
循环结束

00:03:08.664 --> 00:03:09.919
回到这上面

00:03:09.919 --> 00:03:12.219
首先要做的就是给 i 增量 使其变为 1

00:03:12.219 --> 00:03:15.949
然后比较 i 是否小于或等于 3

00:03:15.949 --> 00:03:19.714
是的 于是进入循环 再次执行指令

00:03:19.715 --> 00:03:22.849
把 i 减去 1 而 i 为 1 于是 i 等于 0

00:03:22.849 --> 00:03:27.900
执行 println 语句 输出 0

00:03:27.900 --> 00:03:30.629
结束循环 再回来

00:03:30.629 --> 00:03:33.314
再次将 i 增量为 1

00:03:33.314 --> 00:03:36.175
当然 1 还是小于或等于 3

00:03:36.175 --> 00:03:41.225
所以循环会一次又一次地重复

00:03:41.224 --> 00:03:44.544
事实上这叫做无限循环

00:03:44.544 --> 00:03:47.139
因为这个循环永远都不会结束

00:03:47.139 --> 00:03:50.409
会不断重复执行 直到永远

00:03:50.409 --> 00:03:54.180
你得强行停止程序才能跳出循环

00:03:54.180 --> 00:03:58.314
如果你不够小心 很容易就会弄出无限循环

00:03:58.314 --> 00:04:02.379
所以 要在程序循环里用 i 可以

00:04:02.379 --> 00:04:08.620
只是要小心 别把这个变量改成你不能控制的事物

00:04:08.620 --> 00:04:12.745
这次的问题在于我们给 i 赋了一个值

00:04:12.745 --> 00:04:15.849
而 i 仍为循环计数器

00:04:15.849 --> 00:04:19.540
由于每次我们给它增完量 又会将其减量

00:04:19.540 --> 00:04:23.608
于是我会一直在 1 和 0之间迭代 永无止尽

00:04:23.608 --> 00:04:26.134
因为 i 永远不会变为 3

00:04:26.134 --> 00:04:28.629
然而 如果我们这么实现循环

00:04:28.629 --> 00:04:30.909
那就没问题了 我们来看看原因

00:04:30.910 --> 00:04:32.590
我们唯一做出的改变

00:04:32.589 --> 00:04:36.699
就是创建了这个新变量 x 每当我们将 i 减 1

00:04:36.699 --> 00:04:39.829
我们就将它赋值给 x 而不是直接更新变量 i

00:04:39.829 --> 00:04:42.009
我们来跟踪这个循环 看看怎么样

00:04:42.009 --> 00:04:45.610
i 初始值为 1 我们来判断它是否小于或等于 3

00:04:45.610 --> 00:04:51.400
是的 所以进入循环 更新变量 x 为 i 减 1 的值

00:04:51.399 --> 00:04:52.814
而 1 减 1 等于 0

00:04:52.814 --> 00:04:54.754
于是 x 变为 0

00:04:54.754 --> 00:04:56.834
于是我们输出 x

00:04:56.834 --> 00:04:59.219
即我们的输出为 0

00:04:59.220 --> 00:05:01.510
结束这次迭代 回到这上面来

00:05:01.509 --> 00:05:04.629
给 i 加 1 注意这里 因为 i 不变

00:05:04.629 --> 00:05:08.670
所以我们是给 1 加 1 于是 i 变为 2

00:05:08.670 --> 00:05:12.069
2 仍小于或等于 3 所以为真

00:05:12.069 --> 00:05:16.550
于是我们进入循环 更新 x 为 i 减 1 的值

00:05:16.550 --> 00:05:18.925
因为 i 为 2 所以 x 变为 1

00:05:18.925 --> 00:05:20.439
输出 x

00:05:20.439 --> 00:05:23.004
这个时候 x 为 1 于是输出 1

00:05:23.004 --> 00:05:25.524
迭代结束 回来

00:05:25.524 --> 00:05:29.490
给 i 增量 使其为 3 然后继续比较

00:05:29.490 --> 00:05:31.414
结果仍为真

00:05:31.415 --> 00:05:33.020
所以进入循环

00:05:33.019 --> 00:05:37.000
更新 x 为 2 在这输出 x

00:05:37.000 --> 00:05:40.285
回来给 i 增量 使其为 4

00:05:40.285 --> 00:05:44.007
但是 4 不再小于或等于 3

00:05:44.007 --> 00:05:46.173
所以不会进入循环

00:05:46.173 --> 00:05:49.355
我们也就不需要更新 x 也不会输出任何结果

00:05:49.355 --> 00:05:51.009
循环结束

00:05:51.009 --> 00:05:53.829
之所以这么做就不会跟之前一样造成无限循环

00:05:53.829 --> 00:05:57.444
是因为我们没有更新变量 i

00:05:57.444 --> 00:06:00.834
由此可见

00:06:00.834 --> 00:06:05.419
我们可以将 i 当作变量使用 但不要更新它

00:06:05.420 --> 00:06:07.735
我们来看看另一个不会导致无限循环的案例

00:06:07.735 --> 00:06:10.389
在这个案例中 我们在循环里只做一件事

00:06:10.389 --> 00:06:14.365
那就是输出 i 乘以 2 的值

00:06:14.365 --> 00:06:16.030
注意我们并没有更新 i

00:06:16.029 --> 00:06:20.349
只是在输出的时候给它乘以 2

00:06:20.350 --> 00:06:22.210
所以输出的时候不会是 i

00:06:22.209 --> 00:06:24.574
而是 i 的两倍

00:06:24.574 --> 00:06:27.454
我们来跟踪这个程序 看看怎么样

00:06:27.454 --> 00:06:30.175
首先初始化 i 为 1

00:06:30.175 --> 00:06:32.620
然后比较 i 是否小于或等于 3

00:06:32.620 --> 00:06:34.540
是 于是进入循环

00:06:34.540 --> 00:06:36.610
输出 i 乘以 2 的结果

00:06:36.610 --> 00:06:39.814
也就是 2 因为 i 为 1

00:06:39.814 --> 00:06:42.060
到达循环尾部

00:06:42.060 --> 00:06:44.730
将 i 增量为 2

00:06:44.730 --> 00:06:48.610
之所以这么做没问题 是因为 i 没有更改

00:06:48.610 --> 00:06:50.610
所以等我们要增量的时候

00:06:50.610 --> 00:06:54.245
i 还是 1 运算会正常进行 i 会变为 2

00:06:54.245 --> 00:06:55.644
然后进行比较

00:06:55.644 --> 00:06:57.479
i 是否小于或等于 3 是的

00:06:57.480 --> 00:06:58.790
所以进入循环

00:06:58.790 --> 00:07:00.285
将 i 乘以 2 再输出

00:07:00.285 --> 00:07:03.705
i 为 2 所以输出结果为 4

00:07:03.704 --> 00:07:04.964
然后回来

00:07:04.964 --> 00:07:06.924
将 i 增量为 3

00:07:06.925 --> 00:07:09.129
3 仍小于或等于 3

00:07:09.129 --> 00:07:13.075
所以进入循环 输出 3 乘以 2 的结果 即 6

00:07:13.074 --> 00:07:16.019
给 i 增量 使其为 4

00:07:16.019 --> 00:07:18.359
但是 4 不再小于或等于 3

00:07:18.360 --> 00:07:21.254
所以结果为假 不会输出任何东西

00:07:21.254 --> 00:07:23.310
一旦条件变为假

00:07:23.310 --> 00:07:27.555
我们就不会进入循环 而是直接跳出来 就是这样

00:07:27.555 --> 00:07:30.449
无论是变量 i 或是其它名称的计数器

00:07:30.449 --> 00:07:34.170
它们在循环里用起来真的很方便

00:07:34.170 --> 00:07:36.990
记住 你也可以在 while 循环里这么做

00:07:36.990 --> 00:07:40.100
只要小心点 千万别把计数器改了

00:07:40.100 --> 00:07:45.000
接着我们来学习怎么用循环为自己做运算

