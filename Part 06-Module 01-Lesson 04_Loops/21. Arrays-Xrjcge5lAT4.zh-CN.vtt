WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.370
举个例子 如果我们创建一个叫 newsOutlet (新闻媒体) 的字符串变量

00:00:05.370 --> 00:00:09.234
那我们一次只能往里存放一个值

00:00:09.234 --> 00:00:15.239
同样一个变量 如果是数组 则允许我们存放多个字符串

00:00:15.240 --> 00:00:18.059
而且每个字符串可以有自己的值

00:00:18.059 --> 00:00:21.004
不过所有字符串的类型得一致

00:00:21.004 --> 00:00:26.854
在这个案例中 由于这是个字符串数组 所以每个值都得是字符串

00:00:26.855 --> 00:00:30.510
而且由于他们存放在同一个变量中

00:00:30.510 --> 00:00:35.130
为了分辨这些值 数组的每个部分都会标号

00:00:35.130 --> 00:00:39.929
通常数组中含有多少项 就从 0 往上标到多少

00:00:39.929 --> 00:00:43.335
如果你想取出存放在某个盒子里的值

00:00:43.335 --> 00:00:47.609
你只需输入数组名 然后方括号

00:00:47.609 --> 00:00:50.609
并在方括号里输入对应盒子的编号即可

00:00:50.609 --> 00:00:56.984
例如 newsOutlet [0] 里放着 ABC

00:00:56.984 --> 00:01:02.085
newsOutlet [1] 里有 BBC

00:01:02.085 --> 00:01:08.355
newsOutlet [2] 里有 CNN 以此类推

00:01:08.355 --> 00:01:14.755
所有这些表达式都能当普通变量使用 我们来看具体操作

00:01:14.754 --> 00:01:20.379
在 Java 里 对于任何数组 你都可以将其想成是一张表中的一行

00:01:20.379 --> 00:01:26.979
虽然数组里的每个盒子装着不同的值 但它们有共同的名字

00:01:26.980 --> 00:01:29.500
比如 我现在创建了一个整数数组

00:01:29.500 --> 00:01:33.965
所以每个盒子里会放着一个整数

00:01:33.965 --> 00:01:37.820
在 Java 里 这些盒子叫做元素

00:01:37.819 --> 00:01:39.213
正如我们之前说的

00:01:39.213 --> 00:01:43.739
每个元素都有自己的编号 从 0 往上标起

00:01:43.739 --> 00:01:46.774
这些编号叫做元素索引

00:01:46.775 --> 00:01:50.630
这是因为每个数字都是某个特定元素的索引

00:01:50.629 --> 00:01:55.234
比如 这个元素的索引号为 0

00:01:55.234 --> 00:01:58.424
这个元素的索引号为 3

00:01:58.424 --> 00:02:02.754
我们可以把每个元素当作独立的变量来处理

00:02:02.754 --> 00:02:06.804
比如 如果我们想将这个元素和这个加起来

00:02:06.805 --> 00:02:08.955
我们只需要这么写

00:02:08.955 --> 00:02:13.985
int sum = numbers [0] +numbers [3]

00:02:13.985 --> 00:02:16.910
我们的数组名叫做 numbers

00:02:16.909 --> 00:02:20.370
而刚才我们做的 就是用不同索引访问了不同的元素

00:02:20.370 --> 00:02:24.370
这个语句是将它们当变量来处理的

00:02:24.370 --> 00:02:25.689
我们可以把两者相加

00:02:25.689 --> 00:02:29.294
我们可以对普通变量做什么 就可以怎么对它们

00:02:29.294 --> 00:02:34.340
这会把变量 sum 更新为 15

00:02:34.340 --> 00:02:36.500
因为它是把 12

00:02:36.500 --> 00:02:38.997
也就是 numbers [0]

00:02:38.997 --> 00:02:42.510
和 3 也就是 numbers [3] 相加 于是等于 15

00:02:42.509 --> 00:02:46.014
可是 我们一开始要怎么声明这些数组呢？

00:02:46.014 --> 00:02:49.954
假设我们想要声明一个像这样的数组

00:02:49.955 --> 00:02:54.890
我们输入 int 然后是空的方括号 括号表示

00:02:54.889 --> 00:02:57.169
我们想创建的是一个整数数组 而不仅仅是一个整数

00:02:57.169 --> 00:03:00.439
然后写上数组的名字

00:03:00.439 --> 00:03:02.930
在这里就叫 numbers

00:03:02.930 --> 00:03:06.064
然后就是等号和花括号

00:03:06.064 --> 00:03:07.865
在花括号里

00:03:07.865 --> 00:03:11.719
我们需要列举出所有想放在数组里的值

00:03:11.719 --> 00:03:15.034
注意 我不需要说明数组有多大

00:03:15.034 --> 00:03:19.879
Java 会分别把这些值分配到其内存中的各元素里

00:03:19.879 --> 00:03:25.120
并给每个元素分配一个索引

00:03:25.120 --> 00:03:28.310
所以如果你想找到值 121

00:03:28.310 --> 00:03:31.640
你只需用索引 7 来访问它

00:03:31.639 --> 00:03:35.674
比如 如果我试着输出 numbers [0]

00:03:35.675 --> 00:03:41.405
那就会输出 12 因为索引为 0 的元素里就放着这个值

00:03:41.405 --> 00:03:44.120
如果我想

00:03:44.120 --> 00:03:47.944
输出 numbers [9] 和 numbers [12] 的乘积

00:03:47.944 --> 00:03:51.965
也就是 - 4 乘以 2

00:03:51.965 --> 00:03:54.784
所以输出会是 - 8

00:03:54.784 --> 00:03:57.465
双精度数组也一样

00:03:57.465 --> 00:04:01.694
比如 如果我们想创建一组像这样的双精度数组

00:04:01.694 --> 00:04:03.454
我们可以直接写

00:04:03.455 --> 00:04:07.940
double 然后还是方括号 以便把它和普通双精度数区分开来

00:04:07.939 --> 00:04:10.370
然后输入数组名字

00:04:10.370 --> 00:04:14.259
后面是等号 花括号 并在括号中列举值

