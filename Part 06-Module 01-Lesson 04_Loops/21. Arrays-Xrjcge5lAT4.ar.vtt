WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:05.272
إن قمنا بتعريف متغير من نوع سلسلة "string"
اسمه "newsOutlet" مثلاً،

00:00:05.372 --> 00:00:09.142
يمكننا تخزين قيمة واحدة فقط فيه
في المرة الواحدة.

00:00:09.243 --> 00:00:15.148
ولكن المصفوفات تتيح لنا تخزين
العديد من السلاسل في ذلك المتغير نفسه.

00:00:15.249 --> 00:00:17.951
يمكن لكل سلسلة
أن تحمل قيمة مختلفة عن الأخريات،

00:00:18.051 --> 00:00:20.921
ولكنها كلها يجب أن تكون من النوع نفسه.

00:00:21.021 --> 00:00:26.760
في هذه الحالة، ولأن هذه مصفوفة سلاسل، فعلى
كل قيمة أن تكون من نوع سلسلة "string".

00:00:26.860 --> 00:00:30.397
وبما أن جميعها مخزنة في المتغير نفسه،

00:00:30.497 --> 00:00:35.035
لنستطيع التمييز فيما بينها،
يتم ترقيم كل جزء من المصفوفة

00:00:35.135 --> 00:00:39.840
بدء اً من الصفر وصعوداً
بمقدار عدد العناصر الموجودة في المصفوفة.

00:00:39.940 --> 00:00:43.243
إن أردت استرجاع إحدى القيم
الموجودة داخل أي من هذه الصناديق،

00:00:43.343 --> 00:00:47.514
فما عليك إلا كتابة اسم المصفوفة
متبوعة بحاصرتين معقوفتين

00:00:47.614 --> 00:00:50.517
تضمان رقم الصندوق.

00:00:50.617 --> 00:00:56.890
فعلى سبيل المثال، تحتوي خانة "newsOutlet"
المقابلة للمؤشر صفر على "ABC"،

00:00:56.990 --> 00:01:02.062
وخانة "newsOutlet"
المقابلة للمؤشر 1 على "BBC"،

00:01:02.162 --> 00:01:08.335
وخانة "newsOutlet" المقابلة للمؤشر 2 على
"CNN"، وهكذا دواليك حتى نهاية المصفوفة.

00:01:08.435 --> 00:01:13.240
يمكن التعامل مع كل واحدة من تلك التعابير
على أنها متغيرات عادية،

00:01:13.340 --> 00:01:15.142
لنرى كيفية القيام بذلك.

00:01:15.242 --> 00:01:20.347
يمكنك في "Java" اعتبار أي مصفوفة
على أنها صف في جدول،

00:01:20.447 --> 00:01:26.954
حيث لكل خانة في المصفوفة قيمة مختلفة
لكنها كلها تشترك في الاسم نفسه.

00:01:27.054 --> 00:01:30.824
في هذا المثال مصفوفة،
أنا أقوم بخلق مصفوفة أعداد صحيحة

00:01:30.924 --> 00:01:33.927
بحيث تحتوي كل خانة على عدد صحيح.

00:01:34.027 --> 00:01:37.798
تسمى هذه الخانات في "Java" بالخلايا.

00:01:37.898 --> 00:01:39.166
كما ذكرنا سابقاً،

00:01:39.266 --> 00:01:43.704
كل واحدة من تلك الخلايا
مرقمة تصاعدياً بدءاً بالصفر.

00:01:43.804 --> 00:01:46.740
تُسمى هذه الأرقام مؤشرات فهرسة الخلايا،

00:01:46.840 --> 00:01:50.611
لأن كل رقم هو مؤشر فهرس لخلية معينة.

00:01:50.711 --> 00:01:55.215
فلهذه الخلية على سبيل المثال
مؤشر فهرس مقداره صفر.

00:01:55.315 --> 00:01:58.385
هذه الخلية هنا هي الخلية
ذات مؤشر الفهرسة 3.

00:01:58.485 --> 00:02:02.789
يمكننا التعامل مع كل خلية
على أنها متغير منفصل.

00:02:02.890 --> 00:02:06.827
فمثلاً إن أردنا إضافة
هذه الخلية هنا إلى تلك هناك،

00:02:06.927 --> 00:02:08.996
فسنقول شيئاً كالتالي:

00:02:09.096 --> 00:02:14.034
int sum = numbers[0] + numbers[3];

00:02:14.134 --> 00:02:16.336
اسم مصفوفتنا هو "numbers"

00:02:16.436 --> 00:02:20.407
ويمكننا الوصول إلى مختلف الخلايا
باستخدام المؤشرات هكذا.

00:02:20.507 --> 00:02:24.411
ويتم اعتبار هذه العبارة على أنها متغير.

00:02:24.511 --> 00:02:25.712
يمكننا حساب حاصل جمعهما،

00:02:25.812 --> 00:02:29.316
ويمكننا فعل أي شيء
نفعله مع المتغير العادي.

00:02:29.416 --> 00:02:34.388
سيُحدّث هذا قيمة متغير المجموع "sum"
لتُصبح 15.

00:02:34.488 --> 00:02:38.358
لأن العملية تجمع 12، والتي هي قيمة
"numbers" المقابلة للمؤشر صفر،

00:02:38.458 --> 00:02:42.529
و3، والذي هو قيمة "numbers" المقابلة
للمؤشر 3، وحاصل الجمع هو 15.

00:02:42.629 --> 00:02:46.033
لكن كيف نُعرّف تلك المصفوفات
في المقام الأول؟

00:02:46.133 --> 00:02:50.003
لنفترض أننا نريد تعريف مصفوفة تبدو هكذه.

00:02:50.103 --> 00:02:53.440
نكتب "int"
متبوعة بحاصرتين معقوفتين فارغتين

00:02:53.540 --> 00:02:57.211
للدلالة على أننا نريد إنشاء مصفوفة
أعداد صحيحة، وليس عدداً واحداً صحيحاً فقط.

00:02:57.311 --> 00:03:02.482
ثم نكتب اسم مصفوفتنا،
والتي تُدعى في حالتنا "numbers"،

00:03:02.583 --> 00:03:06.153
ونُلحقها بعد ذلك بإشارة يساوي،
ثم قوسين متعرجين.

00:03:06.253 --> 00:03:07.955
أما داخل تلك القوسين المتعرجين

00:03:08.055 --> 00:03:11.825
فنسرد القيم التي نريد
لمصفوفتنا أن تضمها.

00:03:11.925 --> 00:03:15.128
لاحظ أنني لم أضطر إلى تحديد حجم المصفوفة.

00:03:15.229 --> 00:03:21.935
ما سيفعله "Java" هو رصد خلية
في ذاكرته الداخلية لكل من تلك القيم

00:03:22.035 --> 00:03:25.205
ومن ثم تعيين مؤشر فهرسة لكل خلية،

00:03:25.305 --> 00:03:28.408
بحيث إن أردنا الوصول إلى القيمة "121"

00:03:28.509 --> 00:03:31.745
سيتوجب عليك القيام بذلك
باستخدام مؤشر الفهرسة "7".

00:03:31.845 --> 00:03:35.782
فمثلاً إن حاولت طباعة قيمة "numbers"
المقابلة لمؤشر الفهرسة صفر،

00:03:35.883 --> 00:03:41.522
فسأحصل على المُخرج "12"، لأن هذه هي القيمة
المخزنة داخل الخلية ذات المؤشر صفر.

00:03:41.622 --> 00:03:48.028
إن أردت طباعة محصلة ضرب
[9]numbers و [12]numbers،

00:03:48.128 --> 00:03:52.065
اي "-4" × "2"،

00:03:52.165 --> 00:03:54.868
فسيكون الناتج المُخرج هو "-8".

00:03:54.968 --> 00:03:57.571
والأمر ذاته ينطبق
على مصفوفات الأعداد من النوع المزدوج.

00:03:57.671 --> 00:04:01.875
فإن أردنا على سبيل المثال
تعريف مصفوفة أعداد مزدوجة تبدو كهذه،

00:04:01.975 --> 00:04:03.610
فما علينا إلا كتابة التالي:

00:04:03.710 --> 00:04:08.115
"double" متبوعة بحاصرتين معقوفتين فارغتين
لتمييزها عن نوع البيانات المزدوج العادي،

00:04:08.215 --> 00:04:10.551
ومن ثم نُدخل اسم المصفوفة

00:04:10.651 --> 00:04:14.521
متبوعة بإشارة يساوي،
ثم قوسين متعرجين يضمان القيم.

