WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.240
我们已经知道怎么在二维数组里访问单个值了

00:00:04.240 --> 00:00:06.075
假如我们想进一步操作

00:00:06.075 --> 00:00:11.550
比如计算所有学生的英语平均分

00:00:11.550 --> 00:00:16.899
这就意味着我们需要访问相应行中每个学生的分数

00:00:16.899 --> 00:00:21.829
记住 二维数组本质上就是数组的数组

00:00:21.829 --> 00:00:25.289
因此 这里的每一行本身就是一个数组

00:00:25.289 --> 00:00:29.324
所以 如果我们想访问某一行的每一项

00:00:29.324 --> 00:00:33.689
我们就需要指定第一个数字为该数组的索引

00:00:33.689 --> 00:00:35.879
至于第二个索引

00:00:35.880 --> 00:00:38.295
因为我们不想要某个项

00:00:38.295 --> 00:00:40.054
而想要全部项

00:00:40.054 --> 00:00:43.091
所以我们可以把这整个用循环括起来 用 i 作为计数器

00:00:43.091 --> 00:00:47.454
从 0 开始计数 直到 i 不再小于 5

00:00:47.454 --> 00:00:51.960
然后我们可以用这个循环计数器作这里的索引

00:00:51.960 --> 00:00:55.200
于是 这个循环计数器 i 就会包含所有的值 从 0 到 5

00:00:55.200 --> 00:00:59.310
而这个 1 则指明是英语那一行

00:00:59.310 --> 00:01:04.935
也就意味着 一旦我们执行这个循环 我们就能访问英语行中的每个学生

00:01:04.935 --> 00:01:08.984
也就是我们的循环会访问这一行的每一项

00:01:08.984 --> 00:01:13.474
现在来看看我们可以怎么应用这个 在 Java 函数里计算平均分

00:01:13.474 --> 00:01:17.919
englishAverage 这个函数能计算一个二维数组的平均值

00:01:17.920 --> 00:01:22.200
该函数以这个二维整数数组作为输入参数

00:01:22.200 --> 00:01:24.359
返回一个双精度值

00:01:24.359 --> 00:01:27.385
而该值就等于这个二维数组里所有项的平均值

00:01:27.385 --> 00:01:30.510
这个循环是我们之前创建的

00:01:30.510 --> 00:01:32.280
一开始是循环计数器 i 等于 0

00:01:32.280 --> 00:01:35.564
会一直执行直到 i 不再小于 5

00:01:35.564 --> 00:01:39.164
在这里面 我们要访问 grades [1] [i]

00:01:39.165 --> 00:01:46.715
记住 grades [1] [i] 会访问英语行中的每个学生

00:01:46.715 --> 00:01:50.995
所以这个循环会访问英语数组中的所有学生

00:01:50.995 --> 00:01:55.204
现在我们要把英语数组里的所有值都加起来

00:01:55.204 --> 00:01:58.727
因此我们要在上面声明一个变量 即 total

00:01:58.727 --> 00:02:03.739
然后每次循环都把这个值和变量 total 加起来

00:02:03.739 --> 00:02:05.444
这样等循环结束

00:02:05.444 --> 00:02:09.719
total 就会得到 grades 里所有值的总和

00:02:09.719 --> 00:02:14.504
而我们就可以开始计算平均值了 也就是让总和除以数组项数

00:02:14.504 --> 00:02:16.544
等我们算好平均值

00:02:16.544 --> 00:02:19.544
就可以安全地将其返回出来 作为函数的结果

00:02:19.544 --> 00:02:23.054
注意我是把这个除以 5.0 而不仅是 5

00:02:23.055 --> 00:02:25.465
因为 total 声明为一个整数

00:02:25.465 --> 00:02:29.280
而我想让除法运算的结果变为双精度值 完美

00:02:29.280 --> 00:02:33.569
现在来看看 如果想计算一列的平均值 我们得怎么做

00:02:33.569 --> 00:02:37.409
以算出 Sandra 的平均成绩为例

00:02:37.409 --> 00:02:40.889
要计算 Sandra 的平均成绩

00:02:40.889 --> 00:02:44.794
我们需要访问一列里的每一项

00:02:44.794 --> 00:02:47.984
这和我们计算英语平均分是很相似的

00:02:47.985 --> 00:02:52.645
除了一点 那就是我们得访问每个科目数组 而不仅仅是一个

00:02:52.645 --> 00:02:57.439
这也就意味着 这里的第一个索引应为循环计数器 i

00:02:57.439 --> 00:03:03.009
而第二个数字则应等于我们感兴趣的那个人的索引号

00:03:03.009 --> 00:03:05.709
对于 Sandra 来说 该值为 2

00:03:05.710 --> 00:03:08.200
这就意味着这个循环

00:03:08.199 --> 00:03:12.974
会访问 Sandra 各科的成绩

00:03:12.974 --> 00:03:16.164
我们来看看如何在 Java 代码里使用这个

00:03:16.164 --> 00:03:19.479
函数 sandraAverage 以一个二维数组为输入参数

00:03:19.479 --> 00:03:23.424
会进行平均值计算并将该值以双精度的类型返回出来

00:03:23.425 --> 00:03:26.410
首先 声明变量 total 并将其初始化为 0

00:03:26.409 --> 00:03:31.229
然后对 Sandra 一列的所有成绩进行循环操作

00:03:31.229 --> 00:03:33.579
这个操作需要以循环计数器 i 作为第一个索引

00:03:33.580 --> 00:03:38.155
而 Sandra 一列的编号 2 则为第二个索引

00:03:38.155 --> 00:03:42.754
还是一样 在循环里 我们每次都会将 grades 与 total 相加

00:03:42.754 --> 00:03:47.439
这样等到循环结束 我们就可以让 total 除以 4

00:03:47.439 --> 00:03:49.750
也就是除以科目数

00:03:49.750 --> 00:03:53.129
从而得到 Sandra 的平均成绩 并将其返回出来

00:03:53.129 --> 00:03:57.349
看起来很不错 不过 我们还可以修改一下这个函数

00:03:57.349 --> 00:04:02.014
使其可读性更强 更容易理解

00:04:02.014 --> 00:04:06.939
首先 对于没看过这个数组的人来说

00:04:06.939 --> 00:04:08.859
这些数字 4、2 和 4.0 意义不明

00:04:08.860 --> 00:04:12.500
如果他们不知道数组里有什么 那就更是如此了

00:04:12.500 --> 00:04:15.039
所以要让函数更通俗易懂

00:04:15.039 --> 00:04:17.920
我们可以让代码体现出这些数字的含义

00:04:17.920 --> 00:04:21.235
比如 让代表科目数的 4

00:04:21.235 --> 00:04:25.435
从这个作为参数的二维数组上推断出来

00:04:25.435 --> 00:04:31.030
要实现这一点 我们可以在函数第一行再次使用关键字 length

00:04:31.029 --> 00:04:33.879
记住 当我们使用关键字 length 的时候

00:04:33.879 --> 00:04:37.399
我们计算的是数组里的元素或项数

00:04:37.399 --> 00:04:40.269
由于 grades 是个数组的数组

00:04:40.269 --> 00:04:43.089
grades.length 会告诉我们这个二维数组里有多少个数组

00:04:43.089 --> 00:04:47.534
而数组数又等于科目数

00:04:47.535 --> 00:04:50.525
因此我们可以将得出的值赋给变量  subjects

00:04:50.524 --> 00:04:54.444
从而将所有 4 都替换成这个变量

00:04:54.444 --> 00:04:57.240
来到这里的 4.0

00:04:57.240 --> 00:05:00.165
因为我们想确保 subjects 是个双精度数

00:05:00.165 --> 00:05:01.920
哪怕它被声明为整数

00:05:01.920 --> 00:05:04.645
所以我们可以将它转换为一个双精度数 就像我们之前学到的那样

00:05:04.644 --> 00:05:06.750
于是现在要计算平均数

00:05:06.750 --> 00:05:10.860
就是用 total 除以 subjects 的值 不过该值被转换为一个双精度值

00:05:10.860 --> 00:05:14.805
现在看起来好多了 任何二维数组都能应用这个函数了

00:05:14.805 --> 00:05:17.340
无论数组里有多少科目都不怕

00:05:17.339 --> 00:05:20.219
我们可以做的最后一个操作 是把这个 2 泛化

00:05:20.220 --> 00:05:23.610
这样函数就不是特地针对 Sandra 而设的了

00:05:23.610 --> 00:05:26.100
而是可以为我们指定的任意学生

00:05:26.100 --> 00:05:29.080
计算平均值

00:05:29.079 --> 00:05:32.159
最好的泛化办法是创建一个泛型函数

00:05:32.160 --> 00:05:37.715
我们管它叫 studentAverage 该函数现在多了个输入参数 即 int student

00:05:37.714 --> 00:05:41.250
所以该函数接受两个参数 一个是包含所有成绩的二维数组

00:05:41.250 --> 00:05:46.610
另一个是 student 这能索引出我们想计算平均值的那名学生

00:05:46.610 --> 00:05:51.759
而在这里面 我们可以把这里的方括号替换为变量 student

00:05:51.759 --> 00:05:53.699
这也就意味着 无论我们输入什么数字作为参数

00:05:53.699 --> 00:05:58.310
都会用于访问这个二维数组 grades

00:05:58.310 --> 00:06:01.680
现在我们的 studentAverage 函数既可对我们指定的任意学生进行操作

00:06:01.680 --> 00:06:07.410
也可对具备任意科目数的任意二维数组进行操作

00:06:07.410 --> 00:06:11.415
那如果我们想对这个二维数组进行更多的分析操作呢？

00:06:11.415 --> 00:06:14.610
假设我们需要对整个数组进行循环操作

00:06:14.610 --> 00:06:17.680
访问里面的每个值

00:06:17.680 --> 00:06:20.720
似乎我们得分别为每行建一个循环

00:06:20.720 --> 00:06:24.140
而在每个循环里 我们还需要访问该行的每一项

00:06:24.139 --> 00:06:25.764
循环里的循环？

00:06:25.764 --> 00:06:27.659
是的 这是可能的

00:06:27.660 --> 00:06:29.305
就像 if 嵌套

00:06:29.305 --> 00:06:33.000
我们也可以有循环嵌套 我们来看看要怎样操作

