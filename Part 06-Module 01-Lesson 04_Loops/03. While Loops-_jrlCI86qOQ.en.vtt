WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.109
But even if we do decide to turn off the alarm,

00:00:03.109 --> 00:00:07.275
say after a hundred beeps regardless of someone turning it off or not,

00:00:07.275 --> 00:00:12.905
we still need to copy and paste this If block a hundred times.

00:00:12.904 --> 00:00:14.754
This is terrible.

00:00:14.755 --> 00:00:16.019
There must be a solution.

00:00:16.019 --> 00:00:20.739
Right? Well, Java does have a solution and it's called Loops.

00:00:20.739 --> 00:00:22.484
Let's see how these work.

00:00:22.484 --> 00:00:25.544
In Java, instead of using if,

00:00:25.545 --> 00:00:27.925
you could use something called while.

00:00:27.925 --> 00:00:30.780
Which is very similar to an if-condition.

00:00:30.780 --> 00:00:33.825
Except that instead of checking for this condition once,

00:00:33.825 --> 00:00:38.469
a while would continue to check that condition and apply that block here,

00:00:38.469 --> 00:00:40.884
every time this condition is true.

00:00:40.884 --> 00:00:43.109
So what happens in a code block like this,

00:00:43.109 --> 00:00:46.214
is that the while we check if this on variable is true.

00:00:46.215 --> 00:00:48.015
If it is, it would step inside,

00:00:48.015 --> 00:00:49.740
run this entire code block,

00:00:49.740 --> 00:00:52.380
go back up again, check on again.

00:00:52.380 --> 00:00:55.035
If it's still true, then it would go down and repeat

00:00:55.034 --> 00:00:59.494
this part over and over again until on is no longer true.

00:00:59.494 --> 00:01:02.504
Then it just skips this part and continues.

00:01:02.505 --> 00:01:05.219
This is why this is called While Loops.

00:01:05.219 --> 00:01:08.939
Because it keeps looping over and over this code block

00:01:08.939 --> 00:01:14.439
here as many times as needed while this condition still remains true.

00:01:14.439 --> 00:01:18.659
This basically means that the single while block

00:01:18.659 --> 00:01:23.369
here can replace all those repeated if blocks over there.

00:01:23.370 --> 00:01:28.770
So instead of having to check our on variable multiple times in multiple if-blocks,

00:01:28.769 --> 00:01:31.219
we can just check it in a while-loop.

00:01:31.219 --> 00:01:37.510
And that would repeat this block here over and over until on is no longer true.

00:01:37.510 --> 00:01:42.420
And because we're updating our on variable here using that checkAlarm function,

00:01:42.420 --> 00:01:44.379
so eventually this checkAlarm function will

00:01:44.379 --> 00:01:46.893
return false when someone turns the alarm off,

00:01:46.893 --> 00:01:49.010
making our on variable false.

00:01:49.010 --> 00:01:52.880
So at some point this while would quit.

00:01:52.879 --> 00:01:57.890
Let's trace this function using the while loop and see how it works.

00:01:57.890 --> 00:02:00.195
So, our updated function looks like so.

00:02:00.194 --> 00:02:03.289
We start by creating this boolean on

00:02:03.290 --> 00:02:07.355
and checking the alarm and then instead of having all these repeated if blocks,

00:02:07.355 --> 00:02:12.920
we just have this single while loop that checks if on is true.

00:02:12.919 --> 00:02:19.509
If so, we just start beeping and then we update on using the checkAlarm again.

00:02:19.509 --> 00:02:22.310
Remember that checkAlarm function returns

00:02:22.310 --> 00:02:25.670
a boolean which is true if the alarm is on and false,

00:02:25.669 --> 00:02:27.764
if the alarm has been turned off.

00:02:27.764 --> 00:02:29.959
Let's try this function and see how it works.

00:02:29.960 --> 00:02:35.205
The first thing we do is we call our checkAlarm function to initialize our own variable.

00:02:35.205 --> 00:02:37.309
Because it's six o'clock,

00:02:37.308 --> 00:02:39.650
so our checkAlarm would actually return true.

00:02:39.650 --> 00:02:42.590
Meaning that the alarm should start beeping now.

00:02:42.590 --> 00:02:45.185
So our on variable here is true,

00:02:45.185 --> 00:02:49.490
meaning that our while check here would be true.

00:02:49.490 --> 00:02:52.700
So it would step inside and start beeping.

00:02:52.699 --> 00:02:57.019
So, this would actually trigger our alarm clock to beep.

00:02:57.020 --> 00:03:01.425
Then, we check the alarm again to update our on variable.

00:03:01.425 --> 00:03:03.314
And because no one hit the snooze button yet,

00:03:03.314 --> 00:03:05.780
so checkAlarms still returns true,

00:03:05.780 --> 00:03:09.504
makes are on variable true.

00:03:09.504 --> 00:03:11.432
Reach the end of our loop,

00:03:11.432 --> 00:03:15.049
so we go back up and we check if that is true again.

00:03:15.050 --> 00:03:16.963
Because on is true,

00:03:16.962 --> 00:03:20.829
we step inside and call our beep function again,

00:03:20.830 --> 00:03:23.375
which triggers our alarm clock to beep.

00:03:23.375 --> 00:03:26.780
Then, we check the alarm again.

00:03:26.780 --> 00:03:30.710
Now, imagine someone hits the snooze button now.

00:03:30.710 --> 00:03:34.775
This means when we call check the alarm to see if the alarm is still on,

00:03:34.775 --> 00:03:38.210
it actually returns false and therefore,

00:03:38.210 --> 00:03:41.135
on also becomes false.

00:03:41.134 --> 00:03:43.250
So, we've reached the end of our loop.

00:03:43.250 --> 00:03:46.060
We go back up, we check this comparison again.

00:03:46.060 --> 00:03:49.550
And because while is no longer true,

00:03:49.550 --> 00:03:53.240
we do not step inside and hence, we don't beep.

00:03:53.240 --> 00:03:55.015
So nothing happens anymore,

00:03:55.014 --> 00:03:58.047
and this basically means that the while has ended,

00:03:58.048 --> 00:03:59.960
and it will no longer check or try again.

00:03:59.960 --> 00:04:05.010
It will just continue the program which doesn't have anything else so the function ends.

00:04:05.009 --> 00:04:08.625
It seems like it's doing exactly what we expected.

00:04:08.625 --> 00:04:12.060
This would continue to return true.

00:04:12.060 --> 00:04:14.175
Setting our on variable to true.

00:04:14.175 --> 00:04:18.020
Making our alarm beep for as long as it needs until

00:04:18.019 --> 00:04:23.089
checkAlarm eventually decides to return false after someone hits the snooze button.

00:04:23.089 --> 00:04:28.294
Perfect. You can see now that using a while loop can repeat something

00:04:28.295 --> 00:04:31.520
for a variable number of times so we don't

00:04:31.519 --> 00:04:35.074
have to know in advance how many times we need to repeat something.

00:04:35.074 --> 00:04:37.639
We just put it in a while loop and make sure that

00:04:37.639 --> 00:04:42.110
our condition would eventually turn false ending our loop.

00:04:42.110 --> 00:04:44.000
Let's see a few more examples.

