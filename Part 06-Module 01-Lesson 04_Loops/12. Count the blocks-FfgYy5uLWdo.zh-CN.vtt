WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.084
好了 我们来看看要如何实现这个函数 countBlocks

00:00:04.084 --> 00:00:06.480
它的参数是这个 int levels

00:00:06.480 --> 00:00:09.458
也就是金字塔的层数

00:00:09.458 --> 00:00:13.320
该函数会返回一个整数 即金字塔所需的方块数量

00:00:13.320 --> 00:00:17.969
首先 我们需要声明并初始化这个变量 total

00:00:17.969 --> 00:00:20.489
该变量会随层数一层层叠加而不断变化

00:00:20.489 --> 00:00:24.041
从而跟踪建造整座金字塔所需的方块数

00:00:24.042 --> 00:00:28.890
然后 我们创建一个循环 从 1 一直计数到金字塔的最高层数

00:00:28.890 --> 00:00:30.914
增量就为 i++

00:00:30.914 --> 00:00:33.329
在循环里

00:00:33.329 --> 00:00:37.799
我们需要计算每层的方块数 也就是 i 乘以 i

00:00:37.799 --> 00:00:40.269
因为 i 会从 1、2、3

00:00:40.270 --> 00:00:43.782
一直变到金字塔的最高层数为止

00:00:43.781 --> 00:00:46.604
我们每算完一层所需的方块数

00:00:46.604 --> 00:00:51.354
就把该值加到变量 total 里 更新 total 变量 使其等于总和

00:00:51.354 --> 00:00:53.409
最后 待循环结束

00:00:53.409 --> 00:00:54.659
我们就返回出变量 total 的值

00:00:54.659 --> 00:00:56.309
因为这就是

00:00:56.310 --> 00:00:59.804
金字塔每层方块数的总和

00:00:59.804 --> 00:01:02.729
我们来测试这段代码 假设金字塔是三层的

00:01:02.729 --> 00:01:06.659
也就是说这里的输入变量 levels 为 3

00:01:06.659 --> 00:01:08.390
total 则初始化为 0

00:01:08.390 --> 00:01:12.870
循环会从 1 开始一直执行到 levels 也就是 3

00:01:12.870 --> 00:01:17.740
我们来执行循环并跟踪每个变量

00:01:17.739 --> 00:01:18.964
i 一开始为 1

00:01:18.965 --> 00:01:24.225
然后我们判断这个条件 i 是否小于或等于 levels

00:01:24.224 --> 00:01:26.644
也就是判断 i 是否小于或等于 3

00:01:26.644 --> 00:01:29.200
结果为真 因为 i 现在还是 1

00:01:29.200 --> 00:01:30.990
于是我们计算这一层的方块数

00:01:30.989 --> 00:01:34.774
也就是 i 乘以 i

00:01:34.775 --> 00:01:38.505
然后将 i 乘以 i 的结果与 total 相加

00:01:38.504 --> 00:01:41.784
而 total 一开始为 0 于是 total 变为 1

00:01:41.784 --> 00:01:44.879
到达第一次循环的尾部 我们回到这上面来

00:01:44.879 --> 00:01:47.174
给 i 加 1 使其为 2

00:01:47.174 --> 00:01:49.349
再次进行条件判断

00:01:49.349 --> 00:01:51.274
i 是否小于或等于 3？

00:01:51.275 --> 00:01:53.785
因为现在 i 还是 2 所以条件为真

00:01:53.784 --> 00:01:57.070
于是我们计算 i 乘以 i 也就是 2 乘以 2

00:01:57.070 --> 00:01:58.280
结果为 4

00:01:58.280 --> 00:02:00.079
将 4 与 total 相加

00:02:00.079 --> 00:02:01.114
因为 total 现在为 1

00:02:01.114 --> 00:02:03.454
所以加了之后就是 5 了

00:02:03.454 --> 00:02:06.135
再次到达循环尾部 我们再回来

00:02:06.135 --> 00:02:08.715
给 i 加 1 使其为 3

00:02:08.715 --> 00:02:09.844
再次判断

00:02:09.844 --> 00:02:11.800
3 是否小于或等于 3？

00:02:11.800 --> 00:02:14.775
对的 因为 3 等于 3 所以条件为真

00:02:14.775 --> 00:02:16.740
再次进入循环

00:02:16.740 --> 00:02:19.439
计算 i 乘以 i 得到结果为 9

00:02:19.439 --> 00:02:20.814
因为是 3 乘以 3

00:02:20.814 --> 00:02:23.300
将其与 total 相加 而 total 是 5

00:02:23.300 --> 00:02:26.445
所以 9 加 5 等于 14

00:02:26.444 --> 00:02:29.039
于是 total 变成了 14

00:02:29.039 --> 00:02:32.054
到达循环尾部 回来

00:02:32.055 --> 00:02:33.879
再给 i 加 1

00:02:33.879 --> 00:02:35.704
再次进行条件判断

00:02:35.705 --> 00:02:37.507
4 是否小于或等于 3 呢？

00:02:37.507 --> 00:02:39.675
不是的 所以条件不再为真

00:02:39.675 --> 00:02:42.180
所以我们不再进入循环

00:02:42.180 --> 00:02:45.425
直接跳到这下面 返回 total 的值

00:02:45.425 --> 00:02:48.660
所以现在 total 的值为 14

00:02:48.659 --> 00:02:50.924
也就是这个函数的输出结果

00:02:50.925 --> 00:02:53.185
也就是当输入值为 3 时的函数结果

00:02:53.185 --> 00:02:56.360
棒极了 你也可以试着跟踪看看

00:02:56.360 --> 00:03:01.000
输入更大的值 观察函数是否同样奏效

