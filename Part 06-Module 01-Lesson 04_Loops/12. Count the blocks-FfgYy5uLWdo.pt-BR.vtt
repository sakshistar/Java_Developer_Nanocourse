WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:04.000
Vamos ver como implementar
a função countBlocks.

00:00:04.033 --> 00:00:09.267
Ele recebe um inteiro lelevs,
o número de níveis da pirâmide,

00:00:09.300 --> 00:00:13.300
e retorna um inteiro que é
o número de blocos necessários.

00:00:13.334 --> 00:00:17.801
Vamos começar declarando
e inicializando a variável total,

00:00:17.834 --> 00:00:21.767
que vai guardar o número de blocos
necessários para a pirâmide

00:00:21.801 --> 00:00:24.367
somando todos os níveis
um por um.

00:00:24.400 --> 00:00:28.701
Depois, começamos um laço que conta
de 1 até o número de níveis,

00:00:28.734 --> 00:00:31.000
e o incremento é i++.

00:00:31.033 --> 00:00:33.033
Dentro do laço,
para cada nível,

00:00:33.067 --> 00:00:36.033
temos que calcular
o número de blocos no nível,

00:00:36.067 --> 00:00:40.834
que é i*i, porque o i vai
de 1, 2, 3,

00:00:40.868 --> 00:00:43.601
até o número máximo
de níveis.

00:00:43.634 --> 00:00:46.601
Depois de calcular o número
de blocos no nível,

00:00:46.634 --> 00:00:51.234
somamos à variável total,
que passa a ser igual à soma.

00:00:51.267 --> 00:00:55.400
Finalmente, quando o laço termina,
retornamos a variável total,

00:00:55.434 --> 00:00:59.801
que tem o número total de blocos
para todos os níveis da pirâmide.

00:00:59.834 --> 00:01:02.834
Vamos testar para uma pirâmide
com 3 níveis.

00:01:02.868 --> 00:01:06.634
Então a variável de entrada
vai ser 3.

00:01:06.667 --> 00:01:10.601
total começa como zero,
e o laço vai de 1 até levels,

00:01:10.634 --> 00:01:12.367
que é 3.

00:01:12.400 --> 00:01:17.534
Vamos acompanhar as variáveis
ao passar pelo laço.

00:01:17.567 --> 00:01:18.934
i começa como 1,

00:01:18.968 --> 00:01:23.033
e checamos a condição de i ser
menor ou igual a levels,

00:01:23.067 --> 00:01:26.601
que é se i é menor
ou igual a 3,

00:01:26.634 --> 00:01:29.100
e isso é verdade,
porque i ainda é 1.

00:01:29.133 --> 00:01:34.734
Calculamos o número de blocos
naquele nível, que é i vezes i,

00:01:34.767 --> 00:01:38.434
e somamos o resultado
de i vezes i ao total,

00:01:38.467 --> 00:01:41.634
que começou como zero,
então agora o total é 1.

00:01:41.667 --> 00:01:43.934
Chegamos ao final
do primeiro laço,

00:01:43.968 --> 00:01:47.067
então voltamos,
somamos 1 no i, virando 2,

00:01:47.100 --> 00:01:51.300
checamos a condição de novo,
se i é menor ou igual a 3,

00:01:51.334 --> 00:01:53.767
e ele ainda é 2,
então é verdade.

00:01:53.801 --> 00:01:58.234
Calculamos i vezes i,
que é 2 vezes 2, que é 4,

00:01:58.267 --> 00:01:59.901
e somamos ao total.

00:01:59.934 --> 00:02:03.334
O total já era 1,
então somamos e dá 5.

00:02:03.367 --> 00:02:06.267
Chegamos ao final do laço,
voltamos para cima,

00:02:06.300 --> 00:02:08.601
somamos 1 no i, que vira 3,

00:02:08.634 --> 00:02:12.000
fazemos a checagem de novo,
3 é menor ou igual a 3,

00:02:12.033 --> 00:02:14.767
porque é igual a 3,
então é verdade.

00:02:14.801 --> 00:02:18.400
Entramos de novo
e calculamos i vezes i,

00:02:18.434 --> 00:02:20.734
que é 9, 3 vezes 3,

00:02:20.767 --> 00:02:26.400
somamos ao total, que era 5,
e 9 + 5 = 14.

00:02:26.434 --> 00:02:28.868
O total vira 14.

00:02:28.901 --> 00:02:31.968
Chegamos ao final do laço,
voltamos para cima,

00:02:32.000 --> 00:02:35.734
somamos 1 no i,
e fazemos a condição de novo.

00:02:35.767 --> 00:02:37.767
4 é menor ou igual a 3?

00:02:37.801 --> 00:02:42.000
Não, não é mais,
então não entramos no laço,

00:02:42.033 --> 00:02:45.367
e chegamos aqui embaixo,
para retornar o total.

00:02:45.400 --> 00:02:51.100
O valor de total agora é 14,
que é o retorno desta função,

00:02:51.133 --> 00:02:53.367
se a entrada for 3.

00:02:53.400 --> 00:02:54.634
Excelente!

00:02:54.667 --> 00:02:58.634
Você pode tentar fazer o traço
com valores maiores de entrada

00:02:58.667 --> 00:03:00.934
e ver se funciona
para eles também.

