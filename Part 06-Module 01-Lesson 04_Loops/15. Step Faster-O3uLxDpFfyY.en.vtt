WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.330
Always keep in mind that in both cases,

00:00:03.330 --> 00:00:05.099
the while loops and for loops.

00:00:05.099 --> 00:00:09.779
Our loop counter, is just a variable just like any other variable.

00:00:09.779 --> 00:00:12.224
We usually call it i for simplicity,

00:00:12.224 --> 00:00:15.344
but we could always call it any other name.

00:00:15.345 --> 00:00:17.769
The same goes with our loop increment.

00:00:17.769 --> 00:00:22.199
This can be any mathematical operation that we can normally do to an integer.

00:00:22.199 --> 00:00:24.804
Let's have a look at a few common ones.

00:00:24.804 --> 00:00:26.039
The most commonly used one i++,

00:00:26.039 --> 00:00:29.650
which is just a shorthand of i = i+1.

00:00:29.650 --> 00:00:33.615
And that simply adds 1 to an i.

00:00:33.615 --> 00:00:36.820
Say, for example, our i was equal to 10,

00:00:36.820 --> 00:00:40.734
i++ would change that to 11.

00:00:40.734 --> 00:00:42.464
We've also seen i--,

00:00:42.465 --> 00:00:46.242
which is just a shorthand of i = i-1,

00:00:46.241 --> 00:00:50.474
and it basically subtracts 1 from i so if i was 10,

00:00:50.475 --> 00:00:53.010
that would make it 9.

00:00:53.009 --> 00:00:57.015
Now, we can step up faster than just adding one or subtracting one.

00:00:57.015 --> 00:00:59.759
Remember when we used to add numbers to a variable just by

00:00:59.759 --> 00:01:03.731
saying i = i+5 or whatever number,

00:01:03.731 --> 00:01:08.314
this can be shorthanded into i+ equals that number.

00:01:08.314 --> 00:01:10.700
They both mean the exact same thing.

00:01:10.700 --> 00:01:15.875
In this case, it's just adding 5 to i and updating i into that new value.

00:01:15.875 --> 00:01:17.614
Say, if i was 10,

00:01:17.614 --> 00:01:21.539
that would end up updating i to 15.

00:01:21.540 --> 00:01:24.765
Similarly, goes with i minus a number.

00:01:24.765 --> 00:01:27.890
If we say i = i-6, for example,

00:01:27.890 --> 00:01:32.097
this can be shorthanded into i- = 6.

00:01:32.097 --> 00:01:33.769
Meaning that if i was equal to 10,

00:01:33.769 --> 00:01:35.188
it would update it to 4.

00:01:35.188 --> 00:01:39.659
The exact same goes with multiplication and division.

00:01:39.659 --> 00:01:43.590
We could update a variable by multiplying it with a number like so.

00:01:43.590 --> 00:01:49.855
i = i*3 so that multiplies i by 3 and updates i to that new value.

00:01:49.855 --> 00:01:54.984
The shorthand for that is i* = 3 just like plus and minus.

00:01:54.983 --> 00:01:59.629
If i was equal to 10 that will multiply it by 3 and update it to 30.

00:01:59.629 --> 00:02:01.729
The same goes for division as well.

00:02:01.730 --> 00:02:04.674
We can divide our variable by a number like so.

00:02:04.674 --> 00:02:13.405
i = i/2 that would divide our variable by 2 and update its value to that new calculation.

00:02:13.405 --> 00:02:17.280
The shorthand for that is i/ = 2.

00:02:17.280 --> 00:02:19.770
In this case, if i was 10,

00:02:19.770 --> 00:02:23.860
it will divide it by 2 and update it to that, which is 5.

00:02:23.860 --> 00:02:27.985
Let's have a look at a few examples that use those shorthands.

00:02:27.985 --> 00:02:32.460
Let's say you want to print only the even numbers between 2 and 10.

00:02:32.460 --> 00:02:36.115
Basically, you want to create a loop that starts from 2 and counts

00:02:36.115 --> 00:02:39.745
all the way up to 10 but instead of adding 1 to our loop counter,

00:02:39.745 --> 00:02:42.185
we want to increment it by 2.

00:02:42.185 --> 00:02:44.080
We've written a function here called even

00:02:44.080 --> 00:02:47.230
numbers that doesn't accept any parameters and it doesn't return

00:02:47.229 --> 00:02:53.319
anything so it's called public void evenNumbers empty brackets and then curly brackets.

00:02:53.319 --> 00:02:57.879
Inside, we only have this loop here that starts with the loop counter

00:02:57.879 --> 00:03:02.484
i=2 and it keeps counting as long as i is less than or equal to 10.

00:03:02.485 --> 00:03:06.175
But our loop increment is i+ = 2.

00:03:06.175 --> 00:03:12.430
This instruction here adds 2 to i every time so every iteration in our loop,

00:03:12.430 --> 00:03:14.340
i jumps by 2.

00:03:14.340 --> 00:03:17.140
Let's trace this and see what's happening.

00:03:17.139 --> 00:03:20.264
The first thing i gets initialized to value 2,

00:03:20.264 --> 00:03:23.734
and i is less than or equal to 10 so that's true.

00:03:23.735 --> 00:03:25.900
We step inside our loop and we do

00:03:25.900 --> 00:03:30.680
this print line operation which prints out i as it is, which is 2.

00:03:30.680 --> 00:03:33.360
We reach the end of our loop so we go back

00:03:33.360 --> 00:03:35.910
up and the first thing we do is our increment here.

00:03:35.909 --> 00:03:40.280
Our increment adds 2 to our loop counter i,

00:03:40.280 --> 00:03:43.659
and it was 2 making it 4 and then we

00:03:43.659 --> 00:03:46.903
do our comparison i less than or equal to 10 which is true.

00:03:46.903 --> 00:03:52.120
And so we step into the loop and printout i again which is just 4.

00:03:52.120 --> 00:03:54.025
We step back up,

00:03:54.025 --> 00:04:00.573
we add 2 to our loop counter which makes it 6 and 6 is still less than or equal to 10,

00:04:00.573 --> 00:04:02.555
so we print out 6.

00:04:02.555 --> 00:04:05.194
Go back up, add 2,

00:04:05.194 --> 00:04:09.264
8 is still less than or equal to 10, so we print out 8.

00:04:09.264 --> 00:04:17.319
8 becomes 10 and 10 is still less than or equal to 10 so we print out 10.

00:04:17.319 --> 00:04:23.409
We've reached here, we go back up and that adds 2 to our loop counter making it 12.

00:04:23.410 --> 00:04:27.905
12 is no longer less than or equal to 10 so that's false,

00:04:27.904 --> 00:04:30.482
and we don't step into the loop anymore.

00:04:30.483 --> 00:04:32.689
So we don't print anything else.

00:04:32.689 --> 00:04:38.959
Once we change our loop increment from just i++ to something like i+ = 2,

00:04:38.959 --> 00:04:44.044
you can see that i is increasing in steps of 2 rather than 1.

00:04:44.045 --> 00:04:46.819
You could also change this to i+ = 3,

00:04:46.819 --> 00:04:49.399
for example and that would grow in threes.

00:04:49.399 --> 00:04:53.546
Remember that you could also use the multiplication like i* = 2,

00:04:53.547 --> 00:04:59.083
which means that every time i would get multiplied by 2 rather than just add 2 to it.

00:04:59.083 --> 00:05:01.010
There's a lot you can do with all these operations.

