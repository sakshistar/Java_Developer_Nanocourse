WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.965
在上一节课中

00:00:01.965 --> 00:00:05.205
我们学习了将代码写成函数的方法

00:00:05.205 --> 00:00:11.310
总的来说 就是把代码组织成模块 以便在程序的其它位置使用

00:00:11.310 --> 00:00:15.240
如果我们想多次使用函数的话 这么做的好处就凸显出来了

00:00:15.240 --> 00:00:18.240
因为那样我们就不用重头写一遍这些代码了

00:00:18.239 --> 00:00:22.149
只需在必要时调用函数就可以了 而且函数还能调用多次

00:00:22.149 --> 00:00:26.219
打个比方 你和几个朋友收到任务

00:00:26.219 --> 00:00:31.744
要给这个闹钟编程 让它到了该响的时候 比如说到了早上六点就响

00:00:31.745 --> 00:00:36.914
它会一直响 直到有人按下打盹按钮

00:00:36.914 --> 00:00:41.820
已经有几个队友帮你创建并实现了一些函数

00:00:41.820 --> 00:00:43.575
其中一个函数叫做 beep (铃声)

00:00:43.575 --> 00:00:49.170
调用该函数时 闹钟喇叭就会发出一次哔声

00:00:49.170 --> 00:00:51.870
另一个函数叫 checkAlarm (响铃检查)

00:00:51.869 --> 00:00:54.239
调用时会返回一个布尔值

00:00:54.240 --> 00:00:58.079
如果闹钟响着 值为真 如果闹钟没有响 则值为假

00:00:58.079 --> 00:01:01.594
闹钟不响的话 也就意味着有人按下了打盹按钮

00:01:01.594 --> 00:01:05.280
而你的任务是创建第三个函数 叫 alarm (响铃)

00:01:05.280 --> 00:01:09.254
一旦到闹钟该响的时候 这个函数就会被调用

00:01:09.254 --> 00:01:14.054
基本上 这个 alarm 函数得持续不断地调用 beep 函数

00:01:14.055 --> 00:01:19.495
除非 checkAlarm 函数返回的结果不为真

00:01:19.495 --> 00:01:22.094
所以 要实现 alarm 函数

00:01:22.094 --> 00:01:25.664
你需要在这个函数里调用另外两个函数

00:01:25.665 --> 00:01:29.010
我们的 alarm 函数不会返回任何事物

00:01:29.010 --> 00:01:31.490
所以得写 public void alarm

00:01:31.489 --> 00:01:35.539
该函数也没有任何输入参数 所以让这里的括号空着就好

00:01:35.540 --> 00:01:39.205
首先 我们需要检查闹钟是否响着

00:01:39.204 --> 00:01:40.500
要做到这一点 只需调用 checkAlarm 函数

00:01:40.500 --> 00:01:45.269
并将其储存到这个叫 on 的布尔值里

00:01:45.269 --> 00:01:48.435
接下来我们要判断这个变量 on

00:01:48.435 --> 00:01:52.000
也就是 checkAlarm 函数的返回值是否为真

00:01:52.000 --> 00:01:54.834
如果为真 我们就需要调用 beep 函数

00:01:54.834 --> 00:01:56.819
为此我们需要使用 if 模块

00:01:56.819 --> 00:02:00.429
写 if (on) 然后是 beep

00:02:00.430 --> 00:02:03.870
这么写 如果闹钟响着

00:02:03.870 --> 00:02:05.550
就会调用 beep 函数 使闹钟发出一声哔了

00:02:05.549 --> 00:02:10.579
如果闹钟被关了 我们就直接跳过 beep 函数 什么都不会发生

00:02:10.580 --> 00:02:14.060
然而 我们想让哔声不断地响

00:02:14.060 --> 00:02:18.479
所以接下来 我们得再次检查闹钟

00:02:18.479 --> 00:02:22.750
看看 checkAlarm 的返回结果是真还是假 然后更新变量 on

00:02:22.750 --> 00:02:26.004
所以我们再写一次 on = checkAlarm

00:02:26.004 --> 00:02:29.759
之后 我们得再判断一次 on 是否为真

00:02:29.759 --> 00:02:34.155
所以再写个 if 模块 如果判断出 on 为真

00:02:34.155 --> 00:02:38.985
就再次调用 beep 函数 然后再调用 checkAlarm 函数 更新变量 on

00:02:38.985 --> 00:02:41.700
记住 要判断是否有人关掉了闹钟

00:02:41.699 --> 00:02:45.299
或是按下了打盹按钮 我们只能使用 checkAlarm 函数

00:02:45.300 --> 00:02:48.810
因此 每次响铃后 我们都得调用 checkAlarm 函数

00:02:48.810 --> 00:02:52.110
检查是否有人关了闹钟

00:02:52.110 --> 00:02:53.610
每次检查后

00:02:53.610 --> 00:02:56.430
我们需要再添加一个 if 模块

00:02:56.430 --> 00:03:01.284
使闹钟再发出一声哔 然后再检查 不断循环往复

00:03:01.284 --> 00:03:03.409
那这什么时候能到头啊？

00:03:03.409 --> 00:03:07.335
我得重复这个 if 模块多少次呢？

00:03:07.335 --> 00:03:11.010
如果短时间内都没人关掉闹钟呢？

00:03:11.009 --> 00:03:15.689
你能想想我得重复这个 if 模块多少次吗？

00:03:15.689 --> 00:03:19.530
记住 这个函数是要让闹钟一直响铃

00:03:19.530 --> 00:03:24.000
直到有人关了闹钟 否则的话 它会永远响着

