WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:05.005
تذكر دوماً أنه في كلتا حالتي
حلقات "while" وحلقات "for"

00:00:05.105 --> 00:00:09.676
يكون عداد الحلقة ما هو إلا متغير
كأي متغير أخر.

00:00:09.776 --> 00:00:12.112
نسميه عادة "i" من أجل التبسيط،

00:00:12.212 --> 00:00:15.249
لكننا نستطيع دائماً تسميته بأي اسم آخر.

00:00:15.349 --> 00:00:17.684
ينطبق الأمر ذاته
على تعبير زيادة عدّاد الحلقة،

00:00:17.784 --> 00:00:22.089
حيث يمكن أن تكون أي عمليات رياضية يمكن
تطبيقها على عدد صحيح في الوضع الطبيعي.

00:00:22.189 --> 00:00:24.691
دعونا نستعرض
بعض العمليات الرياضية الشائعة.

00:00:24.791 --> 00:00:31.265
أكثرها شيوعاً هي "++i"،
وهي مجرد طريقة مختصرة لكتابة "i=i+1"،

00:00:31.365 --> 00:00:33.500
وتلك العملية الحسابية
تضيف ببساطة 1 إلى "i".

00:00:33.600 --> 00:00:36.703
لنفترض مثلاً أن "i" تساوي 10،

00:00:36.803 --> 00:00:40.641
عندها ستُغير الـ"++i" ذلك إلى 11.

00:00:40.741 --> 00:00:42.376
رأينا أيضاً "--i"،

00:00:42.476 --> 00:00:46.146
وهي مجرد اختصار لـ"i=i-1".

00:00:46.246 --> 00:00:50.384
وهي تطرح واحد من "i".
فإذا كانت "i" تساوي عشرة،

00:00:50.484 --> 00:00:52.920
فسيجعلها هذا تساوي تسعة.

00:00:53.020 --> 00:00:56.924
لاحظ أنه يمكننا العد تصاعدياً أو تنازلياً
بقفزات أكبر من مجرد إضافة أو طرح 1.

00:00:57.024 --> 00:00:59.660
تذكر عندما اعتدنا
على إضافة الأرقام إلى متغير

00:00:59.760 --> 00:01:03.697
عن طريق كتابة "i=i+5" أو أي رقم أخر؟

00:01:03.797 --> 00:01:08.268
يمكن اختصار ذلك بكتابة " =+ i"
متبوعة بذلك الرقم.

00:01:08.368 --> 00:01:10.671
الاثنان يعنيان الشيء نفسه.

00:01:10.771 --> 00:01:15.843
فهو في هذه الحالة يضيف الرقم خمسة إلى "i"،
ويقوم بتحديث "i" إلى قيمتها الجديدة.

00:01:15.943 --> 00:01:17.578
لنفترض أن "i" كانت عشرة،

00:01:17.678 --> 00:01:21.515
بإجراء هذه العملية
سيتم تحديث "i" لتصبح خمسة عشر.

00:01:21.615 --> 00:01:24.718
والأمر ذاته ينسحب
على "i" ناقص أي عدد.

00:01:24.818 --> 00:01:27.855
فإذا قلنا مثلاً "i = i - 6"،

00:01:27.955 --> 00:01:32.059
يمكننا اختصار ذلك بكتابة "i -= 6".

00:01:32.159 --> 00:01:33.727
ما يعني أنه لو كانت "i" تساوي عشرة،

00:01:33.827 --> 00:01:35.162
فسيتم تحديثها لتصبح أربعة.

00:01:35.262 --> 00:01:39.633
ينطبق الأمر نفسه على الضرب والقسمة.

00:01:39.733 --> 00:01:45.706
يمكننا تحديث متغير عن طريق
ضربه برقم هكذا: "i=i×3"

00:01:45.806 --> 00:01:49.810
هذه العملية تضرب "i" بالرقم 3،
وتُحدّث "i" لتتحول إلى قيمتها الجديدة.

00:01:49.910 --> 00:01:54.948
الشكل المختصر للعملية هو "i×=3"،
كما في حالة الزائد والناقص.

00:01:55.048 --> 00:01:59.586
لو كانت "i" تساوي عشرة، فسيتم ضربها
بـ4 وتحديث القيمة لتصبح 30.

00:01:59.686 --> 00:02:01.755
ينطبق الأمر ذاته أيضاً على القسمة.

00:02:01.855 --> 00:02:07.194
يمكننا قسمة متغيرنا على رقم هكذا:
"i = i/2".

00:02:07.294 --> 00:02:13.433
هذه العملية تقسم المتغير على 2،
وتٌحدّث القيمة بناتج تلك الحسبة الجديد.

00:02:13.534 --> 00:02:17.304
اختصار تلك المعادلة هو " i /= 2".

00:02:17.404 --> 00:02:19.806
إذا كانت "i" عشرة في هذه الحال،

00:02:19.907 --> 00:02:23.877
فسيتم قسمتها على 2
وتحديثها بقيمة الناتج، أي خمسة.

00:02:23.977 --> 00:02:28.015
لنلقي نظرة إلى بعض الأمثلة
التي تستخدم هذه الاختصارات.

00:02:28.115 --> 00:02:32.486
لنقل أنني أريد طباعة الأرقام الزوجية فقط
الواقعة بين 2 و 10.

00:02:32.586 --> 00:02:37.457
إذن نريد إنشاء حلقة تبدأ
بـ2 وتقوم بالعد وصولاً إلى عشرة،

00:02:37.558 --> 00:02:42.095
لكن بدلاً من إضافة 1 إلى عداد الحلقة،
فإننا نريد إضافة 2.

00:02:42.196 --> 00:02:44.765
لقد كتبنا هنا دالة اسمها "evenNumbers"

00:02:44.865 --> 00:02:47.835
لا تقبل أي معاملات ولا تُرجع أي قيمة،

00:02:47.935 --> 00:02:50.537
لذلك تُعرف بالعبارة:
public void evenNumbers

00:02:50.637 --> 00:02:53.340
وقوسين فارغين ثم قوسين متعرجين.

00:02:53.440 --> 00:02:59.079
في الداخل لدينا فحسب هذه الحلقة
التي يبدأ عدادها بـ"i=2"،

00:02:59.179 --> 00:03:02.583
وتستمر في العد طالما
أن "i" أقل أو تساوي 10.

00:03:02.683 --> 00:03:06.286
لكن عبارة زيادة عدّاد الحلقة هي "i+=2".

00:03:06.386 --> 00:03:10.424
تضيف هذه التعليمات
2 إلى "i" في كل مرة.

00:03:10.524 --> 00:03:14.428
وعليه فإنه في كل تكرار من تكرارات الحلقة
تزداد "i" بمقدار 2.

00:03:14.528 --> 00:03:17.231
لنتتبع هذا ونرى ما يحدث.

00:03:17.331 --> 00:03:20.367
أولاً تتم تهيئة "i" بالقيمة الأولية 2،

00:03:20.467 --> 00:03:23.837
وبما أن "i" أقل من أو تساوي عشرة،
تكون نتيجة تقييم الشرط هي "true".

00:03:23.937 --> 00:03:30.777
ندخل الحلقة ونستخدم "println"
لطباعة قيمة "i"، وهي 2.

00:03:30.878 --> 00:03:33.447
وصلنا نهاية الحلقة، وعليه نعود للأعلى،

00:03:33.547 --> 00:03:36.016
وأول شيء نقوم به هنا هو زيادة العداد

00:03:36.116 --> 00:03:40.387
حيث نضيف 2 إلى عداد الحلقة "i".

00:03:40.487 --> 00:03:43.757
ولما أن القيمة السابقة كانت 2
تكون القيمة الجديدة هي 4.

00:03:43.857 --> 00:03:46.994
ثم نجري المقارنة، هل "i"
أقل من أو تساوي 10، والجواب "true".

00:03:47.094 --> 00:03:52.232
لذا ندخل الحلقة ونطبع قيمة "i" مجدداً،
والتي ستكون 4.

00:03:52.332 --> 00:03:54.134
نعود للأعلى

00:03:54.234 --> 00:04:00.741
ونضيف 2 إلى عداد الحلقة ليصبح 6،
و6 ما تزال أقل من أو تساوي 10.

00:04:00.841 --> 00:04:02.709
إذن، نطبع الرقم 6.

00:04:02.809 --> 00:04:05.345
نعود للأعلى ونضيف 2،

00:04:05.445 --> 00:04:09.383
ما تزال 8 أقل من أو تساوي 10،
لذا نطبع الرقم \.

00:04:09.483 --> 00:04:17.491
8 تصبح 10، ما تزال 10 أقل من
أو تساوي 10، لذا نطبع الرقم 10.

00:04:17.591 --> 00:04:23.564
وصلنا إلى هنا. فنعود للأعلى،
وذلك يضيف 2إلى عداد الحلقة ليصبح 12.

00:04:23.664 --> 00:04:28.068
لم تعد 12 أقل من أو تساوي عشرة،
إذن فهذه "false"،

00:04:28.168 --> 00:04:30.637
ولن نعود إلى داخل الحلقة بعد ذلك،

00:04:30.737 --> 00:04:32.840
وعليه لن نطبع شيئاً أخر.

00:04:32.940 --> 00:04:39.112
إذن، بعدما غيرنا الزيادة من "++i"
إلى شيء مثل "i+=2"،

00:04:39.213 --> 00:04:43.951
تلاحظ أن "i" تزداد
بمعدل 2 في كل مرة بدلاً من 1.

00:04:44.051 --> 00:04:47.287
يمكننا أيضاً تغيير هذا إلى "i+=3"
على سبيل المثال،

00:04:47.387 --> 00:04:49.556
وبذلك يكون التزايد بمعدل 3 في كل مرة.

00:04:49.656 --> 00:04:53.727
تذكر انه يمكنك أيضاً
استخدام الضرب، مثل "i×=2"،

00:04:53.827 --> 00:04:59.266
ما يعني أن "i" ستُضرب بـ2 في كل مرة،
بدلاً من إضافة 2 إليها.

00:04:59.366 --> 00:05:01.335
هنالك الكثير من الأمور التي يمكنك
القيام بها باستخدام هذه العمليات.

