WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.459
数组就像其它类型的变量

00:00:02.459 --> 00:00:05.515
能够作为参数输入到函数中

00:00:05.514 --> 00:00:07.820
也能作为返回类型被函数返回

00:00:07.820 --> 00:00:10.500
比如 我们想创建一个函数

00:00:10.500 --> 00:00:13.664
计算一个温度数组的平均温度

00:00:13.664 --> 00:00:17.044
把函数命名为 calculateAverage

00:00:17.045 --> 00:00:21.655
函数以一个双精度数组为参数并返回一个双精度数

00:00:21.655 --> 00:00:25.690
而该数即输入数组中所有双精度数的平均值

00:00:25.690 --> 00:00:27.940
函数定义就像这样

00:00:27.940 --> 00:00:30.375
public double calculateAverage

00:00:30.375 --> 00:00:34.304
然后是一个双精度数组参数 叫做 temperatures

00:00:34.304 --> 00:00:36.174
首先我们需要弄清楚

00:00:36.174 --> 00:00:39.250
这个数组里有多少个温度值

00:00:39.250 --> 00:00:41.604
因为这些值被当作参数输入进来了

00:00:41.604 --> 00:00:44.589
所以我们不知道数组里存放了多少元素

00:00:44.590 --> 00:00:46.055
为了明确这一点

00:00:46.054 --> 00:00:49.890
我们可以输入数组名 后面写上关键字 length

00:00:49.890 --> 00:00:52.119
这会计算数组里有多少项

00:00:52.119 --> 00:00:55.239
并将项数存放到变量 size 里

00:00:55.240 --> 00:00:57.219
接下来要计算平均值

00:00:57.219 --> 00:01:00.390
我们要先把数组里的所有项加起来

00:01:00.390 --> 00:01:03.039
为此 我们可以声明这个变量 total

00:01:03.039 --> 00:01:05.230
它是双精度型的 然后将变量初始化为 0

00:01:05.230 --> 00:01:07.359
接着创建一个循环

00:01:07.359 --> 00:01:12.620
循环计数器为 i 从 0 开始计数 直到 i 不再小于 size 为止

00:01:12.620 --> 00:01:14.425
而 size 我们已经算好了

00:01:14.424 --> 00:01:15.694
在循环里

00:01:15.694 --> 00:01:20.974
我们可以将 temperatures [i] 的值不断与变量 total 相加

00:01:20.974 --> 00:01:25.390
注意这里我是怎么用循环计数器当数组索引的

00:01:25.390 --> 00:01:27.650
这是因为循环计数器从 0 开始

00:01:27.650 --> 00:01:30.410
每次都会加 1

00:01:30.409 --> 00:01:32.914
这就意味着在循环里用这个

00:01:32.915 --> 00:01:36.670
我们就可以访问温度数组里的每一项

00:01:36.670 --> 00:01:39.064
由于我们把它加到了变量 total 里

00:01:39.064 --> 00:01:40.340
所以等循环结束

00:01:40.340 --> 00:01:44.210
total 会等于这个温度数组里所有值的总和

00:01:44.209 --> 00:01:45.964
接下来计算平均值

00:01:45.965 --> 00:01:48.020
我们只需让 total 除以 size

00:01:48.019 --> 00:01:50.539
即除以数组元素的数量

00:01:50.540 --> 00:01:54.140
就可以安全地返回出平均值的计算结果

00:01:54.140 --> 00:01:57.844
来作为函数的结果 看起来不错

00:01:57.844 --> 00:02:01.870
我们来跟踪一个双精度数组 以此为例 看看代码能否奏效

00:02:01.870 --> 00:02:06.594
如果 temperatures 等于这个包含着四个不同温度的数组

00:02:06.594 --> 00:02:08.919
那么等我们开始计算长度

00:02:08.919 --> 00:02:13.434
它就会将 size 设为 4 因为这里有四个不同的值

00:02:13.435 --> 00:02:17.650
下一步是将 total 初始化为 0 然后进入循环

00:02:17.650 --> 00:02:20.650
画出这个表格 以便跟踪循环计数器、

00:02:20.650 --> 00:02:22.710
数组里被访问的对象

00:02:22.710 --> 00:02:25.525
以及每一步更新出来的 total 值

00:02:25.525 --> 00:02:28.314
首先是把 i 初始化为 0

00:02:28.314 --> 00:02:30.259
于是 i 变为 0

00:02:30.259 --> 00:02:32.289
由于 i 小于 size

00:02:32.289 --> 00:02:34.150
也就是小于 4

00:02:34.150 --> 00:02:37.795
所以进入循环 执行这个语句

00:02:37.794 --> 00:02:39.234
在循环里

00:02:39.235 --> 00:02:42.090
我们会试着访问 temperatures [i]

00:02:42.090 --> 00:02:46.085
由于 i 为 0 所以我们要访问的是 temperatures [0]

00:02:46.085 --> 00:02:50.900
也就是数组里的第一项 该项为 75

00:02:50.900 --> 00:02:52.194
一旦获取了这个值

00:02:52.194 --> 00:02:56.060
我们就把它和 total 相加 因为我们这里用的是加号等号

00:02:56.060 --> 00:03:02.604
而 total 初始值为 0 所以我们给 0 加 75 后 total 就变为 75

00:03:02.604 --> 00:03:09.414
然后就到了循环的右括号 于是回到这上面来 给 i 增量

00:03:09.414 --> 00:03:11.935
等我们执行完 i 增量指令

00:03:11.935 --> 00:03:15.789
i 就会加 1 从 0 变为 1

00:03:15.789 --> 00:03:20.324
接下来就是判断 i 是否小于 size

00:03:20.324 --> 00:03:25.504
i 为 1 而 size 为 4 所以我们能够进入循环

00:03:25.504 --> 00:03:28.325
在循环里 访问 temperatures [i]

00:03:28.325 --> 00:03:29.930
现在 i 为 1

00:03:29.930 --> 00:03:33.500
所以 temperatures [i] 等于 73

00:03:33.500 --> 00:03:37.264
也就是我们访问了 73

00:03:37.264 --> 00:03:41.569
然后用加号等号把这个  temperatures [i] 和 total 相加

00:03:41.569 --> 00:03:47.849
也就是 73 加 75 total 更新为 148

00:03:47.849 --> 00:03:51.034
于是我们又一次到了右括号 再回来

00:03:51.034 --> 00:03:54.935
给 i 加 1 使其从 1 变为 2

00:03:54.935 --> 00:03:58.354
然后再次判断 i 是否小于 size

00:03:58.354 --> 00:04:02.814
size 为 4 所以条件仍为真 所以我们再进入循环

00:04:02.814 --> 00:04:05.919
 temperatures [i] 这个时候变成  temperatures [2]

00:04:05.919 --> 00:04:09.979
而这里索引 2 关联的项为 72

00:04:09.979 --> 00:04:11.979
将其与 total 相加

00:04:11.979 --> 00:04:16.289
将 total 值从 148 更新为 220

00:04:16.290 --> 00:04:19.250
到达右括号 再回来

00:04:19.250 --> 00:04:23.540
将 i 从 2 增加为 3 并与 size 进行比较

00:04:23.540 --> 00:04:27.845
3 仍小于 4 所以进入循环

00:04:27.845 --> 00:04:29.895
访问 temperatures [3]

00:04:29.894 --> 00:04:31.564
也就是 80

00:04:31.564 --> 00:04:36.540
将其与 total 相加 使 total 从 220 变为 300

00:04:36.540 --> 00:04:38.240
然后是最后一次迭代

00:04:38.240 --> 00:04:39.650
到了右括号

00:04:39.649 --> 00:04:41.246
回来 给 i 增量

00:04:41.247 --> 00:04:42.715
使其变为 4

00:04:42.714 --> 00:04:46.639
现在 4 不再小于 size 所以我们不进入循环

00:04:46.639 --> 00:04:52.599
直接跳到这下面的右括号

00:04:52.600 --> 00:04:54.064
现在我们不再进行循环了

00:04:54.064 --> 00:04:58.079
那就来计算平均值 让 total 除以 size

00:04:58.079 --> 00:05:05.375
total 最后是 300 而 size一直都为 4 所以 300 除以 4 等于 75

00:05:05.375 --> 00:05:07.519
而这个值会被赋给变量 average

00:05:07.519 --> 00:05:12.049
由此我们可以安全地返回该值 作为函数的结果

00:05:12.050 --> 00:05:16.095
知道数组的大小在很多时候都很方便

00:05:16.095 --> 00:05:19.860
我们已经知道怎么拿它当循环上限用

00:05:19.860 --> 00:05:24.085
但如果你忽略了数组的大小 可能会出现更严重的问题

00:05:24.084 --> 00:05:27.370
假设我们要访问这个数组里的值

00:05:27.370 --> 00:05:29.485
我们知道这个数组有 4 个值

00:05:29.485 --> 00:05:32.949
也就是说 索引从 0 开始一直增加到 3

00:05:32.949 --> 00:05:35.050
我们已经知道要怎么用关键字 length

00:05:35.050 --> 00:05:38.290
来检测数组项数了

00:05:38.290 --> 00:05:41.110
如果执行这个语句 对该数组进行操作

00:05:41.110 --> 00:05:45.620
length 就会计算出这里有四项 于是 size 变为 4

00:05:45.620 --> 00:05:51.625
但假设我们忽略了这个变量 size  试图用索引 10 来访问数组项

00:05:51.625 --> 00:05:53.769
而显然 数组里并没有这一项

00:05:53.769 --> 00:05:55.495
一旦你运行这个程序

00:05:55.495 --> 00:06:00.290
Java 就会提示出错 指出该索引不在数组范围内

00:06:00.290 --> 00:06:02.545
不过我们现在有了变量 size

00:06:02.545 --> 00:06:05.980
我们就知道了数组里有多少项

00:06:05.980 --> 00:06:09.895
加一个像这样简单的 if 条件给这个 println 语句

00:06:09.894 --> 00:06:12.310
我们就可以判断要访问的索引

00:06:12.310 --> 00:06:15.819
是否小于数组大小

00:06:15.819 --> 00:06:18.404
如果是像这样的数组

00:06:18.404 --> 00:06:23.614
这个 if 条件就会判为假 因此不会执行语句

00:06:23.615 --> 00:06:26.949
然而 如果有一个超过十项的数组

00:06:26.949 --> 00:06:29.379
那么这个 if 条件就会判为真

00:06:29.379 --> 00:06:33.870
语句会如常输出第十项

00:06:33.870 --> 00:06:36.535
所以要时刻注意数组范围

00:06:36.535 --> 00:06:38.927
处理数组 你要做的第一件事

00:06:38.927 --> 00:06:41.319
就是弄清楚里面包含了多少项

00:06:41.319 --> 00:06:43.420
在访问任一项之前 要记得检查

00:06:43.420 --> 00:06:47.000
该项是否在数组范围内

