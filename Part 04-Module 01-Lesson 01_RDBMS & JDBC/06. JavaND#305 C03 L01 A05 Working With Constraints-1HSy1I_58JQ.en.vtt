WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.980
You might have noticed that the Orders table is very limited in its scope.

00:00:04.980 --> 00:00:08.339
It can hold only one type of item.

00:00:08.339 --> 00:00:11.535
We have two columns that describe the item.

00:00:11.535 --> 00:00:13.070
One is the item name,

00:00:13.070 --> 00:00:15.480
and then the other is the number of

00:00:15.480 --> 00:00:21.240
item count which describes the count of that item in that order.

00:00:21.239 --> 00:00:25.739
So which means, you can have only one type of item in an order.

00:00:25.739 --> 00:00:28.979
It is unreasonable to expect the customer to place

00:00:28.980 --> 00:00:32.579
one order for each type of item that they want to buy.

00:00:32.579 --> 00:00:34.379
How do we solve this?

00:00:34.380 --> 00:00:37.700
We learned that in relational databases rows of

00:00:37.700 --> 00:00:41.645
multiple tables can be made related using foreign keys.

00:00:41.645 --> 00:00:46.685
Let's use that feature to support orders with multiple types of items.

00:00:46.685 --> 00:00:51.329
We're going to create a table to hold items for the order.

00:00:55.340 --> 00:00:59.815
All right. I've created a table here called Order Item.

00:00:59.814 --> 00:01:04.849
The important thing to note here is that the order ID in

00:01:04.849 --> 00:01:12.559
the order item table is a foreign key to the order ID in the orders table.

00:01:12.560 --> 00:01:19.159
A foreign key is a column in one table that refers to the primary key in another table.

00:01:19.159 --> 00:01:23.090
The table containing the foreign key is called the child table,

00:01:23.090 --> 00:01:26.855
and the table containing the candidate key is called the parent table.

00:01:26.855 --> 00:01:29.585
The foreign key constraint also prevents

00:01:29.584 --> 00:01:33.889
invalid data from being inserted into the foreign key column,

00:01:33.890 --> 00:01:38.450
because it has to be one of the values contained in the table it points to.

00:01:38.450 --> 00:01:41.630
Now, for every type of item in the order,

00:01:41.629 --> 00:01:46.295
a row can be inserted in the order item table referring the order ID,

00:01:46.295 --> 00:01:50.780
thus supporting orders with multiple types of items.

00:01:50.780 --> 00:01:54.515
Since we don't store the items in the order table anymore,

00:01:54.515 --> 00:01:57.090
let's drop those columns.

00:02:03.290 --> 00:02:06.900
I use the same ALTER TABLE statement,

00:02:06.900 --> 00:02:09.974
the orders table instead of add column,

00:02:09.974 --> 00:02:13.719
I'm specifying DROP COLUMN which actually deletes the column.

00:02:13.719 --> 00:02:18.830
So we are going to remove the item name and the item count.

00:02:25.039 --> 00:02:30.859
Sorry, I had two semi-colons there. Let's try it again.

00:02:38.840 --> 00:02:42.585
Looks like the item count got already deleted.

00:02:42.585 --> 00:02:45.879
So let's take a look at the orders table.

00:02:48.050 --> 00:02:52.505
Yes, item name and item count already got deleted.

00:02:52.504 --> 00:02:58.379
So let's take a look at the Order Item table that we have created.

00:03:01.340 --> 00:03:07.569
It has all the columns that we included in the CREATE TABLE statement.

00:03:07.569 --> 00:03:10.099
This is how you do foreign

00:03:10.099 --> 00:03:14.909
key relationships between multiple tables in a relational database.

