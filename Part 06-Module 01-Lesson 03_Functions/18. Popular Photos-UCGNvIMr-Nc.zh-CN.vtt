WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.115
在 likePhoto 代码中

00:00:02.115 --> 00:00:03.885
可以增加用户评论

00:00:03.884 --> 00:00:06.240
在线点赞照片

00:00:06.240 --> 00:00:10.085
你可能注意到 我们知道

00:00:10.085 --> 00:00:14.880
输入照片中 currentLikes 的数量作为第一个实参 这时函数才会运行

00:00:14.880 --> 00:00:18.045
例如我们知道一张照片包括 10 个 currentLikes

00:00:18.045 --> 00:00:23.710
我们在函数调用 likePhoto 中输入 10 作为第一个实参

00:00:23.710 --> 00:00:27.664
这样与第一个参数 currentLikes 相对应

00:00:27.664 --> 00:00:30.629
第二个实参是字符串 comment

00:00:30.629 --> 00:00:32.670
第三个是布尔值

00:00:32.670 --> 00:00:36.125
与布尔参数相对应

00:00:36.125 --> 00:00:38.280
如果这个实参为真

00:00:38.280 --> 00:00:42.115
我们会对 currentLikes 数量增加 1

00:00:42.115 --> 00:00:45.420
在这个案例中 由于布尔值设为真

00:00:45.420 --> 00:00:49.125
我们把 currentLikes 从 10 增加到 11

00:00:49.125 --> 00:00:51.645
在这个函数调用中 我们输出评论 great photo !

00:00:51.645 --> 00:00:56.475
和增加后的点赞数 11

00:00:56.475 --> 00:01:00.760
但是我们怎么知道照片最初点赞数是 10 呢

00:01:00.759 --> 00:01:03.750
考虑一下如何在人们发布照片后

00:01:03.750 --> 00:01:07.844
自动记录照片的点赞数

00:01:07.844 --> 00:01:10.504
发出某张照片后

00:01:10.504 --> 00:01:14.594
点赞数为 0 也没有评论

00:01:14.594 --> 00:01:17.594
如果少数人看到后点赞或评论

00:01:17.594 --> 00:01:21.834
我们利用函数 likePhoto 记录数量

00:01:21.834 --> 00:01:26.129
第一个函数调用可能来自给照片点赞的人

00:01:26.129 --> 00:01:28.789
我们以这三个实参作为开始

00:01:28.790 --> 00:01:30.750
由于没有人点赞 整数值 0

00:01:30.750 --> 00:01:35.310
相当于参数 currentLikes

00:01:35.310 --> 00:01:36.719
字符串 comment 可以表示 “Nice color”

00:01:36.719 --> 00:01:42.334
以及布尔参数中的值 true

00:01:42.334 --> 00:01:46.939
由于布尔参数的值设为真

00:01:46.939 --> 00:01:50.370
这可以增加这张照片的 currentLikes 数量

00:01:50.370 --> 00:01:52.064
在这个函数调用中

00:01:52.064 --> 00:01:53.420
我们输出评论 “Nice color”

00:01:53.420 --> 00:01:57.375
以及增加后的点赞数 1

00:01:57.375 --> 00:01:59.909
假如另一个人看到

00:01:59.909 --> 00:02:02.864
使用另外一个函数调用点赞照片

00:02:02.864 --> 00:02:06.045
这次我们知道第一次函数调用后

00:02:06.045 --> 00:02:09.699
我们的 currentLikes 从 0 增加到 1

00:02:09.699 --> 00:02:11.069
为了反映这一点

00:02:11.069 --> 00:02:15.264
第二个函数调用将 1 作为第一个实参

00:02:15.264 --> 00:02:19.389
此处 currentLikes 实参为 1

00:02:19.389 --> 00:02:22.084
字符串为 "I like this."

00:02:22.085 --> 00:02:23.727
布尔值为真

00:02:23.727 --> 00:02:27.115
表示这个照片第二次被点赞

00:02:27.115 --> 00:02:29.265
在这个函数调用中

00:02:29.264 --> 00:02:32.634
我们输出评论和当前点赞数

00:02:32.634 --> 00:02:35.064
点赞数增加到 2

00:02:35.064 --> 00:02:39.759
但是如果第一个人改变主意不点赞 怎么办呢？

00:02:39.759 --> 00:02:44.429
他们仍然评论 但是布尔值为假

00:02:44.430 --> 00:02:46.694
因此 第一个函数调用仍然相同

00:02:46.694 --> 00:02:52.019
但是点赞照片的布尔实参设为假

00:02:52.020 --> 00:02:54.770
也就是说 currentLikes 不再增加

00:02:54.770 --> 00:02:59.915
所以最初输入为 0 的 currentLikes 仍然是 0

00:02:59.914 --> 00:03:02.034
不再增加到 1

00:03:02.034 --> 00:03:04.875
在这个函数调用中 我们输出相同的评论

00:03:04.875 --> 00:03:07.969
但是这次点赞数为 0

00:03:07.969 --> 00:03:12.044
为了在第二个函数调用中完全反映这个变化

00:03:12.044 --> 00:03:14.129
我们要改变 currentLikes 的值

00:03:14.129 --> 00:03:18.299
在这个调用中实参从 0 增加到 1

00:03:18.300 --> 00:03:21.600
现在这些函数调用得到更新 并且是正确的

00:03:21.599 --> 00:03:25.109
我们第一个调用留下评论 但不增加点赞数

00:03:25.110 --> 00:03:28.965
第二个调用把点赞数增加到 1

00:03:28.965 --> 00:03:31.539
现在我们看一下打印结果

00:03:31.539 --> 00:03:34.754
在第二个函数调用中直接写入 currentLikes 正确数量

00:03:34.754 --> 00:03:37.604
0 或 1

00:03:37.604 --> 00:03:42.419
如果我们想让程序记录 currentLikes 呢？

00:03:42.419 --> 00:03:44.789
那样我们可以更轻松地自动获取

00:03:44.789 --> 00:03:47.685
并记录 currentLikes 数量

00:03:47.685 --> 00:03:52.875
目前为止这些信息仅用于 likePhoto 函数定义中

00:03:52.875 --> 00:03:56.789
照片的点赞数量可以根据

00:03:56.789 --> 00:04:01.629
likePhoto 函数定义代码内部的变量得到记录

00:04:01.629 --> 00:04:06.704
如果某人点赞 我们在这里改变值 打印结果

00:04:06.705 --> 00:04:10.500
如果在定义外面无法获得这个值

00:04:10.500 --> 00:04:13.104
我们也不能在单独的程序里使用它

00:04:13.104 --> 00:04:14.369
类似于我们实际上调用

00:04:14.370 --> 00:04:18.975
likePhoto 函数 并利用值跟踪 currentLikes

00:04:18.975 --> 00:04:24.217
为了获取并利用函数定义外面 currentLikes 的值

00:04:24.216 --> 00:04:26.310
我们要改变定义

00:04:26.310 --> 00:04:29.250
除了计算点赞数并打印结果

00:04:29.250 --> 00:04:34.139
还可以返回点赞的输出数据 作为返回值

00:04:34.139 --> 00:04:37.709
这类似于我们把外部信息输入

00:04:37.709 --> 00:04:42.269
函数调用中 通过把参数包含在函数定义中

00:04:42.269 --> 00:04:44.039
除了输入

00:04:44.040 --> 00:04:49.080
我们这次还要输出 并且在定义外部获得

00:04:49.079 --> 00:04:51.719
我们来看一个例子 更清楚地了解一下

00:04:51.720 --> 00:04:55.000
所以让我们逐步看一下返回值

