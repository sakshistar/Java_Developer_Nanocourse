WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.024
到底什么是函数呢？

00:00:03.024 --> 00:00:07.605
我们已经提到函数对代码块进行分组 执行某个特定任务

00:00:07.605 --> 00:00:11.050
实际上我们在整个课程中使用函数

00:00:11.050 --> 00:00:14.350
每当使用 System.out.println 输出行时

00:00:14.349 --> 00:00:16.800
你已经调用了函数 println

00:00:16.800 --> 00:00:19.199
包含在 Java 函数中

00:00:19.199 --> 00:00:21.809
调用函数指的是

00:00:21.809 --> 00:00:25.134
根据名称运行 并在程序中利用函数

00:00:25.135 --> 00:00:28.875
并且你在一个程序中想要多次调用函数

00:00:28.875 --> 00:00:32.195
考虑到我们编写多行代码 println 时

00:00:32.195 --> 00:00:34.658
每个代码都是函数调用

00:00:34.658 --> 00:00:36.390
并且每次都调用函数

00:00:36.390 --> 00:00:39.899
Java 会识别函数名字

00:00:39.899 --> 00:00:44.219
然后查看相同函数定义内部的代码

00:00:44.219 --> 00:00:46.589
我们接下来回深入了解函数调用

00:00:46.590 --> 00:00:49.260
与函数定义的不同

00:00:49.259 --> 00:00:51.949
函数定义包括函数名字

00:00:51.950 --> 00:00:55.580
及其包含的所有代码

00:00:55.579 --> 00:00:56.729
当你调用函数时

00:00:56.729 --> 00:00:58.785
例如 System.out.println ();

00:00:58.786 --> 00:01:03.710
相当于执行 println 定义的所有代码

00:01:03.710 --> 00:01:06.540
所以 当你反复调用 println 时

00:01:06.540 --> 00:01:10.960
这些调用都指代同一个函数定义

00:01:10.959 --> 00:01:13.334
Java 会看到这样的调用 然后

00:01:13.334 --> 00:01:16.969
查看定义 执行这个函数中的代码

00:01:16.969 --> 00:01:19.530
所以我们来看一下这个定义

00:01:19.530 --> 00:01:22.864
这是输出行的函数定义

00:01:22.864 --> 00:01:27.219
其中包括多行代码 用来将信息显示在屏幕上

00:01:27.219 --> 00:01:30.329
实际上这只是包含 println 的一部分代码

00:01:30.329 --> 00:01:33.894
你可以看到这个定义开头是这些单词

00:01:33.894 --> 00:01:38.114
public void 后面是函数名字 println

00:01:38.114 --> 00:01:41.009
然后是我们输入的 string (字符串)

00:01:41.010 --> 00:01:45.300
利用括号将 println 执行的所有代码分组

00:01:45.299 --> 00:01:49.590
这个代码块非常大 也特别复杂

00:01:49.590 --> 00:01:54.040
这里我们看到一个 if 语句 检查字符串 x 是否等于 null

00:01:54.040 --> 00:01:56.630
而 null 相当于不存在

00:01:56.629 --> 00:01:59.494
所以它检查是否存在可输出的字符串

00:01:59.495 --> 00:02:02.810
然后许多代码可以正确地显示字符串

00:02:02.810 --> 00:02:04.975
其中甚至使用了很多函数

00:02:04.974 --> 00:02:08.844
例如这个写函数可以把字符串显示在屏幕上

00:02:08.844 --> 00:02:11.009
设想一下 如果我们每次都写入这个代码

00:02:11.009 --> 00:02:14.609
用来显示信息

00:02:14.610 --> 00:02:16.915
幸好因为 println 是一个函数

00:02:16.914 --> 00:02:20.310
我们可以多次使用所有代码

00:02:20.310 --> 00:02:23.879
通过含有函数调用来指代函数名称

00:02:23.879 --> 00:02:25.460
所以像这样的函数调用

00:02:25.460 --> 00:02:27.750
我们可以输出内容到屏幕上

00:02:27.750 --> 00:02:31.000
而不需要知道所运行的具体代码

