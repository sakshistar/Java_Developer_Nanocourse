WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.640
So, we've been working on a karaoke program and

00:00:02.640 --> 00:00:05.245
can have it print out songs and choruses pretty easily.

00:00:05.245 --> 00:00:06.990
But now, we want to improve our code by

00:00:06.990 --> 00:00:09.724
including a greeting at the beginning of each song.

00:00:09.724 --> 00:00:11.294
When musicians are on tour,

00:00:11.294 --> 00:00:14.585
they'll often say hello to each city or place they perform in.

00:00:14.585 --> 00:00:17.484
They'll say, Hello New York or Hello Mexico City.

00:00:17.484 --> 00:00:19.750
And that's what we want our greeting function to do.

00:00:19.750 --> 00:00:24.390
So, let's write a greeting function that can say hello to unique locations.

00:00:24.390 --> 00:00:29.070
We want to customize our code to greet each place individually by their locations name.

00:00:29.070 --> 00:00:31.625
We can start by writing a function called greeting that

00:00:31.625 --> 00:00:34.914
prints out hello and then the name of a location, like New York.

00:00:34.914 --> 00:00:38.890
But we'll want to be able to change this location to greet wherever we are.

00:00:38.890 --> 00:00:41.280
So far, we've just seen functions work using

00:00:41.280 --> 00:00:44.515
internal information like variables or values we type in.

00:00:44.515 --> 00:00:46.259
But this time, we want to be able to give

00:00:46.259 --> 00:00:48.689
our function information from the outside world,

00:00:48.689 --> 00:00:50.579
outside of this definition.

00:00:50.579 --> 00:00:54.314
We want to give it, the location of a performance and have it respond.

00:00:54.314 --> 00:00:59.189
We can input data like a location into our function by using something called parameters.

00:00:59.189 --> 00:01:01.530
Parameters are variables that we can place

00:01:01.530 --> 00:01:04.034
inside the parentheses of our function definition,

00:01:04.034 --> 00:01:05.685
that our function can then use.

00:01:05.685 --> 00:01:07.329
For our custom greeting,

00:01:07.328 --> 00:01:12.014
we want to be able to input and use a string variable that tells us our location.

00:01:12.015 --> 00:01:13.784
To access this string,

00:01:13.784 --> 00:01:18.265
we'll need to ask for it by including it as a parameter inside these parentheses.

00:01:18.265 --> 00:01:22.170
And now, we can use this variable location inside our function code.

00:01:22.170 --> 00:01:26.100
This is like when we declared a variable inside our function and could use it.

00:01:26.099 --> 00:01:29.729
The main difference is that any variables we've declared inside our functions

00:01:29.730 --> 00:01:33.755
can only be accessed and used inside that function and nowhere else.

00:01:33.754 --> 00:01:36.119
And this parameter location is referring to

00:01:36.120 --> 00:01:39.484
information that can exist outside the scope of our function.

00:01:39.484 --> 00:01:42.730
So now, we can include this location string in our greeting message.

00:01:42.730 --> 00:01:44.010
And instead of saying Hello,

00:01:44.010 --> 00:01:45.920
New York, we can say Hello,

00:01:45.920 --> 00:01:48.359
plus location and use string concatenation

00:01:48.359 --> 00:01:51.554
to print out a unique message for each location.

00:01:51.555 --> 00:01:54.270
But now, when I call this function greeting,

00:01:54.269 --> 00:01:57.209
I can't just type greeting with empty parentheses and that's because

00:01:57.209 --> 00:02:00.599
this function expects a string location as input.

00:02:00.599 --> 00:02:01.814
So, in my function call,

00:02:01.814 --> 00:02:03.539
I have to put in a string like

00:02:03.540 --> 00:02:07.935
the location New York and the specific input is called an argument.

00:02:07.935 --> 00:02:13.013
So, parameters are the variables inside a function definition, like string location.

00:02:13.013 --> 00:02:17.355
And arguments are the actual values that are passed into our function when we call it,

00:02:17.354 --> 00:02:20.159
like New York, which our function needs to work.

00:02:20.159 --> 00:02:21.790
When we call our function,

00:02:21.790 --> 00:02:26.064
our argument has to match the type of parameter we expect in our function.

00:02:26.064 --> 00:02:30.090
So in this case, New York has to be a string.

00:02:30.090 --> 00:02:33.789
Now, if I put in the string New York as the argument in our function call,

00:02:33.789 --> 00:02:38.759
Java will look at our function definition and assign this value to our string location,

00:02:38.759 --> 00:02:41.264
and our function call will print out a greeting that's

00:02:41.264 --> 00:02:44.009
unique to this location, Hello, New York.

00:02:44.009 --> 00:02:48.044
Great. And I can repeat this code and input any other location I want.

00:02:48.044 --> 00:02:49.709
Our greeting function will accept

00:02:49.710 --> 00:02:53.360
any string input and string location will be assigned its value.

00:02:53.360 --> 00:02:56.663
So, if I call greeting and passing the string Mexico City,

00:02:56.663 --> 00:02:59.875
the print output will be, Hello, Mexico City.

00:02:59.875 --> 00:03:02.129
Now we can call our greeting function and pass in

00:03:02.129 --> 00:03:04.789
different string locations to it every time.

00:03:04.789 --> 00:03:06.625
This is just like we've been doing with println,

00:03:06.625 --> 00:03:09.034
by passing it different strings each time.

00:03:09.034 --> 00:03:13.000
In our next quiz, we'll see more examples of how parameters can be useful.

