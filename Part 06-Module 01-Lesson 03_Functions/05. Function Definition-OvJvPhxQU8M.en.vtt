WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.679
Let's define our own function to help us program a karaoke machine.

00:00:04.679 --> 00:00:06.945
We want to print out the lines of a song,

00:00:06.945 --> 00:00:08.910
and group together the lines for the chorus in

00:00:08.910 --> 00:00:11.400
a function so that we can easily repeat it.

00:00:11.400 --> 00:00:14.220
Here's the print code for the chorus of the Blondie song,

00:00:14.220 --> 00:00:16.350
Heart of Glass, that we wanted to repeat.

00:00:16.350 --> 00:00:20.370
Now let's actually write out the function definition for printing this chorus.

00:00:20.370 --> 00:00:22.170
We'll write the words public,

00:00:22.170 --> 00:00:25.170
void, and then the name of our function.

00:00:25.170 --> 00:00:27.285
The name of a function can be anything,

00:00:27.285 --> 00:00:30.149
and we'll call this one chorus with empty parentheses.

00:00:30.149 --> 00:00:33.239
And finally we'll surround the code we want to execute,

00:00:33.240 --> 00:00:35.850
these four print lines in curly braces,

00:00:35.850 --> 00:00:39.170
and this completes our function definition for chorus.

00:00:39.170 --> 00:00:41.190
The start of this function looks like the start of

00:00:41.189 --> 00:00:45.049
the print line function we've seen before with the words public and void.

00:00:45.049 --> 00:00:47.504
These starting words may seem a bit confusing at first,

00:00:47.505 --> 00:00:50.405
so let's go through what we just wrote piece by piece.

00:00:50.405 --> 00:00:52.395
The first thing we wrote was public.

00:00:52.395 --> 00:00:56.142
Java functions always start out with a word like public or private,

00:00:56.142 --> 00:00:58.480
and this is called an access modifier.

00:00:58.479 --> 00:01:02.344
And public tells our computer that anyone can access this function.

00:01:02.344 --> 00:01:04.799
We'll hear more about this later when we talk about objects.

00:01:04.799 --> 00:01:08.105
So for now, just know that it's included at the start of a function.

00:01:08.105 --> 00:01:10.230
The next thing we wrote was the word void,

00:01:10.230 --> 00:01:12.454
and this is something called the return type.

00:01:12.454 --> 00:01:16.739
And void just means that this function is not returning any data.

00:01:16.739 --> 00:01:18.869
Some functions perform calculations,

00:01:18.870 --> 00:01:23.245
and we'll want them to return a final result or a final piece of data to us.

00:01:23.245 --> 00:01:25.814
And then this word void will change to something else.

00:01:25.814 --> 00:01:29.325
But for functions that simply perform actions like printing text,

00:01:29.325 --> 00:01:31.005
we aren't forming a new result,

00:01:31.004 --> 00:01:33.179
and we don't expect to return anything.

00:01:33.180 --> 00:01:35.215
And we'll learn more about return type soon,

00:01:35.215 --> 00:01:37.005
so don't worry about this too much.

00:01:37.004 --> 00:01:39.644
After void, we just have the name of our function,

00:01:39.644 --> 00:01:42.414
chorus followed by empty parentheses,

00:01:42.415 --> 00:01:45.265
which is how we can refer to and call our function.

00:01:45.265 --> 00:01:48.435
And finally we have the block of code that our function contains.

00:01:48.435 --> 00:01:52.525
It contains the printed lyrics code by surrounding it with curly braces.

00:01:52.525 --> 00:01:56.690
This is similar to how our if statements contain code inside braces.

00:01:56.689 --> 00:01:59.230
Now every time this function chorus is called,

00:01:59.230 --> 00:02:01.655
this block of code will be executed.

00:02:01.655 --> 00:02:04.980
And these are all the components of a function definition.

00:02:04.980 --> 00:02:07.275
Our next step after defining this function,

00:02:07.275 --> 00:02:10.080
will be to use it by calling the function which we'll see next.

