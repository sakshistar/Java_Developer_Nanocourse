WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.490
Let's write a function that randomly rolls

00:00:02.490 --> 00:00:07.140
a six-sided dice and returns a value for that roll between one and six.

00:00:07.139 --> 00:00:11.730
We know that it will return one of these whole numbers which are integers.

00:00:11.730 --> 00:00:16.073
So let's start by writing our function definition with the return type of int,

00:00:16.073 --> 00:00:18.225
and name our function to rollDice.

00:00:18.225 --> 00:00:20.850
And this return type means that we expect

00:00:20.850 --> 00:00:24.870
a return statement in our function that returns an int as output.

00:00:24.870 --> 00:00:29.435
Now, let's start writing the code to generate this random int between one and six.

00:00:29.434 --> 00:00:34.335
We can use Math.random to generate a decimal number that falls between zero and one,

00:00:34.335 --> 00:00:36.149
not including one exactly.

00:00:36.149 --> 00:00:40.320
But how do we get this value to be an integer between one and six?

00:00:40.320 --> 00:00:43.079
Well, we know how to create a number between zero and

00:00:43.079 --> 00:00:48.530
9.999 from before by multiplying this random number by 10.

00:00:48.530 --> 00:00:53.875
So let's use a similar strategy to change this range to be between one and six.

00:00:53.875 --> 00:00:56.774
Let's first focus on our total range.

00:00:56.774 --> 00:01:01.375
When we wanted to create a range that had 10 total numbers in it, zero through nine,

00:01:01.375 --> 00:01:03.762
remember to count zero as an option too,

00:01:03.762 --> 00:01:07.109
we multiplied a random number by 10.

00:01:07.109 --> 00:01:09.974
So 10 numbers multiplied by 10.

00:01:09.974 --> 00:01:14.839
This time, you'll want a range that has six numbers in it, one through six.

00:01:14.840 --> 00:01:18.900
So you'll want to multiply by six to get this correct range.

00:01:18.900 --> 00:01:21.600
So let's multiply a random number by six,

00:01:21.599 --> 00:01:26.069
then the random number here will be between zero and nearly six.

00:01:26.069 --> 00:01:28.349
But that's not quite what we wanted.

00:01:28.349 --> 00:01:32.399
Because now we've just expanded our range from zero to almost one,

00:01:32.400 --> 00:01:34.365
to zero to almost six.

00:01:34.364 --> 00:01:38.894
And we want the minimum value of our range to be one, not zero.

00:01:38.894 --> 00:01:43.349
And we want our highest value to be merely seven, not nearly six.

00:01:43.349 --> 00:01:46.094
So that later, when we cast this value to an int,

00:01:46.094 --> 00:01:48.209
a maximum value close to seven,

00:01:48.209 --> 00:01:54.759
something like 6.999, will be cast to a max integer value of six.

00:01:54.760 --> 00:01:58.570
So we need to shift this whole range up by one.

00:01:58.569 --> 00:02:01.574
We can do that by adding one to our random number,

00:02:01.575 --> 00:02:05.359
and our adding one shifts this range into the correct place,

00:02:05.359 --> 00:02:07.739
one through almost seven.

00:02:07.739 --> 00:02:10.560
The next thing we need to do is our casting step to

00:02:10.560 --> 00:02:14.235
get the random integer we want without any decimal place value.

00:02:14.235 --> 00:02:18.135
And we can cast this number by putting the variable type we want,

00:02:18.134 --> 00:02:23.444
which is an int, in parentheses right before the value we want to change, random number.

00:02:23.444 --> 00:02:26.824
And that's the same as a value to a variable, randomInt.

00:02:26.824 --> 00:02:31.319
And again, even if the double random number value is close to seven,

00:02:31.319 --> 00:02:35.444
something like 6.998, when this is cast to an int,

00:02:35.444 --> 00:02:40.324
it will turn into six because the decimal portion is ignored entirely.

00:02:40.324 --> 00:02:42.000
So now, we have our correct range,

00:02:42.000 --> 00:02:44.259
one through six, all integers.

00:02:44.259 --> 00:02:45.919
And to return this value,

00:02:45.919 --> 00:02:49.009
there is one more step, a return statement.

00:02:49.009 --> 00:02:53.370
And for that, we actually say return and then the value we want to return.

00:02:53.370 --> 00:02:55.969
In this case, our variable, randomInt.

00:02:55.969 --> 00:02:59.909
Great. Now we have a return type and a return statement,

00:02:59.909 --> 00:03:04.375
and we can call this function and get a random int as output.

00:03:04.375 --> 00:03:07.289
So we wrote a function definition for rollDice.

00:03:07.289 --> 00:03:10.719
Now let's call it twice and store the output.

00:03:10.719 --> 00:03:14.849
The output should be a randomly generated integer that's between one and six.

00:03:14.849 --> 00:03:18.995
So let's store these as int variables, roll1 and roll2.

00:03:18.995 --> 00:03:24.004
Let's also include printing code that will print out the value of roll1 and roll2,

00:03:24.004 --> 00:03:27.469
and the print output might look something like this.

00:03:27.469 --> 00:03:29.389
Your first roll will be at two,

00:03:29.389 --> 00:03:32.229
and the second roll is a five.

00:03:32.229 --> 00:03:35.849
So even though these two rolls were assigned to the same function call,

00:03:35.849 --> 00:03:37.620
each time we call this function,

00:03:37.620 --> 00:03:41.664
a new random integer between one and six will be generated.

00:03:41.664 --> 00:03:44.405
And that's why these have different roll values.

00:03:44.405 --> 00:03:46.094
And if we ran this code again,

00:03:46.094 --> 00:03:49.439
new random values will be generated.

00:03:49.439 --> 00:03:54.000
So good job. We finished writing a program that can simulate rolling dice.

