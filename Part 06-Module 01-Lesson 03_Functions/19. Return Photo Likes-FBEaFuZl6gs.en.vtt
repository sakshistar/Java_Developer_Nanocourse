WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.375
To return any data as output and use it

00:00:03.375 --> 00:00:07.634
outside function definitions like we want to do with the value of currentLikes,

00:00:07.634 --> 00:00:10.379
I'll have to do two things.

00:00:10.380 --> 00:00:13.245
The first thing is I have to change the return type,

00:00:13.244 --> 00:00:17.414
which is now void to the output type I expect to be returned.

00:00:17.414 --> 00:00:20.399
And return types are just types of variables,

00:00:20.399 --> 00:00:23.250
strings, integers, doubles and so on.

00:00:23.250 --> 00:00:26.969
In this case, we know you want to return a currentLikes variable,

00:00:26.969 --> 00:00:33.225
which is in int value so we'll change the return type from void to int.

00:00:33.225 --> 00:00:36.420
The second thing we need to do is to return the value of

00:00:36.420 --> 00:00:40.605
the int of our currentLikes in a return statement.

00:00:40.604 --> 00:00:43.604
The return statement is just a line of code

00:00:43.604 --> 00:00:46.379
at the end of a function definition that says,

00:00:46.380 --> 00:00:50.245
return, followed by the value you want to output.

00:00:50.244 --> 00:00:54.199
In this case, that's the value of currentLikes so our return statement is just,

00:00:54.200 --> 00:00:58.530
return currentLikes followed by a semi-colon.

00:00:58.530 --> 00:01:02.825
Now, because I've included the correct return type and the return statement,

00:01:02.825 --> 00:01:04.335
when I call this function,

00:01:04.334 --> 00:01:07.409
it will output the value of currentLikes

00:01:07.409 --> 00:01:12.454
and we'll be able to use this output value in other function calls.

00:01:12.454 --> 00:01:15.420
Here's our function call from before that adds to

00:01:15.420 --> 00:01:20.930
the initial zero value of our currentLikes since our boolean like argument is true.

00:01:20.930 --> 00:01:23.400
This function call, will increase

00:01:23.400 --> 00:01:29.234
our current initial likes from 0 to 1 and it will also return this value.

00:01:29.234 --> 00:01:34.680
I can now store the returned output of this function call as an int variable,

00:01:34.680 --> 00:01:37.055
which I'll call returnedLikes.

00:01:37.055 --> 00:01:42.745
This function call, outputs the value 1 and then I can store that in a variable.

00:01:42.745 --> 00:01:48.415
Now the output of likePhoto gives us access to the return value of currentLikes.

00:01:48.415 --> 00:01:51.195
Once we store this output in a variable,

00:01:51.194 --> 00:01:54.539
I can use it just like I would any other invariable.

00:01:54.540 --> 00:01:58.830
This goes for any function that returns a value like this.

00:01:58.829 --> 00:02:03.140
The function call should be used in the same way that its return type is used.

00:02:03.140 --> 00:02:07.349
For likePhoto, I can use this returned int value,

00:02:07.349 --> 00:02:09.465
which is equal to 1 in this case,

00:02:09.465 --> 00:02:13.474
to automatically keep track of the likes a photo gets.

00:02:13.474 --> 00:02:15.239
For our second function call,

00:02:15.240 --> 00:02:18.480
instead of typing in 0 or 1 for our currentLikes,

00:02:18.479 --> 00:02:22.019
I can just pass in the returnedLikes and it will keep track of

00:02:22.020 --> 00:02:26.490
the likes no matter what the value of our first function call outputs.

00:02:26.490 --> 00:02:32.290
Now every call to like photo will return the latest number of likes.

00:02:32.289 --> 00:02:35.129
This second call will return an updated number

00:02:35.129 --> 00:02:38.115
of currentLikes and I'll store that in another variable,

00:02:38.115 --> 00:02:41.219
which I'll call int totalLikes.

00:02:41.219 --> 00:02:43.689
Let's see how this works.

00:02:43.689 --> 00:02:47.479
When our first call has a true boolean like argument value,

00:02:47.479 --> 00:02:50.030
the returnedLikes will be equal to 1

00:02:50.030 --> 00:02:54.810
and this value will be passed into our second function call.

00:02:54.810 --> 00:02:56.115
Our second function call,

00:02:56.115 --> 00:03:00.254
also has a boolean value true here so it will increase

00:03:00.254 --> 00:03:06.234
its currentLikes argument by 1 and we expect a total value of 2 to be returned.

00:03:06.235 --> 00:03:11.445
Our first function call returns a value of 1 currentLike and our second,

00:03:11.444 --> 00:03:14.299
returns a value of 2, which is correct.

00:03:14.300 --> 00:03:17.719
But if the first call has its boolean like value set to false,

00:03:17.719 --> 00:03:20.969
the returnedLikes will be equal to 0.

00:03:20.969 --> 00:03:23.069
Our second call still has a boolean value of

00:03:23.069 --> 00:03:27.114
true so it should increase the returnedLikes by 1.

00:03:27.115 --> 00:03:29.850
This time, after our first function call,

00:03:29.849 --> 00:03:33.569
the returnedLikes are zero and after our second function call,

00:03:33.569 --> 00:03:37.599
our totalLikes are 1 and that's correct.

00:03:37.599 --> 00:03:40.439
The totalLikes are correct each time and we didn't have

00:03:40.439 --> 00:03:44.009
to change anything about our second function call at all.

00:03:44.009 --> 00:03:47.579
Making functions that return data is really useful when you want

00:03:47.580 --> 00:03:51.344
to use that return value in another program or a function call,

00:03:51.344 --> 00:03:54.064
instead of just printing it out to the screen.

00:03:54.064 --> 00:03:58.000
Let's get more practice recognizing and writing return statements.

