WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.679
让我们定义自己的函数 帮助对卡拉 OK 机编程

00:00:04.679 --> 00:00:06.945
我们要输出多行歌词

00:00:06.945 --> 00:00:08.910
然后对副歌各行分组 放入函数

00:00:08.910 --> 00:00:11.400
这样我们可以很容易重复它

00:00:11.400 --> 00:00:14.220
这是 Blondie 歌曲 Heart of Glass

00:00:14.220 --> 00:00:16.350
副歌部分 我们想要重复的输出代码

00:00:16.350 --> 00:00:20.370
现在我们来写出函数定义 输出副歌

00:00:20.370 --> 00:00:22.170
我们写上单词 public void

00:00:22.170 --> 00:00:25.170
后面是函数名字

00:00:25.170 --> 00:00:27.285
函数名字可以是任何内容

00:00:27.285 --> 00:00:30.149
我们调用副歌函数 放入空括号中

00:00:30.149 --> 00:00:33.239
最后我们放入想要运行的代码

00:00:33.240 --> 00:00:35.850
这里在大括号中包括四个打印行

00:00:35.850 --> 00:00:39.170
然后就完成了副歌的函数定义

00:00:39.170 --> 00:00:41.190
这个函数开头是

00:00:41.189 --> 00:00:45.049
我们之前见到的打印行函数 在 public void 前面

00:00:45.049 --> 00:00:47.504
这些起始单词刚开始看起来有点令人疑惑

00:00:47.505 --> 00:00:50.405
所以我们可以一点点来研究刚才写的内容

00:00:50.405 --> 00:00:52.395
我们首先写的是 public

00:00:52.395 --> 00:00:56.142
Java 函数的首个字母通常是 public 或 private

00:00:56.142 --> 00:00:58.480
这称为访问修饰符

00:00:58.479 --> 00:01:02.344
并且 public 告诉计算机 任何人都可以获取这个函数

00:01:02.344 --> 00:01:04.799
接下来我们探讨 objects (对象) 时 将会涉及更多内容

00:01:04.799 --> 00:01:08.105
不过现在 只要知道这是函数的开头即可

00:01:08.105 --> 00:01:10.230
接下来我们写的单词是 void

00:01:10.230 --> 00:01:12.454
这称为返回类型

00:01:12.454 --> 00:01:16.739
而 void 意思是这个函数不会返回任何数据

00:01:16.739 --> 00:01:18.869
一些函数执行运算

00:01:18.870 --> 00:01:23.245
然后我们想让它返回最终结果或一部分数据

00:01:23.245 --> 00:01:25.814
并且这个单词 void 可以改为其他内容

00:01:25.814 --> 00:01:29.325
但是对于运行输出文本等指令的函数

00:01:29.325 --> 00:01:31.005
我们并不是形成新结果

00:01:31.004 --> 00:01:33.179
也不想返回内容

00:01:33.180 --> 00:01:35.215
我们接下来会学习更多返回类型

00:01:35.215 --> 00:01:37.005
所以这里不用太担心

00:01:37.004 --> 00:01:39.644
在 void 后面是函数名字 chorus

00:01:39.644 --> 00:01:42.414
紧接着是空括号

00:01:42.415 --> 00:01:45.265
这就是我们参考和调用函数的原因

00:01:45.265 --> 00:01:48.435
最后是函数中包含的代码块

00:01:48.435 --> 00:01:52.525
它包含输出的歌词代码 外面是大括号

00:01:52.525 --> 00:01:56.690
这相当于我们 if 语句括号中的代码

00:01:56.689 --> 00:01:59.230
现在每次调用函数 chorus

00:01:59.230 --> 00:02:01.655
就会执行代码块

00:02:01.655 --> 00:02:04.980
这是函数定义的所有组成部分

00:02:04.980 --> 00:02:07.275
定义函数后 接下来

00:02:07.275 --> 00:02:10.080
我们看一下通过调用函数 使用它 

