WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.890
Now that we've seen how to use functions to calculate and return values,

00:00:03.890 --> 00:00:06.900
let's see one more example where we can use return values.

00:00:06.900 --> 00:00:10.245
This time we'll be generating and returning random numbers;

00:00:10.244 --> 00:00:12.989
and random values are really useful in simulating

00:00:12.990 --> 00:00:16.679
any real world behavior that involves chance or random events.

00:00:16.679 --> 00:00:19.769
Like simulating rolling dice, which we'll get to.

00:00:19.769 --> 00:00:22.179
When you roll a six sided dice,

00:00:22.179 --> 00:00:24.390
one roll will have a value of either one,

00:00:24.390 --> 00:00:27.030
two, three, four, five or six.

00:00:27.030 --> 00:00:30.304
But you aren't sure which value it will take for each roll.

00:00:30.304 --> 00:00:31.929
There's an element of chance.

00:00:31.929 --> 00:00:36.689
So we can use random numbers to generate a random roll value within this range.

00:00:36.689 --> 00:00:40.859
But before we get to that, let's learn a little bit more about random values in Java.

00:00:40.859 --> 00:00:43.435
To generate random values in Java,

00:00:43.435 --> 00:00:46.785
we'll be using a built in math function called random.

00:00:46.784 --> 00:00:49.304
This function doesn't take in any parameters,

00:00:49.304 --> 00:00:53.454
but it returns a random value that we can then use in our programs.

00:00:53.454 --> 00:00:57.479
And like our println function was always attached to system data out,

00:00:57.479 --> 00:01:00.750
this math function random is attached to this word math;

00:01:00.750 --> 00:01:02.895
which we'll learn more about later.

00:01:02.895 --> 00:01:05.640
And this line of code which is a call to random,

00:01:05.640 --> 00:01:09.689
outputs a random decimal number between zero and one.

00:01:09.689 --> 00:01:12.290
The range of numbers they can output includes zero

00:01:12.290 --> 00:01:15.765
but doesn't quite go all the way up to include one;

00:01:15.765 --> 00:01:19.500
and each time we call random by saying Math.random ();

00:01:19.500 --> 00:01:21.780
this will return a random number;

00:01:21.780 --> 00:01:24.379
like one call might return zero,

00:01:24.379 --> 00:01:30.609
another 0.5917, another 0.2382,

00:01:30.609 --> 00:01:33.495
in any small decimal up to almost one.

00:01:33.495 --> 00:01:37.170
Its maximum return value is still going to be a decimal point just

00:01:37.170 --> 00:01:41.375
really close to one, something like 0.9999.

00:01:41.375 --> 00:01:45.674
And since Math.random returns a random value as output,

00:01:45.674 --> 00:01:50.509
we can assign the value of this function call to a variable.

00:01:50.510 --> 00:01:53.850
This will be a double because it's a number that involves decimal points,

00:01:53.849 --> 00:01:56.979
and let's call this value random number.

00:01:56.980 --> 00:01:59.215
And now, we can work with this returned value

00:01:59.215 --> 00:02:02.670
to get a more specific range of random values.

00:02:02.670 --> 00:02:05.969
For example, we can take the value of our random number,

00:02:05.969 --> 00:02:10.530
and multiply it by 10 to get a larger random range.

00:02:10.530 --> 00:02:15.009
We know that our random number will be in the range zero to almost one.

00:02:15.009 --> 00:02:19.439
So if Math.random outputs its lowest possible value at zero,

00:02:19.439 --> 00:02:23.469
we'll have zero times 10 which equals zero for this line of code.

00:02:23.469 --> 00:02:26.789
And that will be the minimum value for this range.

00:02:26.789 --> 00:02:29.594
And if math.random generates one of its highest values,

00:02:29.594 --> 00:02:31.840
which is around 0.999,

00:02:31.840 --> 00:02:33.870
if we multiply this by 10,

00:02:33.870 --> 00:02:38.460
we'll get 9.99; and that will be our new max.

00:02:38.460 --> 00:02:41.865
So we've just changed our range from zero to almost one,

00:02:41.865 --> 00:02:45.830
to zero to almost 10 just by multiplying.

00:02:45.830 --> 00:02:48.480
Next, if we want to change this range so that we're

00:02:48.479 --> 00:02:51.569
generating random integers instead of random doubles,

00:02:51.569 --> 00:02:53.280
which are numbers with decimals,

00:02:53.280 --> 00:02:59.715
we can cast this value to an int and restoring that value in a variable called randomInt.

00:02:59.715 --> 00:03:03.814
Casting means that you're turning one variable type into another.

00:03:03.814 --> 00:03:05.965
So when we cast a decimal number,

00:03:05.965 --> 00:03:10.031
which for a random number is a type of double, to an int,

00:03:10.031 --> 00:03:13.170
this cast will drop whatever decimal value that

00:03:13.169 --> 00:03:17.439
original number has and turned that double into an int.

00:03:17.439 --> 00:03:21.900
So say a random number has a value of 9.985,

00:03:21.900 --> 00:03:24.300
even though this value is close to 10,

00:03:24.300 --> 00:03:26.620
when we cast this value to an int,

00:03:26.620 --> 00:03:28.694
it will just turn into nine;

00:03:28.694 --> 00:03:32.995
and the decimal part .985 will be ignored.

00:03:32.995 --> 00:03:35.365
It's the same for other cases.

00:03:35.365 --> 00:03:38.189
If our random number is something like 1.252,

00:03:38.189 --> 00:03:41.264
this decimal portion, .252,

00:03:41.264 --> 00:03:45.234
will be ignored and a cast will turn it into just one.

00:03:45.235 --> 00:03:48.510
A value of 0. 5728, we'll have

00:03:48.509 --> 00:03:52.780
this whole decimal portion ignored and will turn into the integer zero.

00:03:52.780 --> 00:03:54.465
And to do this casting,

00:03:54.465 --> 00:03:57.450
we just write our casting type; in this case int,

00:03:57.449 --> 00:03:59.384
which we want our number to become;

00:03:59.384 --> 00:04:03.384
in parentheses, right before the value we want to change.

00:04:03.384 --> 00:04:08.189
In this case, right before the value of random number which starts out as a double.

00:04:08.189 --> 00:04:12.259
Now this randomInt that holds the value of our cast random number,

00:04:12.259 --> 00:04:17.259
will always be a value in the integer range from 0-9, including nine.

00:04:17.259 --> 00:04:19.920
Great, now let's use this knowledge about

00:04:19.920 --> 00:04:22.949
casting and changing range of random numbers to help us

00:04:22.949 --> 00:04:25.409
write a program that simulates and returns

00:04:25.410 --> 00:04:29.000
the correct integer values for randomly rolled dice.

