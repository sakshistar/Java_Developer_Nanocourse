WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.339
Let's try calling our printPhoto function with different size and color arguments.

00:00:04.339 --> 00:00:07.644
Let's use the arguments 10, 20, and false.

00:00:07.644 --> 00:00:09.924
Can you guess what this will print out?

00:00:09.925 --> 00:00:14.085
We know that our first argument 10 is matched with our first parameter width.

00:00:14.085 --> 00:00:15.755
Our second argument 20,

00:00:15.755 --> 00:00:17.870
where we match with our second parameter height.

00:00:17.870 --> 00:00:19.510
And our third argument false,

00:00:19.510 --> 00:00:21.740
we matched with our third parameter inColor.

00:00:21.739 --> 00:00:23.669
So when we run this function call,

00:00:23.670 --> 00:00:26.070
we'll enter our code in our function definition,

00:00:26.070 --> 00:00:29.649
print out the width is 10, height is 20,

00:00:29.649 --> 00:00:31.410
and because inColor is false,

00:00:31.410 --> 00:00:33.725
we'll end up printing out "Print is black and white."

00:00:33.725 --> 00:00:35.554
So this will be our print output.

00:00:35.554 --> 00:00:38.950
And a print with this description will end up looking something like this,

00:00:38.950 --> 00:00:40.665
even though this isn't quite the scale.

00:00:40.664 --> 00:00:45.299
Then what if we did another function call and we just switched the spots of 10 and 20?

00:00:45.299 --> 00:00:47.954
This time since our first argument is 20,

00:00:47.954 --> 00:00:50.994
20 is going to be assigned to our first parameter, our width.

00:00:50.994 --> 00:00:53.429
And 10, since it's our second argument,

00:00:53.429 --> 00:00:55.965
will be assigned to our second parameter, height.

00:00:55.965 --> 00:00:58.110
So compared to our first function call,

00:00:58.109 --> 00:01:01.155
because we've switched the order of our first two arguments,

00:01:01.155 --> 00:01:03.530
our width and height have also swapped.

00:01:03.530 --> 00:01:05.159
And with this print description,

00:01:05.159 --> 00:01:06.954
our print we'll end up looking like this.

00:01:06.954 --> 00:01:08.694
All stretched in the wrong direction.

00:01:08.694 --> 00:01:10.949
So the order of arguments in a function call

00:01:10.950 --> 00:01:13.780
when you have multiple parameters is really important.

00:01:13.780 --> 00:01:18.299
Matching your arguments to the type of parameter expected is also important.

00:01:18.299 --> 00:01:22.289
For example, putting false as our second argument would cause an error,

00:01:22.290 --> 00:01:24.615
and that's because this is a boolean value,

00:01:24.614 --> 00:01:29.119
and our function definition specifies that we want our second argument to be an int.

00:01:29.120 --> 00:01:32.390
Having our third argument be a 10 would also cause an error

00:01:32.390 --> 00:01:36.534
because this is an int and our definition expects a boolean here.

00:01:36.534 --> 00:01:39.004
So this function call wouldn't even execute.

00:01:39.004 --> 00:01:42.149
So keep in mind that order and type are very important when

00:01:42.150 --> 00:01:45.270
you use multiple parameters and put arguments into a function call.

