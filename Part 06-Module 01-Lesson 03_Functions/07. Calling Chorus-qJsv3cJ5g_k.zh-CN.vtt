WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.514
在卡拉 OK 机例子中

00:00:01.514 --> 00:00:04.049
我们已经有了完整的副歌函数定义

00:00:04.049 --> 00:00:07.609
包含了输出 Heart of Glass 副歌的代码

00:00:07.610 --> 00:00:09.345
但是我们如何使用它呢？

00:00:09.345 --> 00:00:12.240
实际上为了使用程序中的函数

00:00:12.240 --> 00:00:15.300
提示整个代码块运行 我们需要调用函数

00:00:15.300 --> 00:00:16.734
函数调用

00:00:16.734 --> 00:00:19.220
相当于根据名字参考函数

00:00:19.219 --> 00:00:20.279
在这个例子中 chorus

00:00:20.280 --> 00:00:24.095
加上空括号 后面是一个分号

00:00:24.094 --> 00:00:27.289
这类似于调用 println 函数

00:00:27.289 --> 00:00:30.629
只有 println 函数用于输出 System.out.println ();

00:00:30.629 --> 00:00:34.729
并且我们定义的大部分函数都具有独立性

00:00:34.729 --> 00:00:37.649
因此调用这个函数可以提示

00:00:37.649 --> 00:00:40.650
运行包含 chorus 函数的一系列代码

00:00:40.651 --> 00:00:44.420
在这个调用中 可以输出我们想要的四行副歌

00:00:44.420 --> 00:00:48.625
值得注意的是 调用和定义函数是单独进行的

00:00:48.625 --> 00:00:52.530
chorus 函数定义包括返回类型

00:00:52.530 --> 00:00:56.149
名字及其包含的所有代码

00:00:56.149 --> 00:00:57.839
不过 为了运行代码

00:00:57.840 --> 00:01:01.460
我们需要从函数定义中调用函数

00:01:01.460 --> 00:01:04.409
这类似于词典中单词定义

00:01:04.409 --> 00:01:08.250
与在句子中实际使用单词的区别

00:01:08.250 --> 00:01:10.620
我们需要学习单词及其含义时

00:01:10.620 --> 00:01:12.859
可能会查字典

00:01:12.859 --> 00:01:16.775
可以学习到单词在句子的用法及其发音等细节

00:01:16.775 --> 00:01:19.830
但是当我们在句子中实际使用单词时

00:01:19.829 --> 00:01:21.804
我们并不会涉及所有定义

00:01:21.805 --> 00:01:24.570
可能只参考某个单独文本中的单词

00:01:24.569 --> 00:01:27.419
因此函数定义类似于词典

00:01:27.420 --> 00:01:31.314
可以给我们提供函数定义及其使用的细节

00:01:31.314 --> 00:01:33.719
向我们展示函数所包含的代码

00:01:33.719 --> 00:01:36.784
是否可以获取 以及是否返回数据

00:01:36.784 --> 00:01:38.549
但是实际上在单独程序中使用和执行

00:01:38.549 --> 00:01:41.994
函数的代码 我们需要调用函数

00:01:41.995 --> 00:01:43.755
我们并不会涉及所有定义

00:01:43.754 --> 00:01:45.629
我们只是根据名称进行参考

00:01:45.629 --> 00:01:47.864
因此函数定义描述一个函数

00:01:47.864 --> 00:01:49.334
展现内部代码

00:01:49.334 --> 00:01:51.367
以及如何使用函数

00:01:51.367 --> 00:01:54.709
调用函数指的是根据名称参考函数

00:01:54.709 --> 00:01:57.212
我们只能一次定义函数

00:01:57.212 --> 00:02:00.539
但是可以调用多次

00:02:00.540 --> 00:02:03.000
所以现在我们要输出副歌的函数

00:02:03.000 --> 00:02:05.543
可以调用这个函数 得到结果

00:02:05.543 --> 00:02:07.275
并且可以调用多次

00:02:07.275 --> 00:02:09.314
让我们连续调用两次吧

00:02:09.314 --> 00:02:11.159
现在输出副歌两次

00:02:11.159 --> 00:02:12.655
很容易重复操作

00:02:12.655 --> 00:02:14.280
现在 如果你想改变 chorus 代码中的内容

00:02:14.280 --> 00:02:17.759
如改变拼写或标点符号

00:02:17.759 --> 00:02:20.579
我们可以修改函数定义的内容

00:02:20.580 --> 00:02:22.635
然后多次运行代码时

00:02:22.634 --> 00:02:24.429
也可以修改结果

00:02:24.430 --> 00:02:28.469
但是这里我们只修改了函数定义中的代码

00:02:28.469 --> 00:02:31.439
我们可以练习一下定义和调用自己的函数

