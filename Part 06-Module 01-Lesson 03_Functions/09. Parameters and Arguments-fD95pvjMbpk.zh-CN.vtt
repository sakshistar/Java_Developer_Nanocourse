WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.640
我们已经讲过卡拉 OK 程序

00:00:02.640 --> 00:00:05.245
并且用它很容易地输出了歌曲和副歌

00:00:05.245 --> 00:00:06.990
现在我们想改进一下代码

00:00:06.990 --> 00:00:09.724
在每首歌开头加上问候语

00:00:09.724 --> 00:00:11.294
歌手巡回演出时

00:00:11.294 --> 00:00:14.585
在每个演出的城市 总会说你好

00:00:14.585 --> 00:00:17.484
例如 你好 纽约 你好 墨西哥

00:00:17.484 --> 00:00:19.750
这就是我们需要问候语函数的目的

00:00:19.750 --> 00:00:24.390
所以 我们编写问候语函数 可以在每个地方说 你好

00:00:24.390 --> 00:00:29.070
并且根据具体地点 定制代码 向每个地方单独问好

00:00:29.070 --> 00:00:31.625
我们首先编写一个名为 greeting 的函数

00:00:31.625 --> 00:00:34.914
可以输出 hello 加上地点名 如纽约

00:00:34.914 --> 00:00:38.890
但是我们想随着地点改变 问候语也随之改变

00:00:38.890 --> 00:00:41.280
目前为止 我们已经了解到

00:00:41.280 --> 00:00:44.515
根据我们输入的变量或值等内部信息 函数发挥作用

00:00:44.515 --> 00:00:46.259
但是这次我们想

00:00:46.259 --> 00:00:48.689
从外部世界向函数提供信息

00:00:48.689 --> 00:00:50.579
即定义以外的世界

00:00:50.579 --> 00:00:54.314
我们要赋予其地点信息 要求它回应

00:00:54.314 --> 00:00:59.189
可以利用参数 在函数中输入地点等数据

00:00:59.189 --> 00:01:01.530
参数是我们在函数定义括号内

00:01:01.530 --> 00:01:04.034
输入的变量

00:01:04.034 --> 00:01:05.685
可以供函数使用

00:01:05.685 --> 00:01:07.329
对于定制问候语

00:01:07.328 --> 00:01:12.014
我们可以输入并使用字符串变量 说明地点

00:01:12.015 --> 00:01:13.784
为了获取这一字符串

00:01:13.784 --> 00:01:18.265
我们通过将字符串作为括号中的参数来实现

00:01:18.265 --> 00:01:22.170
现在我们可以使用函数代码中的变量 location (地点)

00:01:22.170 --> 00:01:26.100
这类似于我们在函数中声明变量 并使用变量

00:01:26.099 --> 00:01:29.729
最大的区别在于我们在函数中声明的所有变量

00:01:29.730 --> 00:01:33.755
都只能在函数中获得并使用 其他地方无法获得使用

00:01:33.754 --> 00:01:36.119
这里参数 location (地点) 表示

00:01:36.120 --> 00:01:39.484
函数范围以外存在的信息

00:01:39.484 --> 00:01:42.730
所以现在我们将字符串 location 加入到问候语信息中

00:01:42.730 --> 00:01:44.010
除了说 你好 纽约

00:01:44.010 --> 00:01:45.920
我们还可以说 你好 加地点

00:01:45.920 --> 00:01:48.359
使用字符串拼接

00:01:48.359 --> 00:01:51.554
来输出每个地点的特定信息

00:01:51.555 --> 00:01:54.270
现在我想调用问候语函数

00:01:54.269 --> 00:01:57.209
我不能只在空括号里输入 greeting

00:01:57.209 --> 00:02:00.599
因为这个函数也包括输入的字符串 location

00:02:00.599 --> 00:02:01.814
因此 在函数调用中

00:02:01.814 --> 00:02:03.539
我要输入字符串 如 New York

00:02:03.540 --> 00:02:07.935
特定的输入称为实参

00:02:07.935 --> 00:02:13.013
因此 参数是函数定义中的变量 如字符串 location

00:02:13.013 --> 00:02:17.355
而实参表示调用函数时输入函数中的实际值

00:02:17.354 --> 00:02:20.159
如New York 这样函数才能发挥作用

00:02:20.159 --> 00:02:21.790
我们调用函数时

00:02:21.790 --> 00:02:26.064
实参应当与我们在函数中的参数类型保持一致

00:02:26.064 --> 00:02:30.090
所以在这个例子中 New York 是一个字符串

00:02:30.090 --> 00:02:33.789
如果我在函数调用时将字符串 New York 作为实参

00:02:33.789 --> 00:02:38.759
Java 就会查看函数定义 并赋值在字符串 location 中

00:02:38.759 --> 00:02:41.264
函数调用就会输出特定城市的问候语

00:02:41.264 --> 00:02:44.009
即 Hello, New York (你好纽约)

00:02:44.009 --> 00:02:48.044
非常好 现在我可以重复这个代码 输入任何我想要的地点

00:02:48.044 --> 00:02:49.709
问候语函数可以接受

00:02:49.710 --> 00:02:53.360
任何字符串输入 并赋值给字符串 location

00:02:53.360 --> 00:02:56.663
所以 如果我调用问候语函数 输入字符串 墨西哥

00:02:56.663 --> 00:02:59.875
输出结果为 你好 墨西哥

00:02:59.875 --> 00:03:02.129
现在我们调用问候语函数

00:03:02.129 --> 00:03:04.789
并且每次都赋值不同字符串 location

00:03:04.789 --> 00:03:06.625
这类似于我们对 println 所做的

00:03:06.625 --> 00:03:09.034
每次输入不同的字符串

00:03:09.034 --> 00:03:13.000
在下节课测验中 我们将会了解更多参数发挥作用的例子

