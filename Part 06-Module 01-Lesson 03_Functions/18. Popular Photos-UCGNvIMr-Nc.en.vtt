WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.115
For our likePhoto code,

00:00:02.115 --> 00:00:03.885
which let's the user comments on,

00:00:03.884 --> 00:00:06.240
and like a photo or picture online,

00:00:06.240 --> 00:00:10.085
you may have noticed that our function only works when we know and can

00:00:10.085 --> 00:00:14.880
input the number of currentLikes a photo has as our first argument.

00:00:14.880 --> 00:00:18.045
Like if we know a photo has 10 currentLikes,

00:00:18.045 --> 00:00:23.710
we can do a function call to likePhoto with the value 10 passed in as our first argument,

00:00:23.710 --> 00:00:27.664
and this will correspond to our currentLikes parameter.

00:00:27.664 --> 00:00:30.629
Our second argument is a comment string,

00:00:30.629 --> 00:00:32.670
and our third is a boolean value,

00:00:32.670 --> 00:00:36.125
that corresponds to our boolean like parameter.

00:00:36.125 --> 00:00:38.280
If this argument is true,

00:00:38.280 --> 00:00:42.115
we'll increase the number of currentLikes by one.

00:00:42.115 --> 00:00:45.420
So in this case, because our boolean like will be set to true,

00:00:45.420 --> 00:00:49.125
we'll increase our currentLikes from 10 to 11.

00:00:49.125 --> 00:00:51.645
In this function call, we'll print out the comment,

00:00:51.645 --> 00:00:56.475
great photo, as well as the increased number of likes, 11.

00:00:56.475 --> 00:01:00.760
But how do we know that a photo had 10 likes to begin with?

00:01:00.759 --> 00:01:03.750
Let's think about how to automatically keep track of the number of

00:01:03.750 --> 00:01:07.844
likes a photo has when a person first puts a photo up.

00:01:07.844 --> 00:01:10.504
When a picture is first posted,

00:01:10.504 --> 00:01:14.594
it starts out with zero likes and also no comments.

00:01:14.594 --> 00:01:17.594
Then if a few people see it and like or comment,

00:01:17.594 --> 00:01:21.834
we can try to use our function likePhoto to handle this.

00:01:21.834 --> 00:01:26.129
The first function call might be from someone who likes our photo.

00:01:26.129 --> 00:01:28.789
So we start off with these three arguments.

00:01:28.790 --> 00:01:30.750
In int value of zero,

00:01:30.750 --> 00:01:35.310
which corresponds to our currentLikes parameter since there are no likes yet,

00:01:35.310 --> 00:01:36.719
a comment string that just says,

00:01:36.719 --> 00:01:42.334
"Nice color," and a boolean value of true for a boolean like parameter.

00:01:42.334 --> 00:01:46.939
Since our boolean like parameter will be set to this argument value of true,

00:01:46.939 --> 00:01:50.370
this should add to the currentLikes that this photo has.

00:01:50.370 --> 00:01:52.064
In this function call,

00:01:52.064 --> 00:01:53.420
we'll print out the comment,

00:01:53.420 --> 00:01:57.375
Nice color, and the number of likes which is increased to one.

00:01:57.375 --> 00:01:59.909
Then say another person comes along and

00:01:59.909 --> 00:02:02.864
likes the photo again using another function call.

00:02:02.864 --> 00:02:06.045
This time we know that after our first function call,

00:02:06.045 --> 00:02:09.699
our currentLikes should have increased from zero to one.

00:02:09.699 --> 00:02:11.069
So to reflect this,

00:02:11.069 --> 00:02:15.264
we want our second function call to have one as its first argument.

00:02:15.264 --> 00:02:19.389
And here are argument values are one for the currentLikes,

00:02:19.389 --> 00:02:22.084
a string that just says, "I like this."

00:02:22.085 --> 00:02:23.727
And a boolean value, true,

00:02:23.727 --> 00:02:27.115
which means that the photo has been liked a second time.

00:02:27.115 --> 00:02:29.265
In this second function call,

00:02:29.264 --> 00:02:32.634
we'll print out our comment and the current number of likes,

00:02:32.634 --> 00:02:35.064
which now have increased to two.

00:02:35.064 --> 00:02:39.759
But what if this first person changes their mind about liking the photo?

00:02:39.759 --> 00:02:44.429
They still comment, but their boolean like argument will be false.

00:02:44.430 --> 00:02:46.694
So the first function call will be the same,

00:02:46.694 --> 00:02:52.019
but this time the boolean argument for liking a photo will be set to false.

00:02:52.020 --> 00:02:54.770
This means that our currentLikes won't increase,

00:02:54.770 --> 00:02:59.915
so our value for currentLikes which we've input is zero should stay as zero.

00:02:59.914 --> 00:03:02.034
It shouldn't increase to one.

00:03:02.034 --> 00:03:04.875
In this call, we'll print out the same comment,

00:03:04.875 --> 00:03:07.969
but this time the number of likes will be zero.

00:03:07.969 --> 00:03:12.044
And to reflect this change down the line in our second function call,

00:03:12.044 --> 00:03:14.129
we'll have to change the value of our currentLikes

00:03:14.129 --> 00:03:18.299
argument from one to zero in this call.

00:03:18.300 --> 00:03:21.600
Now these function calls are updated and correct.

00:03:21.599 --> 00:03:25.109
Our first call will leave a comment but doesn't increase the likes,

00:03:25.110 --> 00:03:28.965
and our second should increase the likes by one.

00:03:28.965 --> 00:03:31.539
Right now we're looking at this print output

00:03:31.539 --> 00:03:34.754
and directly writing in the correct number of currentLikes,

00:03:34.754 --> 00:03:37.604
zero or one in our second function call.

00:03:37.604 --> 00:03:42.419
But what if we wanted our program to keep track of the currentLikes for us?

00:03:42.419 --> 00:03:44.789
This would be easier if we could access and keep

00:03:44.789 --> 00:03:47.685
track of the number of currentLikes automatically,

00:03:47.685 --> 00:03:52.875
but right now that information is only in our likePhoto function definition.

00:03:52.875 --> 00:03:56.789
The current number of likes a photo has is kept track

00:03:56.789 --> 00:04:01.629
of in the variable inside of our likePhoto function definition code.

00:04:01.629 --> 00:04:06.704
That's where we change its value if someone likes a photo and where we print it out.

00:04:06.705 --> 00:04:10.500
But we can't reach this value outside of this definition,

00:04:10.500 --> 00:04:13.104
so we can't use it in separate programs,

00:04:13.104 --> 00:04:14.369
like when we actually call

00:04:14.370 --> 00:04:18.975
the function likePhoto and want to use the value to keep track of the currentLikes.

00:04:18.975 --> 00:04:24.217
To access and use the value of currentLikes outside of our function definition,

00:04:24.216 --> 00:04:26.310
we want to change the definition so that

00:04:26.310 --> 00:04:29.250
instead of just calculating the likes and printing them,

00:04:29.250 --> 00:04:34.139
it returns the likes as output data, as a return value.

00:04:34.139 --> 00:04:37.709
This is sort of like how we could input outside information into

00:04:37.709 --> 00:04:42.269
a function call by including parameters in our function definition.

00:04:42.269 --> 00:04:44.039
But instead of input,

00:04:44.040 --> 00:04:49.080
this time we're producing output that can be accessed outside this definition.

00:04:49.079 --> 00:04:51.719
This will become clearer when we see an example.

00:04:51.720 --> 00:04:55.000
So let's see the steps we need to take to return values like this.

