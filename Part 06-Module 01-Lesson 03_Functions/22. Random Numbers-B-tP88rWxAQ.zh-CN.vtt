WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.890
现在我们已经了解如何使用函数计算和返回值

00:00:03.890 --> 00:00:06.900
我们来看更多使用返回值的例子

00:00:06.900 --> 00:00:10.245
这次我们生成和返回随机数

00:00:10.244 --> 00:00:12.989
在模拟真实世界的概率或随机事件行为时

00:00:12.990 --> 00:00:16.679
随机值非常有用

00:00:16.679 --> 00:00:19.769
例如接下来的模拟掷骰子

00:00:19.769 --> 00:00:22.179
当你用六面骰子时

00:00:22.179 --> 00:00:24.390
可能出现的值是 1

00:00:24.390 --> 00:00:27.030
2 3 4 5 或 6

00:00:27.030 --> 00:00:30.304
然后你不确定每次掷骰子会出现哪个值

00:00:30.304 --> 00:00:31.929
这就是概率成分

00:00:31.929 --> 00:00:36.689
所以我们可以使用随机数 在这个范围内生成骰子的随机数

00:00:36.689 --> 00:00:40.859
但是在开始前 我们需要了解一下 Java 的随机值

00:00:40.859 --> 00:00:43.435
为了生成 Java 的随机值

00:00:43.435 --> 00:00:46.785
我们使用嵌入式数学函数 random

00:00:46.784 --> 00:00:49.304
这个函数不包括任何参数

00:00:49.304 --> 00:00:53.454
但是返回我们在程序中使用的随机值

00:00:53.454 --> 00:00:57.479
如同 println 函数一样 附着于 System.out

00:00:57.479 --> 00:01:00.750
这个数学函数 random 附着于 math 后面

00:01:00.750 --> 00:01:02.895
随后我们将学习到更多

00:01:02.895 --> 00:01:05.640
这个代码行是随机调用

00:01:05.640 --> 00:01:09.689
输出 0 到 1 之间的随机小数

00:01:09.689 --> 00:01:12.290
输出的数字范围包括 0

00:01:12.290 --> 00:01:15.765
但是不会超过 1

00:01:15.765 --> 00:01:19.500
每次我们通过 Math.random (); 调用 random

00:01:19.500 --> 00:01:21.780
然后返回随机值

00:01:21.780 --> 00:01:24.379
例如这个调用会输出 0

00:01:24.379 --> 00:01:30.609
另外两个分别输出 0.5917 和 0.2382

00:01:30.609 --> 00:01:33.495
所有小数最大值为 1

00:01:33.495 --> 00:01:37.170
最大返回值可以是无限逼近 1 的小数

00:01:37.170 --> 00:01:41.375
例如 0.9999

00:01:41.375 --> 00:01:45.674
由于 Math.random 返回随机值作为输出结果

00:01:45.674 --> 00:01:50.509
我们可以利用这个函数调用赋值给一个变量

00:01:50.510 --> 00:01:53.850
由于这一值包含小数 所以这是双精度浮点数变量

00:01:53.849 --> 00:01:56.979
我们来调用这个随机值

00:01:56.980 --> 00:01:59.215
现在我们可以使用这个返回的值

00:01:59.215 --> 00:02:02.670
得到更多随机值的特定范围

00:02:02.670 --> 00:02:05.969
例如 我们利用随机值

00:02:05.969 --> 00:02:10.530
乘以 10 得到更大的随机范围

00:02:10.530 --> 00:02:15.009
我们知道随机数在 0 到 1 之间

00:02:15.009 --> 00:02:19.439
如果 Math.random 输出最低值 0

00:02:19.439 --> 00:02:23.469
我们在这一行代码中用 0 乘以 10 仍然等于 0

00:02:23.469 --> 00:02:26.789
这是最新范围的最小值

00:02:26.789 --> 00:02:29.594
如果 Math.random 生成最一个大值

00:02:29.594 --> 00:02:31.840
例如接近 0.999

00:02:31.840 --> 00:02:33.870
把它乘以 10 后

00:02:33.870 --> 00:02:38.460
我们会得到 9.99 这就是我们最新的最大值

00:02:38.460 --> 00:02:41.865
所以我们从 0 到 1 之间的范围

00:02:41.865 --> 00:02:45.830
通过乘以 10 后变成 0 到 10 之间

00:02:45.830 --> 00:02:48.480
接下来我们改变这个范围

00:02:48.479 --> 00:02:51.569
生成随机整数值 而不是

00:02:51.569 --> 00:02:53.280
含有小数的随机双精度浮点数

00:02:53.280 --> 00:02:59.715
我们把这一值变为整数 存储为变量 randomInt

00:02:59.715 --> 00:03:03.814
转变意味着你把一种变量类型变为另一种

00:03:03.814 --> 00:03:05.965
所以我们转变

00:03:05.965 --> 00:03:10.031
随机数为双精度浮点数变量的小数 成为整数时

00:03:10.031 --> 00:03:13.170
这种转变会舍弃原有数字的小数部分

00:03:13.169 --> 00:03:17.439
将双精度浮点数转变为整数

00:03:17.439 --> 00:03:21.900
例如随机值为 9.985

00:03:21.900 --> 00:03:24.300
虽然这个值非常接近 10

00:03:24.300 --> 00:03:26.620
我们把它转变为整数值时

00:03:26.620 --> 00:03:28.694
这个数成为 9

00:03:28.694 --> 00:03:32.995
小数部分 .985 都被忽略

00:03:32.995 --> 00:03:35.365
在其他例子中这也同样适用

00:03:35.365 --> 00:03:38.189
如果随机值为 1.252

00:03:38.189 --> 00:03:41.264
小数部分 .252 会被忽略

00:03:41.264 --> 00:03:45.234
转变后成为 1

00:03:45.235 --> 00:03:48.510
值 0.5728 我们会忽略

00:03:48.509 --> 00:03:52.780
整个小数部分 转变为整数 0

00:03:52.780 --> 00:03:54.465
为了完成转换

00:03:54.465 --> 00:03:57.450
我们编写转换类型 在这个例子中

00:03:57.449 --> 00:03:59.384
我们想让值成为整数类型

00:03:59.384 --> 00:04:03.384
括号位于我们想要改变的数字前面

00:04:03.384 --> 00:04:08.189
在这个例子里 随机值最初为双精度浮点数

00:04:08.189 --> 00:04:12.259
而这个 randomInt 包含了我们想转换的随机值

00:04:12.259 --> 00:04:17.259
应为 0 到 9 之间的整数 包括 9

00:04:17.259 --> 00:04:19.920
非常好 我们现在了解了

00:04:19.920 --> 00:04:22.949
随机值的转换和改变

00:04:22.949 --> 00:04:25.409
帮助我们编写程序 模拟并返回

00:04:25.410 --> 00:04:29.000
模拟掷骰子时的正确整数值

