WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.024
So what exactly is a function?

00:00:03.024 --> 00:00:07.605
We've mentioned that functions group together blocks of code to perform a specific task,

00:00:07.605 --> 00:00:11.050
and we've actually been using functions throughout this course.

00:00:11.050 --> 00:00:14.350
Whenever you've used system.out.println to print a line,

00:00:14.349 --> 00:00:16.800
you've been calling the function println,

00:00:16.800 --> 00:00:19.199
which is a built in Java function.

00:00:19.199 --> 00:00:21.809
And calling a function is just referring to

00:00:21.809 --> 00:00:25.134
that function by its name and using it in a program.

00:00:25.135 --> 00:00:28.875
And you can call the same function as many times you want in a program.

00:00:28.875 --> 00:00:32.195
Think of when we've written multiple println lines of code.

00:00:32.195 --> 00:00:34.658
Each of these is a function call,

00:00:34.658 --> 00:00:36.390
and every time you make a function call,

00:00:36.390 --> 00:00:39.899
Java will recognize the name of the function and it will

00:00:39.899 --> 00:00:44.219
look inside its own code for a function definition with the same name.

00:00:44.219 --> 00:00:46.589
We'll get more into the difference between function

00:00:46.590 --> 00:00:49.260
calling and function definitions in a bit.

00:00:49.259 --> 00:00:51.949
Function definitions include the name of

00:00:51.950 --> 00:00:55.580
function and all the code that function contains.

00:00:55.579 --> 00:00:56.729
When you call a function,

00:00:56.729 --> 00:00:58.785
like when you say, system.out.println,

00:00:58.786 --> 00:01:03.710
it's equivalent to executing all the code in the definition of println.

00:01:03.710 --> 00:01:06.540
So when you call println over and over again,

00:01:06.540 --> 00:01:10.960
all these calls will refer to the same one function definition.

00:01:10.959 --> 00:01:13.334
Java will see a call like this and then look to

00:01:13.334 --> 00:01:16.969
the definition to execute the code inside of this function.

00:01:16.969 --> 00:01:19.530
So let's check out this definition.

00:01:19.530 --> 00:01:22.864
Here's the function definition for printing a line.

00:01:22.864 --> 00:01:27.219
It contains several lines of code that worked to display a message on our screen.

00:01:27.219 --> 00:01:30.329
And actually this is only a portion of the code included in println.

00:01:30.329 --> 00:01:33.894
You can see that its definition starts out with these words,

00:01:33.894 --> 00:01:38.114
public and void and then the name of our function println.

00:01:38.114 --> 00:01:41.009
Then it takes in a string which we input and then it has

00:01:41.010 --> 00:01:45.300
curly braces that grouped together all the code that println and executes.

00:01:45.299 --> 00:01:49.590
This block of code is pretty big and quite complicated.

00:01:49.590 --> 00:01:54.040
Here we see an if statement that's checking if our string x is equal to null,

00:01:54.040 --> 00:01:56.630
and null basically means that it doesn't exist.

00:01:56.629 --> 00:01:59.494
So this checks that there is a string to print.

00:01:59.495 --> 00:02:02.810
Then there's a lot more code to correctly display the string.

00:02:02.810 --> 00:02:04.975
It even uses more functions inside,

00:02:04.974 --> 00:02:08.844
like this write function to display our string to our screen.

00:02:08.844 --> 00:02:11.009
Just imagine if we had to write this code over and

00:02:11.009 --> 00:02:14.609
over every time we wanted to display a message.

00:02:14.610 --> 00:02:16.915
Luckily since println is a function,

00:02:16.914 --> 00:02:20.310
we're able to use all this code as many times as you want just by

00:02:20.310 --> 00:02:23.879
referring to the function name with a function call.

00:02:23.879 --> 00:02:25.460
So function calls like this,

00:02:25.460 --> 00:02:27.750
let us print stuff out to our screen and we don't need to

00:02:27.750 --> 00:02:31.000
know the specifics of the code being executed.

