WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.769
Big O notation is language we use to talk about how long an algorithm takes to run.

00:00:04.769 --> 00:00:06.314
In Big O notation,

00:00:06.315 --> 00:00:10.605
we use O to represent the order of function.

00:00:10.605 --> 00:00:15.705
N symbol inside of the bracket tells the time complexity.

00:00:15.705 --> 00:00:19.844
Recall the example we're using for binary search.

00:00:19.844 --> 00:00:27.929
If we're iterating through the array to find a number where the time complexity is O n,

00:00:27.929 --> 00:00:33.960
which means we need to go through this array one by one for the worst case,

00:00:33.960 --> 00:00:39.899
and if we're searching array with binary search the time complexity is O

00:00:39.899 --> 00:00:46.344
log n. So how many other time complexities do we have?

00:00:46.344 --> 00:00:54.329
Here is a table of different time complexities and some examples.

00:00:54.399 --> 00:01:03.454
Here's a graph shows all different time complexity in terms of element and operations.

00:01:03.454 --> 00:01:07.049
As you can see here, if you're O one,

00:01:07.049 --> 00:01:13.609
which means it's constant it won't change regardless of element increase.

00:01:13.609 --> 00:01:23.629
If you have O log n which will increase slowly because you have log n time complexity.

00:01:23.629 --> 00:01:31.015
If you have O n which means your operation increase when the element increase.

00:01:31.015 --> 00:01:34.879
As far as exponential like here and

00:01:34.879 --> 00:01:40.649
here will increase very fast when the element grows larger.

