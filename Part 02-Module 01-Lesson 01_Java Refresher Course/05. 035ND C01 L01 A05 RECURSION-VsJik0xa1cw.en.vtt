WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.950
Recursion is a process in which a message calls itself continuously.

00:00:06.580 --> 00:00:08.945
Lets start with a example here.

00:00:08.945 --> 00:00:13.304
If we're trying to find the nth number in the Fibonacci sequence,

00:00:13.304 --> 00:00:16.125
the nth number is larger than one.

00:00:16.125 --> 00:00:20.204
We can do it iteratively or recursively.

00:00:20.204 --> 00:00:23.774
The iterative solution is look like this.

00:00:23.774 --> 00:00:29.564
So we start searching for the nth number here.

00:00:29.565 --> 00:00:32.355
If we are going a loop,

00:00:32.354 --> 00:00:40.634
and we keep adding that to the a and b until we find the nth number.

00:00:40.634 --> 00:00:43.649
We can do it in recursive way.

00:00:43.649 --> 00:00:45.329
As I can see that,

00:00:45.329 --> 00:00:48.629
we define a recursive method.

00:00:48.630 --> 00:00:50.595
Instead of this method,

00:00:50.594 --> 00:00:53.189
we are calling itself.

00:00:53.189 --> 00:00:56.659
Every time we are decreasing to n number,

00:00:56.659 --> 00:01:03.609
and two to n number is less or equals to one and we return the number.

00:01:03.609 --> 00:01:09.299
So let's see the pros and cons using the recursion.

00:01:09.299 --> 00:01:13.890
Here are some pros to using recursion.

00:01:13.890 --> 00:01:17.250
It can reduce length of the program,

00:01:17.250 --> 00:01:21.680
it's very flexible in data structure like stacks,

00:01:21.680 --> 00:01:24.005
queues, and linked list.

00:01:24.004 --> 00:01:29.030
You can use also use data structure in recursion.

00:01:29.219 --> 00:01:38.859
It can worked big and complex iterative solution to easy and simple union recursively.

00:01:38.859 --> 00:01:41.875
Algorithms can be defined recursively,

00:01:41.875 --> 00:01:46.775
which will make it easier to visualize and understand.

00:01:46.775 --> 00:01:51.090
Let's see the cons of using recursion.

00:01:51.090 --> 00:01:54.719
First, it can be slower than iteration,

00:01:54.718 --> 00:01:59.214
because in addition to processing to loop content,

00:01:59.215 --> 00:02:03.625
it has to deal with the recursive call stack frame.

00:02:03.625 --> 00:02:07.450
Which will mean more code is run.

00:02:07.450 --> 00:02:12.300
Which means it will slower the iteration.

00:02:12.300 --> 00:02:18.365
Other than that, it's logical but difficult to track and debug.

00:02:18.365 --> 00:02:23.050
It requires extra storage space because

00:02:23.050 --> 00:02:28.375
every recursive calls separate memory will be allocated for the variables.

00:02:28.375 --> 00:02:31.284
The recursive function also throw

00:02:31.284 --> 00:02:38.409
a Stack Overflow Exception when processing or operations are too large.

00:02:38.580 --> 00:02:42.385
If you are interested to know more about recursion,

00:02:42.384 --> 00:02:45.394
please take a look at the link I gave you.

00:02:45.395 --> 00:02:51.250
We have a coding problem that can use to practice recursion.

