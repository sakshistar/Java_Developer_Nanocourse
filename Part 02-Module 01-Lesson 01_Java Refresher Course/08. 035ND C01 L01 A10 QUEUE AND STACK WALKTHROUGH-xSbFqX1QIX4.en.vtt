WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.009
Hopefully, you solved the problem yourself.

00:00:02.009 --> 00:00:05.804
If not, let's walk through the problem together.

00:00:05.804 --> 00:00:08.490
So for this coding exercise,

00:00:08.490 --> 00:00:14.129
we want to calculate the formula in the string,

00:00:14.130 --> 00:00:19.500
where we need to pass the number here from a string,

00:00:19.500 --> 00:00:23.070
we need to pass the operator here from a string.

00:00:23.070 --> 00:00:25.199
What we can do is,

00:00:25.199 --> 00:00:29.879
we can use a stack to store the result,

00:00:29.879 --> 00:00:31.724
we can graded already,

00:00:31.725 --> 00:00:37.425
and just preparing for our next number.

00:00:37.424 --> 00:00:43.034
So what do we do is we first do a check to making sure

00:00:43.034 --> 00:00:50.669
that the string is not long and the string is not empty,

00:00:50.670 --> 00:00:56.954
and we are initiating a stack with a integer.

00:00:56.954 --> 00:01:00.439
So initially, they have a number as zero,

00:01:00.439 --> 00:01:07.924
we defy our sign vicious operator is either positive or negative.

00:01:07.924 --> 00:01:14.194
Then we are looping through this string with the characters we have.

00:01:14.194 --> 00:01:19.309
If the character is a number,

00:01:19.310 --> 00:01:22.920
we're adding that to the number we have.

00:01:24.159 --> 00:01:27.545
If the character is not a digit,

00:01:27.545 --> 00:01:29.170
which means that it's the operator.

00:01:29.170 --> 00:01:36.924
So we check if the operator is minus,

00:01:36.924 --> 00:01:40.304
we push the result to our stack.

00:01:40.305 --> 00:01:42.630
If the operator is a plus,

00:01:42.629 --> 00:01:44.655
we pushed that to our stack.

00:01:44.655 --> 00:01:49.623
If this operator is a multiple, is a times,

00:01:49.623 --> 00:01:54.089
we need to pop the first number on the result from

00:01:54.090 --> 00:01:59.174
the stack and multiply the number we have.

00:01:59.174 --> 00:02:06.344
Then we store our operator and just reset the number.

00:02:06.344 --> 00:02:08.370
At the end of this,

00:02:08.370 --> 00:02:14.433
we're checking how many numbers are there in the stack,

00:02:14.433 --> 00:02:19.259
and we just adding them one by one.

00:02:19.539 --> 00:02:24.275
So we have two test cases for this,

00:02:24.275 --> 00:02:26.480
thus take a look.

00:02:26.479 --> 00:02:31.264
So if you have a string which is 1 plus 2,

00:02:31.264 --> 00:02:33.939
so results should be 3.

00:02:33.939 --> 00:02:39.104
If you have a string which is 1 plus 2 times 5,

00:02:39.104 --> 00:02:40.889
it's results should be 11.

00:02:40.889 --> 00:02:49.799
Let's run this. So as you can see,

00:02:49.800 --> 00:02:52.335
all just two test cases passed,

00:02:52.335 --> 00:02:56.385
and which means we solve the problem.

00:02:56.384 --> 00:02:59.530
Hopefully, you get the right answer yourself.

