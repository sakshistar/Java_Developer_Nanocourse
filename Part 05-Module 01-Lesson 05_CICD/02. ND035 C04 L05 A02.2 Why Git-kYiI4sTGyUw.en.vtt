WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.844
Let me just show you what branching or how branching happens in Git.

00:00:04.844 --> 00:00:09.734
For that, let me take you through this particular codebase.

00:00:09.734 --> 00:00:14.099
So here, Udacity, this,

00:00:14.099 --> 00:00:17.954
is the main branch where everybody,

00:00:17.954 --> 00:00:22.700
all the developers or in our case all the trainers are pushing their code into.

00:00:22.699 --> 00:00:27.445
What I did was I forked a branch out of it.

00:00:27.445 --> 00:00:33.024
So I forked this branch out of the Udacity main branch,

00:00:33.024 --> 00:00:37.354
and now I have my personal branch which is the fork.

00:00:37.354 --> 00:00:42.375
What I did then is I created.

00:00:42.375 --> 00:00:45.795
So I went to this Clone or download,

00:00:45.795 --> 00:00:48.554
and I copied this,

00:00:48.554 --> 00:00:52.289
and just the usual process of Git cloning,

00:00:52.289 --> 00:00:54.030
and I would follow Git cloning.

00:00:54.030 --> 00:00:55.380
I'm not going to run this for you,

00:00:55.380 --> 00:00:57.500
but if I run this,

00:00:57.500 --> 00:01:01.984
apologize for that, it's Git clone not Git cloning.

00:01:01.984 --> 00:01:04.549
So I'm not going to run this command,

00:01:04.549 --> 00:01:12.399
but this is how I would be able to fetch all the code that is in this particular fork.

00:01:12.400 --> 00:01:15.074
The first time you fork,

00:01:15.073 --> 00:01:19.054
your code base will be the same as the master code base.

00:01:19.055 --> 00:01:23.975
So there is going to be no difference in the code.

00:01:23.974 --> 00:01:26.494
But what you would do is,

00:01:26.495 --> 00:01:29.410
you would clone the fork,

00:01:29.409 --> 00:01:33.364
and then you start making changes to your fork.

00:01:33.364 --> 00:01:34.849
What that would do is,

00:01:34.849 --> 00:01:38.059
that would create differences between the branch that you

00:01:38.060 --> 00:01:43.640
originally got the code from and now fork.

00:01:43.640 --> 00:01:47.944
So let's say that I already have a few changes in my fork.

00:01:47.944 --> 00:01:49.894
How do I see what the changes are?

00:01:49.894 --> 00:01:52.589
I'm going to run Git status command,

00:01:52.590 --> 00:01:54.465
and these are my changes.

00:01:54.465 --> 00:01:56.090
You would see that

00:01:56.090 --> 00:02:02.570
all the green files are the new files and everything in red is the modification.

00:02:02.569 --> 00:02:06.784
So pretty much all of these is the difference.

00:02:06.784 --> 00:02:08.599
These are my differences.

00:02:08.599 --> 00:02:13.699
Just remember that you would not go ahead and

00:02:13.699 --> 00:02:19.939
commit these dot or these files into the codebase,

00:02:19.939 --> 00:02:24.544
you would only commit the data or the files that you,

00:02:24.544 --> 00:02:30.429
for example, I would not go ahead and add this particular file into the code base.

00:02:30.430 --> 00:02:32.205
These are not required.

00:02:32.205 --> 00:02:37.100
The best way to ignore them or having them not show

00:02:37.099 --> 00:02:42.229
active status is to add them to the.Gitignore file.

00:02:42.229 --> 00:02:47.234
So you would add that to a hidden file called Gitignore,

00:02:47.235 --> 00:02:53.300
and I would leave that as a challenge to you that you go ahead and try

00:02:53.300 --> 00:02:59.450
to add any of these unusable files into your Gitignore.

00:02:59.449 --> 00:03:01.129
So go ahead and try that,

00:03:01.129 --> 00:03:06.109
and at the same time I would also encourage you to try to practice as many Git commands

00:03:06.110 --> 00:03:11.115
as you can while you're working on your codebase.

00:03:11.115 --> 00:03:13.400
So this is one very useful command,

00:03:13.400 --> 00:03:21.439
and then what I would do is I would pick and choose which ever change I want to add.

00:03:21.439 --> 00:03:23.090
This is what I do personally,

00:03:23.090 --> 00:03:28.789
I would just go ahead and add them one by one and not everything together.

00:03:28.789 --> 00:03:37.204
The way to do this is- so it says fatal parts spec did not match any file.

00:03:37.205 --> 00:03:40.040
So this is complaining about it because there is

00:03:40.039 --> 00:03:43.759
a space and it's not able to identify it.

00:03:43.759 --> 00:03:46.715
But that's fine.

00:03:46.715 --> 00:03:52.879
I'm going to show how you can add all the files or all the changes in one go.

00:03:52.879 --> 00:03:57.079
I wouldn't recommend it but I've seen some people do it.

00:03:57.080 --> 00:04:01.265
If you have seen or verified all the changes and you're good to go,

00:04:01.264 --> 00:04:03.125
then just do Git add.,

00:04:03.125 --> 00:04:06.949
and it adds everything to your commit.

00:04:06.949 --> 00:04:08.435
How would you check this?

00:04:08.435 --> 00:04:10.594
Is by doing Git status again.

00:04:10.594 --> 00:04:13.729
So now, it gives you the list of

00:04:13.729 --> 00:04:17.509
everything that's going to be pushed with this particular change.

00:04:17.509 --> 00:04:21.834
So Git status leads to all these changes being pushed,

00:04:21.834 --> 00:04:24.049
and I'm not going to push this, but I'm just showing it to

00:04:24.050 --> 00:04:27.134
you for the sake of understanding this.

00:04:27.134 --> 00:04:31.610
You can run Git reset to undo the change that you just did.

00:04:31.610 --> 00:04:36.410
So which is known at that for the commit.

00:04:36.410 --> 00:04:38.990
So now we're back to where we were before.

00:04:38.990 --> 00:04:42.050
The next thing that I would like you to take attention

00:04:42.050 --> 00:04:45.454
to is this very useful command called Git commit.

00:04:45.454 --> 00:04:48.844
Now this is where your actual commit happens.

00:04:48.845 --> 00:04:54.540
I would use minus m to add a comment for this commit.

00:04:54.540 --> 00:04:57.860
Usually, if you have the specific commit,

00:04:57.860 --> 00:05:00.949
I go into the detail of even adding

00:05:00.949 --> 00:05:07.829
the Jira bug number or if I go as detailed as I want do.

00:05:07.829 --> 00:05:12.099
Sometimes it's not possible to add a lot of comment,

00:05:12.100 --> 00:05:16.730
but I would for right now I could just say clean up,

00:05:16.730 --> 00:05:18.905
and I could add that.

00:05:18.904 --> 00:05:21.464
But since I hadn't added it,

00:05:21.464 --> 00:05:25.519
it didn't really commit into anything but I'm just trying

00:05:25.519 --> 00:05:30.310
to show the commit message to you or the use of Git commit to you.

00:05:30.310 --> 00:05:33.375
So minus m is for the commit message.

00:05:33.375 --> 00:05:37.295
The last thing that you would do after that is Git push.

00:05:37.295 --> 00:05:41.150
Now you would push to your fork.

00:05:41.149 --> 00:05:49.354
Now, one thing to do before you push is to figure out what is your remote like,

00:05:49.355 --> 00:05:54.920
and how do you check this is by running Git remote with minus V. So this

00:05:54.920 --> 00:06:01.300
tells me that right now I have only one remote which is origin,

00:06:01.300 --> 00:06:06.860
and that is the main branch which means that whatever I'm going to try to push right

00:06:06.860 --> 00:06:12.150
now is going to go to the Udacity main branch and I do not want that.

00:06:12.149 --> 00:06:14.779
What I want to do is I want to push it to my fork.

00:06:14.779 --> 00:06:21.294
So what I will do is I would add another remote and call it upstream.

00:06:21.295 --> 00:06:26.990
Technically, upstream should be the main branch and origin should be the fork because I'm

00:06:26.990 --> 00:06:32.810
fetching from the origin and then pushing it to upstream later on.

00:06:32.810 --> 00:06:36.714
So I'm going to remove this remote.

00:06:36.714 --> 00:06:39.904
So I would run this.

00:06:39.904 --> 00:06:42.739
So it's asking me for the name.

00:06:42.740 --> 00:06:47.889
So I'm going to remove origin,

00:06:47.889 --> 00:06:50.279
and this was successful.

00:06:50.279 --> 00:06:56.569
So now, I do not have any remote and how do I check this is by wanting this.

00:06:56.569 --> 00:07:02.014
So there was no remote anymore after this command was run.

00:07:02.014 --> 00:07:05.870
So what I'm going to do now is I'm going to create

00:07:05.870 --> 00:07:09.694
a remote and that I'm going to do from the fork.

00:07:09.694 --> 00:07:11.589
So I have my fork,

00:07:11.589 --> 00:07:14.669
and I'm going to go back to this,

00:07:14.670 --> 00:07:18.824
and I would run Git clone,

00:07:18.824 --> 00:07:23.414
and now I run this again.

00:07:23.415 --> 00:07:28.550
So I just run Git clone and I cleared the screen so that I could show you what

00:07:28.550 --> 00:07:33.259
happens after I have cloned it from the fork.

00:07:33.259 --> 00:07:38.485
So when I type Git remote minus v now,

00:07:38.485 --> 00:07:43.550
you see the user for this which means that now it's from my fork.

00:07:43.550 --> 00:07:45.500
So this code base is from my fork.

00:07:45.500 --> 00:07:49.310
So let me go ahead and quickly make

00:07:49.310 --> 00:07:54.379
some changes on my local so that I can try to push that.

00:07:54.379 --> 00:08:00.305
So now, we have the code-based fetched from my fork,

00:08:00.305 --> 00:08:02.829
and I'm also going to create the upstream,

00:08:02.829 --> 00:08:07.175
and since I want the main branch to be the upstream,

00:08:07.175 --> 00:08:10.759
I copied that location,

00:08:10.759 --> 00:08:18.230
and now I'm going to add another remote and I'm going to call it upstream,

00:08:18.230 --> 00:08:24.335
and now I have origin and upstream.

00:08:24.334 --> 00:08:29.209
So origin is my fork and upstream is the main branch.

00:08:29.209 --> 00:08:33.904
So all the developers can have their own origin where they

00:08:33.904 --> 00:08:39.254
keep making all the changes that they had been intending to make,

00:08:39.254 --> 00:08:42.399
and the upstream is in our case,

00:08:42.399 --> 00:08:46.909
the master where all their changes are going to be merged.

00:08:46.909 --> 00:08:50.959
So for the sake of understanding this,

00:08:50.960 --> 00:08:52.280
I've made a few changes.

00:08:52.279 --> 00:08:56.345
The only change that I've made is add a print line.

00:08:56.345 --> 00:09:00.920
So let's look at what it's going to look like.

00:09:00.919 --> 00:09:05.404
So I have these changes and if I want to see what changes I've made,

00:09:05.404 --> 00:09:09.829
I could just go ahead and diff it,

00:09:09.830 --> 00:09:13.379
and that shows the exact change I have.

00:09:13.379 --> 00:09:15.720
If I'm okay with the difference,

00:09:15.720 --> 00:09:24.915
then I can go ahead and add this change and commit it like we had mentioned before.

00:09:24.914 --> 00:09:31.009
Now, that was a very quick and short tutorial for Git.

00:09:31.009 --> 00:09:37.314
Let's move on to the next part where this particular change that I have made,

00:09:37.315 --> 00:09:39.210
for example, as a developer,

00:09:39.210 --> 00:09:44.075
is going to trigger the Jenkins pipeline

00:09:44.075 --> 00:09:51.030
and how the entire pipeline follows from there.

