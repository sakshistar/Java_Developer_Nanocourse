WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.260
In a lot of companies,

00:00:01.260 --> 00:00:05.325
developers do not do the DevOps part of the operations.

00:00:05.325 --> 00:00:09.675
There are separate teams that take care of the DevOps part of the operations.

00:00:09.675 --> 00:00:13.140
By DevOps I'm mean that team that is primarily responsible

00:00:13.140 --> 00:00:16.725
for setting up the CICD pipeline,

00:00:16.725 --> 00:00:21.375
or taking care of issues that weighs in the setup.

00:00:21.375 --> 00:00:29.910
Sometimes what happens is that both the DevOps as well as developer team is all single,

00:00:29.910 --> 00:00:33.659
so the developer is also supposed to understand or be

00:00:33.659 --> 00:00:37.609
able to build the Jenkins pipeline or the CICD pipeline,

00:00:37.609 --> 00:00:39.829
and is responsible to take care of

00:00:39.829 --> 00:00:42.964
the entire deployment process in different environments.

00:00:42.965 --> 00:00:46.135
So whichever model you work on,

00:00:46.134 --> 00:00:50.553
knowing these skills is definitely going to be extremely important

00:00:50.554 --> 00:00:55.160
and be helpful so that you can at least interact with a DevOps team,

00:00:55.159 --> 00:00:58.009
or maybe you choose to be in the DevOps team.

00:00:58.009 --> 00:01:02.939
Let's look into the origin of the entire pipeline which is the source control.

00:01:02.939 --> 00:01:05.234
We are going to take example of Git here.

00:01:05.234 --> 00:01:08.834
You have been using Git for all the previous lessons

00:01:08.834 --> 00:01:13.474
so I'm pretty sure that you are a little more comfortable with it already.

00:01:13.474 --> 00:01:16.239
There are two or three topics that I'd like to cover,

00:01:16.239 --> 00:01:21.289
you don't need to master Git for starting this pipeline.

00:01:21.290 --> 00:01:29.015
But it will be nice to understand how merging and branching works in this.

00:01:29.015 --> 00:01:31.840
So back in the day,

00:01:31.840 --> 00:01:35.750
we used to use something called CVS or subversion

00:01:35.750 --> 00:01:39.950
world where merging and branching was extremely complicated.

00:01:39.950 --> 00:01:45.984
However, Git happens to be centralized, but still decentralized.

00:01:45.984 --> 00:01:52.609
What this means is that merging and branching are the core part of the daily workflow.

00:01:52.609 --> 00:02:01.519
So which is why Git happens to be an extremely good choice for source control for us.

00:02:01.519 --> 00:02:06.349
Let's look at how branching works in Git.

00:02:06.349 --> 00:02:10.354
Let's say that we have one branch,

00:02:10.354 --> 00:02:14.219
and let's call this massiver convenience,

00:02:14.219 --> 00:02:21.469
and in a lot of companies they use a convention of calling the main branch as master.

00:02:21.469 --> 00:02:24.770
However there is no concept of main range.

00:02:24.770 --> 00:02:25.880
It's a distributed system,

00:02:25.879 --> 00:02:29.079
so any branch can be technically a main branch,

00:02:29.080 --> 00:02:31.730
and any branch can technically be

00:02:31.729 --> 00:02:35.659
a non-main branch irrespective of what name they give you.

00:02:35.659 --> 00:02:39.185
So when your work as a developer is to

00:02:39.185 --> 00:02:44.240
understand which branch is the main branch where development happens,

00:02:44.240 --> 00:02:47.180
and which branch happens to be the production branch.

00:02:47.180 --> 00:02:50.870
Now, in this particular model that I am talking about,

00:02:50.870 --> 00:02:55.340
we will be speaking about just the branching technology.

00:02:55.340 --> 00:02:59.569
So we are talking about let's say the Dev branch here.

00:02:59.569 --> 00:03:02.239
So this is our development branch,

00:03:02.240 --> 00:03:06.155
and we have four developers in this system.

00:03:06.155 --> 00:03:12.314
All these blue branches are developers.

00:03:12.314 --> 00:03:14.710
So at any point in time,

00:03:14.710 --> 00:03:19.670
any developer as you see here is able to pull from

00:03:19.669 --> 00:03:22.759
the development branch and also merge

00:03:22.759 --> 00:03:26.234
their code into the development branch or the Dev branch.

00:03:26.235 --> 00:03:27.795
At the same time,

00:03:27.794 --> 00:03:35.644
Git also allows you to fetch the code from your peer branches as well.

00:03:35.645 --> 00:03:39.675
So let's call this user A and this is user B.

00:03:39.675 --> 00:03:41.515
So user A and B,

00:03:41.514 --> 00:03:48.559
if they are working on one specific feature which user C and D are not working on,

00:03:48.560 --> 00:03:54.425
then they can collaborate by fetching and merging into each other's branch.

00:03:54.425 --> 00:03:59.445
This is what we would call a subteam system.

00:03:59.444 --> 00:04:02.129
So since it is distributed,

00:04:02.129 --> 00:04:05.659
Git allows you all these functionalities.

00:04:05.659 --> 00:04:12.844
Next what we're going to understand is how we do that on the Git UI.

00:04:12.844 --> 00:04:17.764
But in case you want to learn more about Git,

00:04:17.764 --> 00:04:25.229
I would be linking the videos to Udacity free courses that talk more in-depth about Git.

