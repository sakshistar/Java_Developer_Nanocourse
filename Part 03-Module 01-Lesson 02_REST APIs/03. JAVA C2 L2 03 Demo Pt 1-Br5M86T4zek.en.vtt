WEBVTT
Kind: captions
Language: en

00:00:01.550 --> 00:00:08.250
First, I'm going to show you how to bootstrap an application using the Spring Initializr,

00:00:08.250 --> 00:00:14.099
then I'm going to show you the required annotations for developing a RESTful API.

00:00:14.099 --> 00:00:18.390
Then I'm going to show you how to deploy and test that API.

00:00:18.390 --> 00:00:19.789
In this case study,

00:00:19.789 --> 00:00:23.750
we are developing an API that returns a list of locations.

00:00:23.750 --> 00:00:25.414
Let's get started.

00:00:25.414 --> 00:00:26.960
In this case study,

00:00:26.960 --> 00:00:32.975
we are developing a simple API that returns a list of airport locations.

00:00:32.975 --> 00:00:35.240
You can clone the code from the link posted in

00:00:35.240 --> 00:00:38.359
the course notes or you can just follow along with me.

00:00:38.359 --> 00:00:45.119
I've navigated to the Spring Initializr website so it's start.spring.io.

00:00:45.119 --> 00:00:50.030
Spring Initializr allows you to quickly generate the base code needed

00:00:50.030 --> 00:00:55.219
for your project and it includes all of the dependencies you need in the Maven POM file.

00:00:55.219 --> 00:01:00.664
You can also use this Spring Initializr feature from a plug-in in your IDE,

00:01:00.664 --> 00:01:03.229
but in this case we're just going to the website.

00:01:03.229 --> 00:01:06.965
We are going to start by selecting a Maven project,

00:01:06.965 --> 00:01:08.975
Java as the language,

00:01:08.974 --> 00:01:12.934
just use the most recent defaulted version here.

00:01:12.935 --> 00:01:17.030
For the project metadata let's make it more specific.

00:01:17.030 --> 00:01:23.510
Let's call this Udacity and for the artifact let's call it Bootstrap.

00:01:23.510 --> 00:01:26.240
Here this dependencies section is very

00:01:26.239 --> 00:01:29.929
important and it's really neat because it allows you to search for

00:01:29.930 --> 00:01:34.370
the different dependencies that you need and then it will automatically include

00:01:34.370 --> 00:01:39.579
those dependencies in the Maven POM file when it generates your source code.

00:01:39.579 --> 00:01:43.185
So because we are doing a RESTful API,

00:01:43.185 --> 00:01:44.909
we need to include web.

00:01:44.909 --> 00:01:50.299
Click on it here and now it shows up under the selected dependencies section.

00:01:50.299 --> 00:01:52.759
This starter dependency is used for

00:01:52.760 --> 00:01:58.594
web application development and it automatically adds libraries like Spring MVC,

00:01:58.594 --> 00:02:02.629
RESTful, Tomcat, Jackson, et cetera.

00:02:02.629 --> 00:02:06.000
We'll talk a lot about these different dependencies later on.

00:02:06.000 --> 00:02:11.569
To actually store the data we are using an H2 in-memory database,

00:02:11.569 --> 00:02:14.659
so search for H2 and select it.

00:02:14.659 --> 00:02:17.064
It appears on the right-hand side.

00:02:17.064 --> 00:02:19.919
Lastly, we need JPA,

00:02:19.919 --> 00:02:22.155
so Spring Data JPA.

00:02:22.155 --> 00:02:26.074
This starter dependency includes JDBC,

00:02:26.074 --> 00:02:29.219
Hibernate, JPA, et cetera.

00:02:29.219 --> 00:02:34.819
Mainly features that we need in order to interact with a database.

00:02:34.819 --> 00:02:38.884
At this point I've included the three dependencies that we need.

00:02:38.884 --> 00:02:44.944
You can click on Generate project and it will generate this bootstrap.zip file.

00:02:44.944 --> 00:02:48.724
I've already generated the file, downloaded it,

00:02:48.724 --> 00:02:52.939
unzipped it and opened it in my IntelliJ IDEA.

00:02:52.939 --> 00:02:55.564
So let's navigate to IntelliJ.

00:02:55.564 --> 00:03:01.400
The first file that it automatically generated for us is this Maven POM file.

00:03:01.400 --> 00:03:03.310
So let's see what's included.

00:03:03.310 --> 00:03:09.534
JPA as expected, the Spring Boot Starter web as expected,

00:03:09.534 --> 00:03:14.030
the H2 database and it also automatically includes

00:03:14.030 --> 00:03:16.729
the Spring Boot starter tests because anytime

00:03:16.729 --> 00:03:19.429
you write code you should write test cases as well.

00:03:19.430 --> 00:03:22.715
Now, if you're not familiar with H2,

00:03:22.715 --> 00:03:25.925
it's an open source database written in Java.

00:03:25.925 --> 00:03:31.895
It's in-memory which means that the data is stored in memory and not persisted to disk.

00:03:31.895 --> 00:03:35.770
Now, H2 is great for development environments,

00:03:35.770 --> 00:03:38.070
doing small simple POC's,

00:03:38.069 --> 00:03:40.969
it's never really used in a production environment.

00:03:40.969 --> 00:03:45.724
Now, the nice thing is that H2 can be easily integrated with spring

00:03:45.724 --> 00:03:51.229
and it also provides a useful admin tool called the console that we'll look at.

00:03:51.229 --> 00:03:55.204
The next file to open here is the application.properties.

00:03:55.205 --> 00:03:59.420
I've just added some configuration for the H2 in memory database.

00:03:59.419 --> 00:04:05.274
I'm enabling the console and I'm setting the path as flash H2.

00:04:05.275 --> 00:04:11.189
Then I'm adding the database URL here and its location tracker.

