WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
Now, let's go ahead and start writing some test on the helper class.

00:00:06.000 --> 00:00:10.019
Okay. So I'm going to write a test for getCount.

00:00:10.019 --> 00:00:15.099
Now, let's start with our test annotation.

00:00:15.740 --> 00:00:26.265
I'm going to write public void test1 and I'm going to write assertEquals.

00:00:26.265 --> 00:00:29.445
I need to call that method first of all,

00:00:29.445 --> 00:00:32.564
so I'm going to call getCount.

00:00:32.564 --> 00:00:34.574
What does getCount take?

00:00:34.575 --> 00:00:36.120
It takes a list of strings.

00:00:36.119 --> 00:00:39.909
So I'm going to create a list of strings over here.

00:00:40.609 --> 00:00:44.879
Okay. It's auto-importing strings.

00:00:44.880 --> 00:00:48.370
Let me call them empNames,

00:00:48.369 --> 00:00:53.009
and what I'm going to do here is I'm going to create

00:00:53.920 --> 00:01:02.710
a list of names, Sareeta and Udacity.

00:01:03.079 --> 00:01:06.319
Now this is not a list of strings.

00:01:06.319 --> 00:01:13.389
So how do we create a list of strings is we call Arrays.asList from this.

00:01:13.390 --> 00:01:16.055
So now we have a list of strings here.

00:01:16.055 --> 00:01:21.050
Now we want to pass this value into here, into this message,

00:01:21.049 --> 00:01:24.834
and we want to get this in a variable,

00:01:24.834 --> 00:01:27.775
so I did an option enter.

00:01:27.775 --> 00:01:32.300
A good developer would know at least a few shortcuts,

00:01:32.299 --> 00:01:37.039
if not all, and this comes in very handy because it reduces your development time.

00:01:37.040 --> 00:01:40.984
It's like being extremely good at typing but just better.

00:01:40.984 --> 00:01:44.599
So I'm going to introduce a new variable here,

00:01:44.599 --> 00:01:47.839
let's call this actual.

00:01:47.840 --> 00:01:51.395
So here we go.

00:01:51.394 --> 00:01:53.689
So now why did I call this actual?

00:01:53.689 --> 00:01:57.319
I called this actual because this is

00:01:57.319 --> 00:02:03.109
the actual value that I obtained when I called the helper method.

00:02:03.109 --> 00:02:05.140
So this is my actual,

00:02:05.140 --> 00:02:10.189
and what I need to add first is the expected.

00:02:10.189 --> 00:02:12.770
So let's put the expected.

00:02:12.770 --> 00:02:16.100
So what would be the count of this?

00:02:16.099 --> 00:02:19.030
The count of this is going to be two.

00:02:19.030 --> 00:02:24.020
So let's run this test and see what happens.

00:02:24.020 --> 00:02:27.605
So the actual was zero,

00:02:27.604 --> 00:02:29.494
and the expected was two.

00:02:29.495 --> 00:02:32.375
All right. Now, that doesn't seem right.

00:02:32.375 --> 00:02:34.969
Let's take a look at what happened here,

00:02:34.969 --> 00:02:40.310
and this is when I'm going to introduce the concept called debugging to you.

00:02:40.310 --> 00:02:45.360
So how you would debug is you would right-click and click on this option,

00:02:45.360 --> 00:02:47.360
the second option that we spoke about earlier,

00:02:47.360 --> 00:02:49.010
it's called Debug test.

00:02:49.009 --> 00:02:52.879
Now, debugger can be one on actual code as well,

00:02:52.879 --> 00:02:54.215
as well as on tests,

00:02:54.215 --> 00:02:58.879
and what debug helps you to do is it helps you to navigate slowly through

00:02:58.879 --> 00:03:04.234
your code to identify where exactly in the code did you have a problem.

00:03:04.235 --> 00:03:07.925
So let's put some breakpoints.

00:03:07.925 --> 00:03:12.660
Breakpoints are nothing but letting the ID or intelligent,

00:03:12.659 --> 00:03:16.174
in this case, know that this is where I want the program to stop.

00:03:16.175 --> 00:03:20.070
So I'm going to right-click on this and click Debug.

00:03:20.509 --> 00:03:24.049
Now you see its stopped at this debug point,

00:03:24.050 --> 00:03:28.490
and I'm going to go inside this method and I'm going to add this,

00:03:28.490 --> 00:03:32.120
this again, and these are

00:03:32.120 --> 00:03:38.224
the options that are going to help me navigate inside the debug window.

00:03:38.224 --> 00:03:43.009
One more thing that you might want to look at is this particular option called Evaluate.

00:03:43.009 --> 00:03:48.139
Now this is an extremely handy tool that the ID provides to us.

00:03:48.139 --> 00:03:57.199
I can copy this entire piece of code and add that over here and click Evaluate,

00:03:57.199 --> 00:04:03.304
which tells me the output that this would give before it's one.

00:04:03.305 --> 00:04:05.105
So that's extremely handy.

00:04:05.104 --> 00:04:10.054
Another thing that you should be taking a look at is this Variables section,

00:04:10.055 --> 00:04:12.965
which tells us what

00:04:12.965 --> 00:04:19.204
the insides of this particular string or whatever variables are available.

00:04:19.204 --> 00:04:22.774
What do those variables contain?

00:04:22.774 --> 00:04:25.989
What is the state of those variables or the values inside them?

00:04:25.990 --> 00:04:29.120
So that is how you would debug this further,

00:04:29.120 --> 00:04:30.680
and let's debug this.

00:04:30.680 --> 00:04:38.975
So the string size is two and we ran a stream on,

00:04:38.975 --> 00:04:41.800
and then filtered out is empty,

00:04:41.800 --> 00:04:43.610
and then did a count on it.

00:04:43.610 --> 00:04:47.165
So let's run this one more time.

00:04:47.165 --> 00:04:49.900
So I'm going to evaluate this method again,

00:04:49.899 --> 00:04:54.329
and let's open an Evaluate window.

00:04:54.329 --> 00:05:00.894
These are called views and I'm going to copy this piece of code out here.

00:05:00.894 --> 00:05:03.659
I'm going to copy, place it over here,

00:05:03.660 --> 00:05:07.990
and see if it's evaluated to zero.

00:05:08.120 --> 00:05:13.970
So it already tells me that the value is going to be zero.

00:05:13.970 --> 00:05:17.555
So now I'm going to play around a little bit and see what happens,

00:05:17.555 --> 00:05:21.725
and I see that there are two values.

00:05:21.725 --> 00:05:24.875
I get the first value here,

00:05:24.875 --> 00:05:27.735
which is going to be Sareeta, is an empty.

00:05:27.735 --> 00:05:32.439
No. So here it's going to filter it out,

00:05:32.439 --> 00:05:35.314
which means that the count is zero.

00:05:35.314 --> 00:05:39.774
What I'm going to do right now is I'm going to change this code.

00:05:39.774 --> 00:05:44.974
At one time, I can test what is going to be the value.

00:05:44.975 --> 00:05:47.735
So I'm going to run that again.

00:05:47.735 --> 00:05:51.215
Okay. That will wait again.

00:05:51.214 --> 00:05:55.875
I'm going to put this here and okay.

00:05:55.875 --> 00:05:57.425
So this is what I wanted.

00:05:57.425 --> 00:06:00.064
So this tool is extremely helpful.

00:06:00.064 --> 00:06:03.860
Now, what I'm going to do is I'm going to stop this test.

00:06:03.860 --> 00:06:08.100
I'm going to go and modify my code and add that,

00:06:08.100 --> 00:06:10.145
and now I'm going to rerun the test.

00:06:10.144 --> 00:06:11.990
Since I've already debugged it,

00:06:11.990 --> 00:06:13.595
I'm just going to run it this time.

00:06:13.595 --> 00:06:17.915
Okay. Great. We just wrote our first successful test.

00:06:17.915 --> 00:06:21.410
Now let's look at what we can do in order

00:06:21.410 --> 00:06:24.995
to make this look better than what it looks at this point in time.

00:06:24.995 --> 00:06:31.790
The first and the foremost thing that you take a look at this one is that it says test1.

00:06:31.790 --> 00:06:39.240
Now, let me run this entire class and show you this window.

00:06:39.240 --> 00:06:45.134
Let's say that I did not have this class open and this is all I see.

00:06:45.134 --> 00:06:47.670
So now when I look at this console,

00:06:47.670 --> 00:06:50.254
I see that it says test1 and test.

00:06:50.254 --> 00:06:54.529
This does not really give me any insight into what this test contains.

00:06:54.529 --> 00:06:57.144
So in order to find out what test1 did for me,

00:06:57.144 --> 00:06:59.314
I will have to go through the code and beat it.

00:06:59.314 --> 00:07:01.879
How about we just name it in

00:07:01.879 --> 00:07:03.920
a very meaningful fashion so that we don't really

00:07:03.920 --> 00:07:06.259
have to go through the code to find out?

00:07:06.259 --> 00:07:07.819
Because in real scenarios,

00:07:07.819 --> 00:07:12.800
you would have hundreds of test cases and nobody is going to have time to go over

00:07:12.800 --> 00:07:19.025
the test1 to 1,000 or test1 to 100 to see what each of those tests were doing.

00:07:19.024 --> 00:07:22.219
So what I'm going do is I'm going to give it a meaningful name.

00:07:22.220 --> 00:07:24.980
Meaningful name could be anything of your preference.

00:07:24.980 --> 00:07:29.840
My preference is just going to be to write verify getCount in here so

00:07:29.839 --> 00:07:35.654
that I at least know that I'm verifying the getCount method from the helper class.

00:07:35.654 --> 00:07:37.559
So that is good enough for me.

00:07:37.560 --> 00:07:40.850
You may find yourself writing different names depending

00:07:40.850 --> 00:07:45.080
on what is the exact objective of testing that particular unit,

00:07:45.079 --> 00:07:49.729
and that is subject to your personal preference or whatever your project follows.

00:07:49.730 --> 00:07:55.520
I would suggest that you follow whatever nomenclature you follow in your applications.

00:07:55.519 --> 00:07:57.169
Back in the day though,

00:07:57.170 --> 00:08:00.740
people used to write test in the very beginning of the class,

00:08:00.740 --> 00:08:03.454
but I find that a little redundant because

00:08:03.454 --> 00:08:06.769
at that point in time we did not have the test annotation.

00:08:06.769 --> 00:08:10.608
So it made sense to add test in front of every method,

00:08:10.608 --> 00:08:14.810
but I don't want to do that since we already have a test annotation available here,

00:08:14.810 --> 00:08:17.964
which anyway depicts that it's a test.

00:08:17.964 --> 00:08:24.625
Now, let's look at writing one more test for helper class,

00:08:24.625 --> 00:08:27.428
and then as a short exercise,

00:08:27.428 --> 00:08:29.559
I would suggest you write

00:08:29.560 --> 00:08:34.345
one more test for one of the other methods that has not been explained to you.

00:08:34.345 --> 00:08:37.254
So let me start with test,

00:08:37.254 --> 00:08:44.289
public void and verify,

00:08:44.289 --> 00:08:47.115
let's take a look at this class.

00:08:47.115 --> 00:08:51.044
I'm thinking I'm going to call getStats,

00:08:51.044 --> 00:08:57.434
verify getStats, and what does it take? It takes expYears.

00:08:57.434 --> 00:08:59.669
I'm going to get that from here,

00:08:59.669 --> 00:09:04.724
expYears, which is a list of integers,

00:09:04.725 --> 00:09:10.514
and I'm going to assertEquals and

00:09:10.514 --> 00:09:16.019
I'm going to assert the getStats method.

00:09:16.019 --> 00:09:18.750
So I need to call that getStats method,

00:09:18.750 --> 00:09:26.514
Helper.getStats, and I'm going to pass yrsOfExperience into it.

00:09:26.514 --> 00:09:30.929
So now what this is going to give me,

00:09:31.600 --> 00:09:35.120
it gives an IntSummaryStatistics.

00:09:35.120 --> 00:09:43.115
I am going to call getMax on this.

00:09:43.115 --> 00:09:45.500
So now what this method does,

00:09:45.500 --> 00:09:48.139
if you go through, let me just quickly walk you through that.

00:09:48.139 --> 00:09:52.009
So here it gives you the summary of statistics,

00:09:52.009 --> 00:09:56.014
and the return type is IntSummaryStatistics.

00:09:56.014 --> 00:09:58.205
It's in both method,

00:09:58.205 --> 00:10:03.770
and running getMax on it is going to give me 13,

00:10:03.769 --> 00:10:07.625
4, 15, 6, 17, 19.

00:10:07.625 --> 00:10:09.095
It will give me 19.

00:10:09.095 --> 00:10:11.855
So my expected is 19,

00:10:11.855 --> 00:10:13.610
and this is my actual.

00:10:13.610 --> 00:10:15.575
So let's run this.

00:10:15.575 --> 00:10:19.240
Great. So this was our second successful test case,

00:10:19.240 --> 00:10:24.465
and what I'm trying to do here is I'm trying to make

00:10:24.465 --> 00:10:30.215
a place holder for showing another extremely good functionality of assertEquals,

00:10:30.215 --> 00:10:36.899
which is comparing arrays or lists pretty much.

00:10:36.899 --> 00:10:40.014
This is actually a list comparison.

00:10:40.014 --> 00:10:47.764
So I'm going to copy this out and I'm going to create expectedList.

00:10:47.764 --> 00:10:53.990
So that is my expected and this is my actual.

00:10:53.990 --> 00:10:57.745
So what I'm trying to verify here is,

00:10:57.745 --> 00:11:00.799
are these two lists comparable?

00:11:00.799 --> 00:11:02.504
Are these two lists,

00:11:02.504 --> 00:11:05.064
if they're compared using assertEquals,

00:11:05.065 --> 00:11:08.180
is the value or the output correct?

00:11:08.179 --> 00:11:11.289
So let me run this.

00:11:11.289 --> 00:11:18.539
Great. So assertEquals is able to take even a list of integer and is able to verify that.

00:11:18.539 --> 00:11:21.009
It doesn't have to be like just an integer,

00:11:21.009 --> 00:11:23.230
it doesn't have to be just a string comparison,

00:11:23.230 --> 00:11:28.240
it can verify or compare the list of integers as well.

00:11:28.240 --> 00:11:30.504
Let's explore assertEquals again,

00:11:30.504 --> 00:11:32.950
but this time instead of a list of integers,

00:11:32.950 --> 00:11:36.355
we are going to test arrays.

00:11:36.355 --> 00:11:39.820
So we have a test and we have

00:11:39.820 --> 00:11:48.020
a public void compare_arrays.

00:11:49.519 --> 00:11:55.225
Now, I use underscores so that it's easier to read.

00:11:55.225 --> 00:11:58.379
I do not like camel case here,

00:11:58.379 --> 00:12:05.585
and here I'm going to have an int array and let's call it the yrs.

00:12:05.585 --> 00:12:11.750
I'm going to create an array 10,14, and 2,

00:12:11.750 --> 00:12:16.639
and I'm going to create another array and call

00:12:16.639 --> 00:12:25.210
it expectedYrs 10,14, 2.

00:12:25.210 --> 00:12:29.225
Now I'm going to run assertEquals on this and do

00:12:29.225 --> 00:12:34.355
expected years versus actual, or what did I call it?

00:12:34.355 --> 00:12:37.430
Yrs. Now I'm going to run this.

00:12:37.429 --> 00:12:40.039
Let's see what happens in this case.

00:12:40.039 --> 00:12:42.169
Okay. This failed.

00:12:42.169 --> 00:12:45.169
Now, it's very easy to see what happened here.

00:12:45.169 --> 00:12:50.389
So we use assertEquals in order to compare two arrays.

00:12:50.389 --> 00:12:55.649
So assertEquals did not really compare the values of the arrays,

00:12:55.649 --> 00:12:58.985
but instead it compared the actual object.

00:12:58.985 --> 00:13:01.875
Therefore, since it's not the same object,

00:13:01.875 --> 00:13:04.125
it failed. How do we fix this?

00:13:04.125 --> 00:13:10.054
What I'm going to do is I'm going to call another method on this called ArrayEquals,

00:13:10.054 --> 00:13:16.250
and we will add the expectedYrs and yrs into it and we'll run this again.

00:13:16.250 --> 00:13:21.500
Great. So this is how we would test or assert arrays.

00:13:21.500 --> 00:13:30.215
Now I challenge you to write one of the tests for one of these methods.

00:13:30.215 --> 00:13:38.855
How about you go over get merged list and write a JUnit for that in this class.

00:13:38.855 --> 00:13:40.220
If you've been following along,

00:13:40.220 --> 00:13:42.528
you would have all these tests already,

00:13:42.528 --> 00:13:49.710
and all I want you to do is look at this method and write a JUnit test for this.

