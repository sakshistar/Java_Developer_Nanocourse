WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.490
I hope you were able to find the Maven dependency.

00:00:02.490 --> 00:00:13.330
If not, it's as simple as typing maven and then you look for mockito dependency.

00:00:14.000 --> 00:00:17.954
Now when you click the first link that is available,

00:00:17.954 --> 00:00:23.684
you'll see the Maven repository and you'll see the mockito-all.

00:00:23.684 --> 00:00:29.474
This is the page that tells us all the versions that are available,

00:00:29.475 --> 00:00:30.975
where are they available,

00:00:30.975 --> 00:00:34.289
what is the current usages and when was this released.

00:00:34.289 --> 00:00:41.185
I'm going to go with 1.10.19 since it seems like a high usage number.

00:00:41.185 --> 00:00:43.050
The moment I click this,

00:00:43.049 --> 00:00:44.699
it gets copied to the clipboard.

00:00:44.700 --> 00:00:47.145
I'm going to go in add it right here.

00:00:47.145 --> 00:00:49.965
So right-click, paste.

00:00:49.965 --> 00:00:52.730
Now what Intellergy is going to do,

00:00:52.729 --> 00:00:56.029
is it's going to start looking for this dependency in

00:00:56.030 --> 00:01:00.760
the Maven repository and it will download the dependency for us.

00:01:00.759 --> 00:01:07.250
So you just saw that it changed the color from red to, I think it's white.

00:01:07.250 --> 00:01:13.189
Then what that means is that it finished downloading the dependency onto your local.

00:01:13.189 --> 00:01:17.569
So that was what we just added.

00:01:17.569 --> 00:01:21.364
Now, let's look at this helper class.

00:01:21.364 --> 00:01:25.069
We want to write the tests for this helper class.

00:01:25.069 --> 00:01:28.538
If you look at the folder structure,

00:01:28.539 --> 00:01:31.575
the test application has src.

00:01:31.575 --> 00:01:34.250
Under src, we have main and tests.

00:01:34.250 --> 00:01:35.810
Main is what contains

00:01:35.810 --> 00:01:40.540
your actual development code and all your tests would go under test.

00:01:40.540 --> 00:01:43.240
Now, why does it have to go on our test?

00:01:43.239 --> 00:01:49.504
So that we can have segregation between actual code and tests.

00:01:49.504 --> 00:01:52.939
The folder structure would look similar.

00:01:52.939 --> 00:01:56.599
Which means that, let's say that you have another sub-folder under

00:01:56.599 --> 00:02:00.694
testing which had helper inside it,

00:02:00.694 --> 00:02:02.149
then in that case,

00:02:02.150 --> 00:02:07.859
you would have to mimic that under testing here again and then you would have to write

00:02:07.859 --> 00:02:12.110
your test for the class that you're trying to write the test

00:02:12.110 --> 00:02:16.865
for with a test added to the end of the class name.

00:02:16.865 --> 00:02:21.110
So I already have this test class here and

00:02:21.110 --> 00:02:25.100
what I'm going to do is I'm going to delete this and I'm going to recreate it.

00:02:25.099 --> 00:02:26.359
As you saw, this was empty.

00:02:26.360 --> 00:02:28.625
I just added it as a place holder.

00:02:28.625 --> 00:02:31.930
That's another terminology that you should know.

00:02:31.930 --> 00:02:35.670
Here. Now, I right-clicked on it and I do

00:02:35.669 --> 00:02:40.905
"New" and I look for tests or I'm creating a Java class.

00:02:40.905 --> 00:02:43.435
This would be a class.

00:02:43.435 --> 00:02:49.930
Like I'd mentioned, since our code is under helper,

00:02:51.469 --> 00:02:56.625
we would usually append test to be innovate which tells us

00:02:56.625 --> 00:03:02.655
that this is the test class for the helper class.

00:03:02.655 --> 00:03:09.865
Now, what I'm going to do is I'm going to start writing some tests in this class.

00:03:09.865 --> 00:03:12.895
But before I start writing that,

00:03:12.895 --> 00:03:17.420
let me introduce a few annotations to you.

00:03:17.419 --> 00:03:20.780
The first one being test.

00:03:20.780 --> 00:03:23.854
Now what this annotation does,

00:03:23.854 --> 00:03:29.704
is that it identifies your method as a test method.

00:03:29.705 --> 00:03:39.950
I am going to write public void test and this is the test that I created.

00:03:39.949 --> 00:03:42.679
So right now it shows as red.

00:03:42.680 --> 00:03:45.620
The test annotation is red because JUnit four was

00:03:45.620 --> 00:03:48.995
not added to the path so I just added that.

00:03:48.995 --> 00:03:56.935
Now, I'm going to add or import junit.test into this class.

00:03:56.935 --> 00:03:59.224
So let me just go ahead and run this.

00:03:59.224 --> 00:04:01.939
Now the moment I added this test,

00:04:01.939 --> 00:04:04.639
I had this availability of Run 'test()',

00:04:04.639 --> 00:04:07.164
Debug 'test()', Run 'test()' with Coverage.

00:04:07.164 --> 00:04:09.169
I'll explain each of them to you.

00:04:09.169 --> 00:04:14.399
But let me just start with the first one which is Run 'test()'.

00:04:14.830 --> 00:04:18.590
So the first and the foremost thing that you notice here is

00:04:18.589 --> 00:04:21.544
that this helper test shows green.

00:04:21.545 --> 00:04:27.620
What this means is that the test passed and as you see there was no method body,

00:04:27.620 --> 00:04:30.694
it just ran on the basis of this annotation test.

00:04:30.694 --> 00:04:35.540
So now, let's look at one of the methods that are available using JUnits.

00:04:35.540 --> 00:04:40.160
Let's start with this method called assertEquals.

00:04:40.160 --> 00:04:45.575
Now this method just ascertains that the first value

00:04:45.574 --> 00:04:51.649
which is the one on the left is the actual.

00:04:51.649 --> 00:04:54.629
Let me add this dependency, first of all.

00:04:55.009 --> 00:05:00.814
Now let's go to the method definition and read a little bit more about it.

00:05:00.814 --> 00:05:05.795
So if you go through the source code of assertEquals,

00:05:05.795 --> 00:05:12.490
you will see that this column contains the first value which is a message,

00:05:12.490 --> 00:05:16.835
the second value which is the object and the third value which is actual.

00:05:16.834 --> 00:05:20.764
So I'm going to go back to the previous implementation.

00:05:20.764 --> 00:05:25.115
According to that, I should technically have a message here.

00:05:25.115 --> 00:05:30.379
Message and the expected value and here,

00:05:30.379 --> 00:05:32.000
I would have some actual value.

00:05:32.000 --> 00:05:35.314
I'm just adding the placeholders right now so that I can fill it later.

00:05:35.314 --> 00:05:38.469
However, this is not the method that I want to call.

00:05:38.470 --> 00:05:41.795
I want to call this method because I don't want to put any message.

00:05:41.795 --> 00:05:43.790
But in actual tests,

00:05:43.790 --> 00:05:45.980
you may want to write messages as well.

00:05:45.980 --> 00:05:47.735
So what this does is that,

00:05:47.735 --> 00:05:51.050
this will empty out the first value which is message

00:05:51.050 --> 00:05:54.800
and then it will pass expected and actual in the right places.

00:05:54.800 --> 00:05:59.240
So what does expected mean and what does actual mean?

00:05:59.240 --> 00:06:00.740
So as you see,

00:06:00.740 --> 00:06:05.569
Intellergy is extremely good at showing you what are

00:06:05.569 --> 00:06:08.165
the expected and actual placeholders so

00:06:08.165 --> 00:06:11.150
you know that this is where I need to put the expected value,

00:06:11.149 --> 00:06:13.024
this is where I need to put the actual value.

00:06:13.024 --> 00:06:16.250
Let's say that I want to verify that

00:06:16.250 --> 00:06:21.514
a number which is 3 is the same as a number which is 3.

00:06:21.514 --> 00:06:23.750
Let me run this test.

00:06:23.750 --> 00:06:28.524
Running this also shows that it passed.

00:06:28.524 --> 00:06:30.779
Let me change it to 4.

00:06:30.779 --> 00:06:32.414
I was expecting a 4,

00:06:32.415 --> 00:06:34.045
but actual, a 3.

00:06:34.045 --> 00:06:35.569
As you may have guessed,

00:06:35.569 --> 00:06:38.194
this is going to produce a failure.

00:06:38.194 --> 00:06:42.274
So let's look at the final result here.

00:06:42.274 --> 00:06:43.909
I'm going to expand this for you.

00:06:43.910 --> 00:06:46.295
As you see, we were expecting a four,

00:06:46.295 --> 00:06:49.340
but we got an actual value of three.

00:06:49.339 --> 00:06:51.859
So this is what assert equal does.

00:06:51.860 --> 00:06:55.655
There are several methods that are available under test.

00:06:55.654 --> 00:07:01.504
Let's go over a few more methods that this assert class gives to us.

00:07:01.504 --> 00:07:04.819
So let's say that we type assert.

00:07:04.819 --> 00:07:09.379
Here are all the overloaded methods that are available to take a look at.

00:07:09.379 --> 00:07:12.680
So as you see, if we pass three float values,

00:07:12.680 --> 00:07:16.360
this is the method that's going to be called so on, so forth.

00:07:16.360 --> 00:07:19.439
We also have a assertNotEquals

00:07:19.439 --> 00:07:24.560
and it takes different forms or different data types as parameters.

00:07:24.560 --> 00:07:32.209
You also could use ArraysEquals which pretty much takes the int array,

00:07:32.209 --> 00:07:35.169
byte arrays and compares it against actuals.

00:07:35.170 --> 00:07:38.675
We will look into this again in the later half.

00:07:38.675 --> 00:07:43.160
So what I would like you to do is at this point in time,

00:07:43.160 --> 00:07:46.730
I would like you to go over all the different methods that are

00:07:46.730 --> 00:07:51.740
available under assert so that in future when you're writing test cases,

00:07:51.740 --> 00:07:56.300
you know already what are the assert methods that you can

00:07:56.300 --> 00:08:02.975
use so it could give you ideas of how to write test or what tests you can write.

00:08:02.975 --> 00:08:06.320
You don't need to memorize all of them because as you see here,

00:08:06.319 --> 00:08:08.000
you have them available to you.

00:08:08.000 --> 00:08:13.490
But it will be a good idea to go over the methods from either the source doc.

00:08:13.490 --> 00:08:15.360
So source doc is nothing,

00:08:15.360 --> 00:08:17.639
but going to the actual source code.

00:08:17.639 --> 00:08:20.149
Sometimes I find myself going to

00:08:20.149 --> 00:08:24.349
the source code and looking at the details of how it was implemented.

00:08:24.350 --> 00:08:27.439
It also makes you a good programmer because you

00:08:27.439 --> 00:08:30.629
know the underlying implementation and it gives you

00:08:30.629 --> 00:08:37.654
idea how to implement various solution to different problems in general.

00:08:37.654 --> 00:08:41.328
But if you find this a little difficult,

00:08:41.328 --> 00:08:48.439
then what I would recommend you to do is go to the link provided in the video and

00:08:48.440 --> 00:08:51.890
go over the link which tells you about

00:08:51.889 --> 00:08:57.120
all the methods that are readily available for asserts.

