WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.790
Now, let's look at why is it important.

00:00:02.790 --> 00:00:07.365
Historically, we've found that not testing the application correctly

00:00:07.365 --> 00:00:13.125
has resulted in a lot of problems including loss of lives.

00:00:13.125 --> 00:00:18.539
Back in 2015, Bloomberg terminal in London crashed due to

00:00:18.539 --> 00:00:24.344
software glitch affecting more than 300,000 traders in the financial market.

00:00:24.344 --> 00:00:32.670
So this was one example of a big problem that not testing the application led to.

00:00:32.670 --> 00:00:37.785
It forced the government to postpone a three billion pound debt sale.

00:00:37.784 --> 00:00:43.169
There had been an issue with Nissan cars where they had to recall a million cars

00:00:43.170 --> 00:00:48.355
in the market due to a software failure in their airbag sensory detectors.

00:00:48.354 --> 00:00:52.954
There were two accidents that were caused by this software failure.

00:00:52.954 --> 00:00:56.934
One more example is of the Starbucks issue.

00:00:56.935 --> 00:01:02.000
Starbucks was forced to close out 60 percent of their stores in

00:01:02.000 --> 00:01:07.099
the US and Canada due to a software failure in the point of sale systems.

00:01:07.099 --> 00:01:10.834
At one point, the company had to give free coffee

00:01:10.834 --> 00:01:15.424
to all of their customers because they were unable to process their transactions.

00:01:15.424 --> 00:01:18.289
Another case was when

00:01:18.290 --> 00:01:25.450
Amazon's third-party retailers saw that their products were priced at one cent.

00:01:25.450 --> 00:01:28.245
This was due to a software glitch again.

00:01:28.245 --> 00:01:34.850
This obviously led to a lot of heavy losses.

00:01:34.849 --> 00:01:39.079
Another issue that became extremely famous

00:01:39.079 --> 00:01:43.700
or infamous was the vulnerability in Windows 10.

00:01:43.700 --> 00:01:48.995
Now, what happened was that the bug enabled the users to

00:01:48.995 --> 00:01:55.130
escape security sandboxes to a flaw in the Windows 32 K systems.

00:01:55.129 --> 00:02:00.920
One more issue that happened which was pretty famous in

00:02:00.920 --> 00:02:07.129
2015 was the fighter plane F35 which fell victim to a software bug,

00:02:07.129 --> 00:02:10.250
making it an unable to detect targets correctly.

00:02:10.250 --> 00:02:17.585
The China Airline Airbus A300 crashed due to a software bug in 1994,

00:02:17.585 --> 00:02:21.080
killing 264 innocent people.

00:02:21.080 --> 00:02:26.610
In 1985, Canada's Therac-25 radiation therapy machine

00:02:26.610 --> 00:02:29.330
malfunctioned due to a software bug.

00:02:29.330 --> 00:02:33.664
That delivered lethal radiation doses to patients

00:02:33.663 --> 00:02:38.269
leaving three people dead and critically injuring three others.

00:02:38.270 --> 00:02:45.000
Another costliest or this was the costliest accident in the history was a $1.2

00:02:45.000 --> 00:02:52.044
billion military satellite launch which failed because of a software bug.

00:02:52.044 --> 00:02:56.299
Another one that I can quote is the one that happened in

00:02:56.300 --> 00:03:00.605
May 1996 where a software bug caused the bank accounts of

00:03:00.604 --> 00:03:08.689
823 customers of a major US bank to credit $920 million to their customers account.

00:03:08.689 --> 00:03:13.280
Now, this should give you an idea about how important testing is.

00:03:13.280 --> 00:03:16.370
If it doesn't, then I would suggest that you go read

00:03:16.370 --> 00:03:21.430
more on testing failures that are found in production of Ammon.

