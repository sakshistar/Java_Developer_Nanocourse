WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.805
Now, let's look into types of testing.

00:00:02.805 --> 00:00:05.490
The types of testing can broadly be divided in two

00:00:05.490 --> 00:00:09.269
functional, non-functional and maintenance.

00:00:09.269 --> 00:00:13.064
There are people that would divide it into further categories.

00:00:13.064 --> 00:00:16.859
But this is broadly what people understand in the industry.

00:00:16.859 --> 00:00:21.914
So functional categories would be unit testing, integration,

00:00:21.914 --> 00:00:27.914
smoke or sanity, user acceptance, accessibility, and others.

00:00:27.914 --> 00:00:31.199
Let me give you a brief idea of what each of them means.

00:00:31.199 --> 00:00:35.119
A unit test is something that tests

00:00:35.119 --> 00:00:40.719
a very small piece of code or a method or it could even be a class,

00:00:40.719 --> 00:00:44.629
and they're each identified as units.

00:00:44.630 --> 00:00:47.225
Integration tests would include

00:00:47.225 --> 00:00:51.390
integration between different setups or different projects,

00:00:51.390 --> 00:00:54.740
and testing how the projects are interacting with each other.

00:00:54.740 --> 00:00:58.855
and if they meet the criteria set by the requirements or not.

00:00:58.854 --> 00:01:05.629
Sanity or smoke is usually one of the primary tests that are written to make sure that

00:01:05.629 --> 00:01:13.324
the basic test case or the basic used case that is set as per the requirement is met.

00:01:13.325 --> 00:01:16.400
User acceptance test is usually run by

00:01:16.400 --> 00:01:20.180
the business team or some other teams that are specifically

00:01:20.180 --> 00:01:28.725
targeted to make sure that the requirements are met with the solution that is provided,

00:01:28.724 --> 00:01:31.084
so more like a manual test.

00:01:31.084 --> 00:01:36.604
Accessibility test is usually done to make sure that the software that you have developed

00:01:36.605 --> 00:01:43.545
is inclusive to differently abled users.

00:01:43.545 --> 00:01:47.359
There were several others that fall under the functional tests.

00:01:47.359 --> 00:01:48.969
In this particular course,

00:01:48.969 --> 00:01:55.739
we will focus on unit tests because that is what developers are mandated to write.

00:01:55.739 --> 00:01:58.394
In terms of non-functional tests,

00:01:58.394 --> 00:02:00.909
you have performance test,

00:02:00.909 --> 00:02:03.634
scalability tests, and others.

00:02:03.635 --> 00:02:08.569
Performance test is run to make sure that your application

00:02:08.569 --> 00:02:15.319
performs according to the SLA or Service Level Agreement under stress or underload.

00:02:15.319 --> 00:02:17.419
What I mean by SLA is,

00:02:17.419 --> 00:02:21.724
it could say that your application must

00:02:21.724 --> 00:02:26.659
respond or the response time of your application is under 10 milliseconds.

00:02:26.659 --> 00:02:33.479
It could say that your up time or availability time is 99 percent,

00:02:33.479 --> 00:02:38.689
and there were several other categories under which SLAs can be set.

00:02:38.689 --> 00:02:43.789
That is something that your product team decides and that is something that

00:02:43.789 --> 00:02:50.344
the other teams or a performance testing needs to ensure by running performance tests.

00:02:50.344 --> 00:02:52.909
Scalability test is again,

00:02:52.909 --> 00:02:54.889
something that is similar.

00:02:54.889 --> 00:02:58.969
But what it does is that it makes sure that if there are

00:02:58.969 --> 00:03:04.340
users or the traffic to your application increases,

00:03:04.340 --> 00:03:07.895
then your application is able to scale.

00:03:07.895 --> 00:03:12.370
A maintenance is usually regression and others,

00:03:12.370 --> 00:03:15.435
maintenance means that your application,

00:03:15.435 --> 00:03:19.909
if there is new piece of code added to your project,

00:03:19.909 --> 00:03:27.109
then the previous tests or the previous functionality that was working in a set way,

00:03:27.110 --> 00:03:28.805
that is not broken.

00:03:28.805 --> 00:03:31.920
So regression makes sure of that.

