WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.899
Let's define what JPA is.

00:00:03.899 --> 00:00:09.060
The Java Persistence API is a Java specification for accessing,

00:00:09.060 --> 00:00:15.405
persisting and managing data between Java objects and a relational database.

00:00:15.404 --> 00:00:20.070
JPA allows objects to be easily persisted without

00:00:20.070 --> 00:00:24.750
requiring the classes to implement any interfaces or methods.

00:00:24.750 --> 00:00:31.184
An objects mapping to a table can be defined through annotations or XML,

00:00:31.184 --> 00:00:35.000
although in this lesson we'll only be using annotations as

00:00:35.000 --> 00:00:39.500
it's the most common way of defining Object Relational Mapping.

00:00:39.500 --> 00:00:43.810
Just like JDBC, JPA is a specification.

00:00:43.810 --> 00:00:47.525
We'll be using Hibernate as our JPA implementation.

00:00:47.524 --> 00:00:53.795
Hibernate predates JPA and is the pioneer in Java Object Relational Mapping.

00:00:53.795 --> 00:00:57.605
JPA was actually inspired from Hibernate.

00:00:57.604 --> 00:01:02.274
An object that is managed by JPA is called an Entity.

00:01:02.274 --> 00:01:08.030
JPA provides an interface called EntityManager to work with entities.

00:01:08.030 --> 00:01:12.215
Let's see how to use EntityManager to operate on entities.

00:01:12.215 --> 00:01:17.075
The first step in configuring JPA is to define a persistence unit.

00:01:17.075 --> 00:01:22.820
It is done in a file called persistence.xml which you need to put in your class path.

00:01:22.819 --> 00:01:24.724
There are two important things.

00:01:24.724 --> 00:01:30.844
The first is the JDBC driver information that is necessary to access the database.

00:01:30.844 --> 00:01:32.525
As you might've guessed,

00:01:32.525 --> 00:01:37.415
JPA uses JDBC under the covers for database access.

00:01:37.415 --> 00:01:41.225
Then the location of the entity needs to be defined.

00:01:41.224 --> 00:01:46.369
Location in this case is the fully qualified name of the class.

00:01:46.370 --> 00:01:49.020
Let's look at the entity.

00:01:50.260 --> 00:01:55.480
All entities must be annotated with at entity annotation.

00:01:55.480 --> 00:01:59.320
The table annotation maps the entity to the table

00:01:59.319 --> 00:02:03.954
provided in the name attribute which is others.

00:02:03.954 --> 00:02:10.099
The field that maps to the primary key of the table should be annotated as @Id.

00:02:10.099 --> 00:02:14.919
The generated value annotation tells JPA that this field is

00:02:14.919 --> 00:02:19.579
generated by the database and won't be included when an entity is persisted.

00:02:19.580 --> 00:02:24.865
There are a few other ID generation strategies which are covered in the next section.

00:02:24.865 --> 00:02:26.860
All other fields include

00:02:26.860 --> 00:02:32.390
the column annotation which maps the fields to the appropriate columns.

00:02:33.050 --> 00:02:38.425
I have a class here with a simple main method.

00:02:38.425 --> 00:02:44.230
Now, we use the persistence unit to create the entity manager factory.

00:02:44.229 --> 00:02:48.280
Using the factory we create an entity manager.

00:02:48.280 --> 00:02:50.849
Then we start a transaction,

00:02:50.849 --> 00:02:54.375
create an entity, persist it,

00:02:54.375 --> 00:02:56.794
and close the transaction.

00:02:56.794 --> 00:03:03.304
Note that the entity does not include the primary key as it is generated by the database.

00:03:03.305 --> 00:03:05.870
If we need to load an entity,

00:03:05.870 --> 00:03:08.650
we follow a similar set of steps.

00:03:08.650 --> 00:03:15.950
Create the EntityManager, use the find method to load the entity using its primary key.

00:03:15.949 --> 00:03:19.234
You can use the remove method to delete the entity.

00:03:19.235 --> 00:03:23.195
Let's run this class to check if the persist and find

00:03:23.194 --> 00:03:25.259
work as expected,

00:03:32.840 --> 00:03:35.265
and it did.

00:03:35.264 --> 00:03:42.544
We can see the order ID that is printed here using the system println here,

00:03:42.544 --> 00:03:50.164
and we also see the other entity being printed here which is in the read order method.

00:03:50.164 --> 00:03:55.879
Hibernate also prints the SQL statements that it sends to the database.

00:03:55.879 --> 00:04:03.134
So here you can see the select statement used to read the order,

00:04:03.134 --> 00:04:05.384
and if you scroll above,

00:04:05.384 --> 00:04:12.859
we could also see the insert statement that it did to persist the order entity.

00:04:12.860 --> 00:04:14.780
For the sake of completeness,

00:04:14.780 --> 00:04:21.800
I am going to look at the table to see if the row got inserted, and it did.

00:04:21.800 --> 00:04:25.490
In Java, an object has a life cycle.

00:04:25.490 --> 00:04:30.560
It gets instantiated, and once there are no references to it,

00:04:30.560 --> 00:04:32.074
it gets garbage collected.

00:04:32.074 --> 00:04:35.629
Similar to that, an entity has a life cycle.

00:04:35.629 --> 00:04:39.625
When an entity is created it is in a transient state.

00:04:39.625 --> 00:04:43.985
The EntityManager is not aware of this entity yet.

00:04:43.985 --> 00:04:47.569
Once it's persisted using the persist method,

00:04:47.569 --> 00:04:49.774
it enters the persistent state.

00:04:49.774 --> 00:04:55.879
In this state, it maintains a link to the table representing this object in the database.

00:04:55.879 --> 00:04:59.389
Any changes made to the entity will get propagated to

00:04:59.389 --> 00:05:04.069
the database until the EntityManager is closed.

00:05:04.069 --> 00:05:09.514
If an entity in persistent state should not propagate it's changes to the database,

00:05:09.514 --> 00:05:13.324
then it should be detached using the detach method.

00:05:13.324 --> 00:05:17.404
Calling detach puts it in the detached state.

00:05:17.404 --> 00:05:21.934
If an entity is removed from the database using the remove method,

00:05:21.935 --> 00:05:24.290
it enters the remove state.

00:05:24.290 --> 00:05:27.694
At this point, there is a reference to that entity

00:05:27.694 --> 00:05:32.029
in Java or the corresponding row has been deleted.

00:05:32.029 --> 00:05:37.219
An entity can directly enter the persistent state if it's loaded from

00:05:37.220 --> 00:05:42.665
the database using one of the fine methods or through a JPA query.

00:05:42.665 --> 00:05:45.740
In order to work effectively with JPA,

00:05:45.740 --> 00:05:49.750
it is important to understand this life cycle.

