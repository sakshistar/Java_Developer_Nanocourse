WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.419
GraphiQL is a simple web app that is able to communicate with any GraphQL server,

00:00:05.419 --> 00:00:09.390
and you're able to execute queries and mutations against it.

00:00:09.390 --> 00:00:12.210
Once you have your application deployed and up and running,

00:00:12.210 --> 00:00:18.690
you can access GraphiQL by going to localhost:8080 and typing in GraphiQL.

00:00:18.690 --> 00:00:20.400
Notice, there's an i,

00:00:20.399 --> 00:00:23.519
right here between the words Graph and QL.

00:00:23.519 --> 00:00:26.129
This is the web application for GraphiQL.

00:00:26.129 --> 00:00:30.000
On the left-hand side here this is what's called the command window.

00:00:30.000 --> 00:00:32.835
This is where you enter queries and mutations.

00:00:32.835 --> 00:00:36.799
When you click the Execute button here in the upper left-hand corner,

00:00:36.799 --> 00:00:40.439
the results will display in this middle gray pane here.

00:00:40.439 --> 00:00:42.979
Now, on the far right hand side,

00:00:42.979 --> 00:00:46.729
there is this documentation explore that's very helpful.

00:00:46.729 --> 00:00:49.625
It allows you to see all the query

00:00:49.625 --> 00:00:54.875
operations and the mutation operations included in the schema.

00:00:54.875 --> 00:00:57.994
So let's enter a simple query.

00:00:57.994 --> 00:01:01.609
So our query name is findAllLocations.

00:01:01.609 --> 00:01:04.355
Here, we're requesting back the ID.

00:01:04.355 --> 00:01:06.109
So let's execute it.

00:01:06.109 --> 00:01:08.385
So notice here, in the middle pane,

00:01:08.385 --> 00:01:11.545
we have the response of findAllLocations,

00:01:11.545 --> 00:01:16.490
and it returns only the IDs of all of the locations in our database.

00:01:16.489 --> 00:01:20.560
So what happens if we want to bring back the ID along with the name?

00:01:20.560 --> 00:01:22.935
We simply add name here,

00:01:22.935 --> 00:01:25.625
and notice it has autocomplete,

00:01:25.625 --> 00:01:27.655
which is a useful feature.

00:01:27.655 --> 00:01:30.094
Let's click "Execute".

00:01:30.094 --> 00:01:35.814
Now, notice in our response it brings back the location names.

00:01:35.814 --> 00:01:38.724
We may also want the address.

00:01:38.724 --> 00:01:41.994
Using autocomplete, again enter the address.

00:01:41.995 --> 00:01:43.880
Click "Execute".

00:01:43.879 --> 00:01:48.504
Notice here the address on each location is now returned.

00:01:48.504 --> 00:01:51.879
GraphQL offers ultimate flexibility in that you

00:01:51.879 --> 00:01:55.599
get back exactly the data you need from the API.

00:01:55.599 --> 00:01:58.254
Now, let's test mutations.

00:01:58.254 --> 00:02:02.560
Before testing, I wanted the location table to be empty.

00:02:02.560 --> 00:02:05.409
So I navigated back to [inaudible].

00:02:05.409 --> 00:02:09.789
I rename this data.sql file here so that it would not be executed,

00:02:09.789 --> 00:02:12.079
and then I relaunched the application.

00:02:12.080 --> 00:02:14.910
So let's test the first mutation.

00:02:14.909 --> 00:02:18.590
That is the mutation to create a new location.

00:02:18.590 --> 00:02:20.900
So notice here on line 29,

00:02:20.900 --> 00:02:23.210
I'm using the mutation keyword.

00:02:23.210 --> 00:02:25.250
I'm using the name of the mutation,

00:02:25.250 --> 00:02:30.844
new location and passing in the name and the address and I'm requesting back the ID,

00:02:30.844 --> 00:02:32.150
the name, and the address.

00:02:32.150 --> 00:02:34.300
So let's execute this.

00:02:34.300 --> 00:02:39.590
Now, I see a new location was created and it has an ID of one.

00:02:39.590 --> 00:02:45.325
Now, let's see what happens when we attempt to update a location that doesn't exist.

00:02:45.324 --> 00:02:49.824
So there is a mutation called updateLocationName.

00:02:49.824 --> 00:02:52.789
So here I'm updating a location name.

00:02:52.789 --> 00:02:55.400
I want to change the name to Jamaica airport.

00:02:55.400 --> 00:02:58.355
I want to update the location that has this ID.

00:02:58.354 --> 00:03:01.250
This definitely does not exist in our database.

00:03:01.250 --> 00:03:03.199
Let's execute this.

00:03:03.199 --> 00:03:05.629
Just as we expected,

00:03:05.629 --> 00:03:09.954
our exception handling will return the message location not found.

00:03:09.955 --> 00:03:13.715
So now let's update this to ID of one.

00:03:13.715 --> 00:03:15.560
We know that one exists,

00:03:15.560 --> 00:03:17.569
and let's execute it.

00:03:17.569 --> 00:03:22.344
Now, the new name for Location 1 is Jamaica airport.

00:03:22.344 --> 00:03:27.409
An application can also be deleted using a mutation.

00:03:27.409 --> 00:03:29.599
So let's see that in action.

00:03:29.599 --> 00:03:31.430
Again, on line 29,

00:03:31.430 --> 00:03:33.694
were using the mutation keyword.

00:03:33.694 --> 00:03:36.199
On line 30 the name of the mutation,

00:03:36.199 --> 00:03:40.564
deleteLocation, and we're passing in the ID of the record to be deleted.

00:03:40.564 --> 00:03:42.020
Let's execute that.

00:03:42.020 --> 00:03:47.760
We receive back a true showing that the location was deleted.

