WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.019
Bugs are probably the most common problems programmers run into.

00:00:04.019 --> 00:00:07.128
Especially, as your code gets larger and more complicated,

00:00:07.128 --> 00:00:11.445
it's almost impossible to write bug-free code from the first time.

00:00:11.445 --> 00:00:15.310
Luckily, IntelliJ has this amazing feature called debugging.

00:00:15.310 --> 00:00:18.179
Remember those side tables that we used to draw

00:00:18.179 --> 00:00:21.509
when we were tracing our code in earlier lessons?

00:00:21.510 --> 00:00:24.660
Well, IntelliJ allows you to do the same thing by peeking into

00:00:24.660 --> 00:00:28.745
values of any variable in your code while it's running.

00:00:28.745 --> 00:00:30.914
And if your code has any bug in it,

00:00:30.914 --> 00:00:35.479
this would make your job finding that bug a lot easier.

00:00:35.479 --> 00:00:36.989
Let's have a quick look at one of

00:00:36.990 --> 00:00:40.425
the very early programs that we wrote together in Lesson One.

00:00:40.424 --> 00:00:45.804
This code here updates and keeps track of the variables fare and stops.

00:00:45.804 --> 00:00:48.795
If we simply run this program as usual,

00:00:48.795 --> 00:00:53.340
the computer would run through all these statements here one by one quickly

00:00:53.340 --> 00:00:57.855
and once it gets to the print line statements it will display the output over here,

00:00:57.854 --> 00:01:00.719
which is 3 and 15 in this case.

00:01:00.719 --> 00:01:04.079
But the really cool feature of debugging in IntelliJ allows you to

00:01:04.079 --> 00:01:08.909
stop inside the program at any point and move step by step.

00:01:08.909 --> 00:01:11.789
To do that, the first step is to add something called

00:01:11.790 --> 00:01:15.790
a breakpoint by clicking on the beginning of a line here.

00:01:15.790 --> 00:01:17.995
This will add this red circle over here,

00:01:17.995 --> 00:01:20.445
meaning that when we run this program now,

00:01:20.444 --> 00:01:24.994
it would pause at this line and wait for us to tell us what to do next.

00:01:24.995 --> 00:01:26.385
Once we have a breakpoint,

00:01:26.385 --> 00:01:28.800
instead of running your program as usual,

00:01:28.799 --> 00:01:32.409
you would go ahead and click this bug icon up there.

00:01:32.409 --> 00:01:35.719
This would run the program in debug mode.

00:01:35.719 --> 00:01:39.209
Once you click it, your code would run as normal.

00:01:39.209 --> 00:01:41.140
And once it sees this breakpoint it would

00:01:41.140 --> 00:01:44.004
stop right before it runs this instruction here.

00:01:44.004 --> 00:01:49.449
In debug mode, you can do things like hover over a variable to see the value inside it.

00:01:49.450 --> 00:01:52.240
It also usually appears on the right hand side here once

00:01:52.239 --> 00:01:54.459
the variable changes and it also points

00:01:54.459 --> 00:01:57.659
out any change in any of the variables down there.

00:01:57.659 --> 00:02:01.359
Now, since it's been pausing at this line here the next thing you

00:02:01.359 --> 00:02:05.584
can do is click on this button down there called Step Over.

00:02:05.584 --> 00:02:09.879
This allows you to run this instruction here and move onto the next one.

00:02:09.879 --> 00:02:11.905
So if we click Step Over,

00:02:11.905 --> 00:02:16.159
we can see that our stops variable changed from zero to one.

00:02:16.159 --> 00:02:21.454
And now our fare variable is still zero waiting for this instruction to happen as well.

00:02:21.455 --> 00:02:23.725
So if we click another Step Over that,

00:02:23.724 --> 00:02:27.409
our fare variable changes from zero to five.

00:02:27.409 --> 00:02:29.829
Another thing you can do is to skip through

00:02:29.830 --> 00:02:33.680
some steps by adding another breakpoint somewhere else in the code.

00:02:33.680 --> 00:02:36.340
And then instead of stepping through every single step,

00:02:36.340 --> 00:02:38.860
you could click this resume button over

00:02:38.860 --> 00:02:42.400
there that would just jump to the next breakpoint it finds.

00:02:42.400 --> 00:02:48.000
Another really cool thing you can do in debugging is this Step Into icon here.

00:02:48.000 --> 00:02:51.860
This allows it to step inside a function while debugging another function.

00:02:51.860 --> 00:02:54.755
Say I have this multiply function up here where

00:02:54.754 --> 00:02:59.254
inside I call this other function add which is implemented up there.

00:02:59.254 --> 00:03:03.099
Now, if I put a breaking point here and then run it in debug mode,

00:03:03.099 --> 00:03:06.085
it will pause right before it calls this add function.

00:03:06.085 --> 00:03:08.155
If I use the Step Over icon,

00:03:08.155 --> 00:03:12.659
then it will just run this add function all together and then move on.

00:03:12.659 --> 00:03:14.935
However, if I try the Step Into,

00:03:14.935 --> 00:03:20.055
it would actually go inside the add function and show what's happening in there as well.

00:03:20.055 --> 00:03:22.300
And then if I'm happy with that and I don't

00:03:22.300 --> 00:03:24.610
want to go through every single step in that function,

00:03:24.610 --> 00:03:29.635
I could just jump to the Step Out icon which would return me to the calling function.

00:03:29.634 --> 00:03:34.049
Debugging can be both fun and challenging at the same time.

00:03:34.050 --> 00:03:36.219
It's what programmers spend most of their time

00:03:36.219 --> 00:03:39.004
doing when their code doesn't work properly.

00:03:39.004 --> 00:03:42.289
But knowing how to use those powerful debugging features in

00:03:42.289 --> 00:03:46.929
IntelliJ should make debugging any code a lot easier.

