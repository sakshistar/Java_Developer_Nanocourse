WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.245
第一次试行代码时 出错并不稀奇

00:00:04.245 --> 00:00:06.750
你可能会忘了在指令后面放一个分号

00:00:06.750 --> 00:00:10.179
或者拼错了变量名

00:00:10.179 --> 00:00:15.390
甚至是犯下些不太明显的错误 比如用了错误的比较运算符

00:00:15.390 --> 00:00:18.719
这就是 IntelliJ 等 IDE 特别实用的原因

00:00:18.719 --> 00:00:23.689
因为它们能够检测并指出像这样的错误 帮你修正错误

00:00:23.690 --> 00:00:25.170
不过我们先来看一些常见错误

00:00:25.170 --> 00:00:29.520
看看 IntelliJ 是怎么帮我们解决错误的

00:00:29.519 --> 00:00:33.640
基本上 程序员在 Java 里会犯的错误有三种

00:00:33.640 --> 00:00:38.365
第一种叫语法错误 也叫编译错误

00:00:38.365 --> 00:00:40.500
这种错误会让代码无法进行初次编译

00:00:40.500 --> 00:00:43.109
因为它违反了Java 语言的某些语法规则

00:00:43.109 --> 00:00:48.810
比如拼错变量名、

00:00:48.810 --> 00:00:51.600
忘记输入右花括号、

00:00:51.600 --> 00:00:54.689
少写了个分号等等

00:00:54.689 --> 00:00:59.295
好在 IntelliJ 一般会立刻指出语法错误

00:00:59.295 --> 00:01:02.640
错误部分会突出显示 比如少写了分号 这里就会出现红线

00:01:02.640 --> 00:01:08.040
拼错或未知的变量名也会突出显示出来

00:01:08.040 --> 00:01:11.010
第二种错误叫运行错误

00:01:11.010 --> 00:01:14.609
如果程序运行时出了岔子 那就是运行错误

00:01:14.609 --> 00:01:17.969
如访问数组范围外的索引

00:01:17.969 --> 00:01:22.784
或者让某个数字除以一个变量 而该变量那个时候恰好为 0

00:01:22.784 --> 00:01:24.659
一旦出现运行错误

00:01:24.659 --> 00:01:29.144
程序会立即停止 甚至崩溃

00:01:29.144 --> 00:01:32.250
如果你遇到过程序崩溃

00:01:32.250 --> 00:01:35.310
那很可能是发生了一个意外的运行错误

00:01:35.310 --> 00:01:39.969
这可能是制作程序的开发人员没有处理好造成的

00:01:39.969 --> 00:01:42.060
在下一课中 我们会更深入地学习运行错误

00:01:42.060 --> 00:01:45.530
届时我们将讨论意外情况及应对方法

00:01:45.530 --> 00:01:48.879
不过有时候你可能发现 代码看起来没什么问题

00:01:48.879 --> 00:01:52.064
语法没错

00:01:52.064 --> 00:01:54.840
运行起来也好好的 不会崩溃

00:01:54.840 --> 00:01:58.305
可就是不按你的设想执行

00:01:58.305 --> 00:02:01.295
这种错误叫做 bug (逻辑错误)

00:02:01.295 --> 00:02:04.950
会出现这种错误 是因为程序本身逻辑有问题

00:02:04.950 --> 00:02:10.409
比如用错了比较运算符 或者语句顺序写错了

00:02:10.409 --> 00:02:14.219
IDE 无法直接帮你指出 bug

00:02:14.219 --> 00:02:16.109
因为它们永远也无法知道你在想什么

00:02:16.110 --> 00:02:18.570
无法知道你一开始想用程序做什么

00:02:18.569 --> 00:02:21.090
不过它们能帮你发现 bug

00:02:21.090 --> 00:02:24.104
如果有什么可疑情况 IDE 就会显示警告信息

00:02:24.104 --> 00:02:28.409
就像这里 判断结果会一直为假

00:02:28.409 --> 00:02:31.379
IDE 还能让你在程序运行的时候

00:02:31.379 --> 00:02:35.949
进入程序 观察每个指令和语句是怎么执行的

00:02:35.949 --> 00:02:38.179
这个过程叫调试

00:02:38.180 --> 00:02:42.027
不过在我们开始讲如何用 IntelliJ 来调试代码之前

00:02:42.026 --> 00:02:46.349
我们先来看看你能否判断出这段代码的错误类型

00:02:46.349 --> 00:02:47.620
是语法错误呢？

00:02:47.620 --> 00:02:51.129
运行错误呢？ 还是 bug？ 还是没错？

