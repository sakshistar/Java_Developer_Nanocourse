WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.819
To be able to recognize when a player wins a game of Tic Tac Toe,

00:00:03.819 --> 00:00:07.904
you'll need to tell the computer what a winning Tic Tac Toe grid looks like.

00:00:07.905 --> 00:00:09.605
In the code you've been given,

00:00:09.605 --> 00:00:13.384
the Tic Tac Toe grid is a three by three 2D array of characters

00:00:13.384 --> 00:00:17.855
that keeps track of where or if an XO has been played.

00:00:17.855 --> 00:00:19.949
When you first start a game,

00:00:19.949 --> 00:00:22.913
the grid has nine empty spots and as you play,

00:00:22.913 --> 00:00:26.719
the spots fill up with the symbols X and O.

00:00:26.719 --> 00:00:27.844
So at any time,

00:00:27.844 --> 00:00:29.570
a spot can either be empty,

00:00:29.570 --> 00:00:32.625
have an X in it or have an O in it.

00:00:32.625 --> 00:00:34.890
And in our code, the grid array keeps track of

00:00:34.890 --> 00:00:38.460
these three possibilities with three different characters.

00:00:38.460 --> 00:00:42.120
An empty spot is represented by the dash character,

00:00:42.119 --> 00:00:45.794
and X's and O's are just their own lower case letter,

00:00:45.795 --> 00:00:50.789
and each character in this grid is stored in an index in our 2D array.

00:00:50.789 --> 00:00:54.045
This top left empty character is at the pair of indices

00:00:54.045 --> 00:00:57.920
0,0 and to access this character value in code,

00:00:57.920 --> 00:01:01.195
you write grid 0,0.

00:01:01.195 --> 00:01:03.390
So right now, grid at the index

00:01:03.390 --> 00:01:07.814
0,0 is equal to a dash character because it's an empty spot.

00:01:07.814 --> 00:01:12.739
And right next to this spot is grid 1,0 and grid 2,0.

00:01:12.739 --> 00:01:16.984
And these are also dash characters because this whole row is empty.

00:01:16.984 --> 00:01:20.155
But if there was an X at the index 2,0 instead,

00:01:20.155 --> 00:01:24.438
then grid 2,0 would equal the X character.

00:01:24.438 --> 00:01:26.484
Now, what about these other spots?

00:01:26.484 --> 00:01:30.855
Well, the spot right below 0,0 is 0,1.

00:01:30.855 --> 00:01:34.365
Can you guess what the indices will be for this bottom left corner?

00:01:34.364 --> 00:01:37.822
This pair of indices will be 0,2,

00:01:37.822 --> 00:01:39.779
and you might be noticing a pattern.

00:01:39.780 --> 00:01:42.960
To access the character at any position in this grid,

00:01:42.959 --> 00:01:46.564
we can basically treat these indices as X,Y coordinates.

00:01:46.564 --> 00:01:49.224
But in programming, instead of using x and y,

00:01:49.224 --> 00:01:51.709
it's common to use i and j.

00:01:51.709 --> 00:01:53.939
So, let's say we have integer variables

00:01:53.939 --> 00:01:57.730
i and j that are coordinate positions in our grid.

00:01:57.730 --> 00:01:59.310
So for the pair of indices,

00:01:59.310 --> 00:02:01.230
grid i and j,

00:02:01.230 --> 00:02:03.180
i keep track of which column we're in in our array,

00:02:03.180 --> 00:02:06.285
0, 1 or 2.

00:02:06.284 --> 00:02:08.844
Counting from left to right.

00:02:08.844 --> 00:02:11.770
And j keeps track of which row we're in,

00:02:11.770 --> 00:02:13.870
counting from top to bottom.

00:02:13.870 --> 00:02:17.620
Again, 0, 1 or 2.

00:02:17.620 --> 00:02:22.659
So, the center spot of a grid is at the index 1,1 and

00:02:22.659 --> 00:02:29.039
the bottom right corner is grid 2,2 and so on for the rest of the characters in our grid.

00:02:29.039 --> 00:02:32.054
They're at the index i, j.

00:02:32.055 --> 00:02:35.420
So right now, grid 1,1 and grid 2,2

00:02:35.419 --> 00:02:39.224
are equal to the dash character because they're empty spots.

00:02:39.224 --> 00:02:41.680
But say there's an O symbol here.

00:02:41.680 --> 00:02:44.635
Then grid 2,2 this bottom right corner,

00:02:44.634 --> 00:02:47.349
will be equal to the character O.

00:02:47.349 --> 00:02:51.000
Let's get more practice visualizing a 2D array like this.

