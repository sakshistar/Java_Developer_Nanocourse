WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.019
bug 可能是程序员碰到的最常见问题了

00:00:04.019 --> 00:00:07.128
如果你的代码很长很复杂 那就更是如此了

00:00:07.128 --> 00:00:11.445
要一次性写出没有 bug 的代码几乎是不可能的

00:00:11.445 --> 00:00:15.310
好在 IntelliJ 有个很棒的功能 叫调试

00:00:15.310 --> 00:00:18.179
还记得在之前的课程里

00:00:18.179 --> 00:00:21.509
我们放在一边用来跟踪代码的表格吗？

00:00:21.510 --> 00:00:24.660
IntelliJ 能让你做同样的事

00:00:24.660 --> 00:00:28.745
也就是允许你在代码执行的时候 观察任意变量的值

00:00:28.745 --> 00:00:30.914
如果你的代码里有 bug

00:00:30.914 --> 00:00:35.479
这能让你更方便地找出那个 bug 来

00:00:35.479 --> 00:00:36.989
我们来快速重温下

00:00:36.990 --> 00:00:40.425
第一课早期我们一起写的一个程序

00:00:40.424 --> 00:00:45.804
这里的代码会更新并跟踪变量 fare 和 stops

00:00:45.804 --> 00:00:48.795
如果我们照常运行这个程序

00:00:48.795 --> 00:00:53.340
计算机会迅速地逐条执行这些语句

00:00:53.340 --> 00:00:57.855
等到了执行 println 语句的时候 程序就会在这输出结果

00:00:57.854 --> 00:01:00.719
也就是 3 和 15

00:01:00.719 --> 00:01:04.079
不过 IntelliJ 这个很酷的调试功能

00:01:04.079 --> 00:01:08.909
可允许你在程序里随时停止 然后一步步地运行程序

00:01:08.909 --> 00:01:11.789
要进行调试 首先要加一样叫断点的东西

00:01:11.790 --> 00:01:15.790
所以我们点击一行的开头 像这样

00:01:15.790 --> 00:01:17.995
这里会多出一个红圈

00:01:17.995 --> 00:01:20.445
意味着如果我们现在运行这个程序

00:01:20.444 --> 00:01:24.994
到这一行程序就会停止 等我们告诉它如何进行下一步

00:01:24.995 --> 00:01:26.385
一旦我们加了断点

00:01:26.385 --> 00:01:28.800
就不要跟平常一样运行程序了

00:01:28.799 --> 00:01:32.409
你需要点击这上面的 bug 图标

00:01:32.409 --> 00:01:35.719
这会让程序在调试模式下运行

00:01:35.719 --> 00:01:39.209
一旦你点击了这个 代码会照常运行

00:01:39.209 --> 00:01:41.140
等到了断点

00:01:41.140 --> 00:01:44.004
代码会在执行这条指令之前停止

00:01:44.004 --> 00:01:49.449
在调试模式中 你可以做一些事情 如停留在一个变量上 观察里面的值

00:01:49.450 --> 00:01:52.240
如果变量发生了变化

00:01:52.239 --> 00:01:54.459
右手边这里通常会有显示

00:01:54.459 --> 00:01:57.659
还会在下方显示出任何出现变化的变量及变化细节

00:01:57.659 --> 00:02:01.359
由于现在停在了这一行 所以接下来

00:02:01.359 --> 00:02:05.584
你得点击下面这个单步执行按钮

00:02:05.584 --> 00:02:09.879
这能让你运行这里的指令并移至下一条

00:02:09.879 --> 00:02:11.905
点击单步执行

00:02:11.905 --> 00:02:16.159
我们就可以看到变量 stops 从 0 变为 1

00:02:16.159 --> 00:02:21.454
现在变量 fare 仍为 0 等待着这条指令的执行

00:02:21.455 --> 00:02:23.725
所以我们再次点击单步执行

00:02:23.724 --> 00:02:27.409
变量 fare 就从 0 变为 5

00:02:27.409 --> 00:02:29.829
你还可以跳过一些步骤

00:02:29.830 --> 00:02:33.680
方法是在代码的其它地方再加一个断点

00:02:33.680 --> 00:02:36.340
然后也不用每一步都进入了

00:02:36.340 --> 00:02:38.860
你可以直接按下这个继续按钮

00:02:38.860 --> 00:02:42.400
这样就能直接跳到下一断点了

00:02:42.400 --> 00:02:48.000
调试模式中你还可以做另一件很酷的事 那就是这个单步进入功能

00:02:48.000 --> 00:02:51.860
该功能允许你在调试一个函数时进入另一个函数

00:02:51.860 --> 00:02:54.755
就像我这上面有一个函数 multiply

00:02:54.754 --> 00:02:59.254
在该函数里 我调用了另一个函数 add 而 add 函数是在这上面实现的

00:02:59.254 --> 00:03:03.099
如果我在这里放一个断点 然后在调试模式里执行这个函数

00:03:03.099 --> 00:03:06.085
那它就会在调用函数 add 之前停止

00:03:06.085 --> 00:03:08.155
如果我按下单步执行图标

00:03:08.155 --> 00:03:12.659
它就会连同这个函数 add 一起运行 然后往下继续执行代码

00:03:12.659 --> 00:03:14.935
然而 如果我点的是单步进入

00:03:14.935 --> 00:03:20.055
那它就会进入到函数 add 里 把里面的执行过程也展示出来

00:03:20.055 --> 00:03:22.300
如果我对该过程满意

00:03:22.300 --> 00:03:24.610
不想要观察这个函数里的每一步

00:03:24.610 --> 00:03:29.635
我可以直接点单步退出图标 这样就能回到正在调用的函数上

00:03:29.634 --> 00:03:34.049
调试既有趣 又有挑战性

00:03:34.050 --> 00:03:36.219
如果代码不能正常工作

00:03:36.219 --> 00:03:39.004
调试会是程序员最耗时的一步

00:03:39.004 --> 00:03:42.289
不过知道了怎么用 IntelliJ 这些强大的调试功能

00:03:42.289 --> 00:03:46.929
无论要调试什么代码 应该都能简单很多

