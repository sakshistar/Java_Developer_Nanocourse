WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:03.370
استخدمنا حتى الآن
عوامل التشغيل المنطقية مع التعابير،

00:00:03.470 --> 00:00:05.172
مثل هل 3 أقل من 5؟

00:00:05.272 --> 00:00:07.074
أو هل 6 أكبر من 1؟

00:00:07.174 --> 00:00:09.543
لكن إضافة إلى عوامل التشغيل المنطقية،

00:00:09.643 --> 00:00:11.778
لدينا جميع هذا المقارنات
التي علينا تذكرها.

00:00:11.879 --> 00:00:15.349
الطريقة الأخرى لرؤية آلية عمل
عوامل التشغيل المنطقية

00:00:15.449 --> 00:00:19.453
هي بالاستعاضة عنها
بقيمتي الصواب "true" والخطأ "false".

00:00:19.553 --> 00:00:22.189
لذا بدلاً من التحقق
مما إذا كانت 6 أكبر من 1،

00:00:22.289 --> 00:00:25.592
وهو تعبير صحيح،
سأكتفي بكتابة القيمة "true" في مكانها.

00:00:25.692 --> 00:00:30.430
كما يمكن تبسيط أي مقارنة أخرى تصادفونها
باستخدام القيمتين "true" أو "false" أيضاً.

00:00:30.531 --> 00:00:33.600
ويمكنني استخدام هاتين القيمتين
مع عوامل التشغيل المنطقية.

00:00:33.700 --> 00:00:35.169
لنأخذ عامل التشغيل "NOT" أو "ليس"،

00:00:35.269 --> 00:00:37.905
ويرمز له بعلامة تعجب.

00:00:38.005 --> 00:00:43.777
الكود (1&lt;6)!
مماثل تماماً لهذا الكود: true!

00:00:43.877 --> 00:00:48.916
لأن نتيجة تقييم التعبير (1&lt;6)!
هي القيمة المنطقية "true".

00:00:49.016 --> 00:00:52.653
ونتيجة تقييم كلا التعبيرين هي "false"
لأن عامل التشغيل "NOT"

00:00:52.753 --> 00:00:56.857
يحوّل القيمة المنطقية
التي يسبقها إلى قيمتها المعاكسة.

00:00:56.957 --> 00:00:58.725
أي أن "true!" تصبح "false"،

00:00:58.825 --> 00:01:01.295
و"false!" تصبح "true".

00:01:01.395 --> 00:01:03.463
والآن دعونا نلقي نظرة
إلى عامل التشغيل "AND".

00:01:03.564 --> 00:01:05.465
في عامل التشغيل "AND"،

00:01:05.566 --> 00:01:08.368
تكون نتيجة تقييم التعبير
"true &amp;&amp; true" هي "true"،

00:01:08.468 --> 00:01:11.772
لكن نتيجة تقييم "false &amp;&amp; true"
هي "false".

00:01:11.872 --> 00:01:14.408
وهذا لأن عامل التشغيل "AND"
يحتاج إلى أن تكون

00:01:14.508 --> 00:01:18.645
نتيجة تقييم كلا الشرطين "true"
لتكون نتيجة تقييم التعبير ككل "true".

00:01:18.745 --> 00:01:22.583
لذا إذا كانت نتيجة تقييم أحد الشرطين
أو كلاهما هي "false"،

00:01:22.683 --> 00:01:26.086
فستكون نتيجة
تقييم التعبير المركّب هي "false".

00:01:26.186 --> 00:01:27.688
قد يكون مفيداً التفكير في تطبيقات

00:01:27.788 --> 00:01:31.758
عوامل التشغيل المنطقية مثل "AND"
في الواقع العملي.

00:01:31.859 --> 00:01:33.927
لنأخذ الطقس كمثال،

00:01:34.027 --> 00:01:36.730
ولنفترض أنه إذا كان الطقس
مشمساً وماطراً،

00:01:36.830 --> 00:01:38.765
فسينتج عن ذلك قوس قزح.

00:01:38.866 --> 00:01:43.637
لذا إذا كان صحيحاً أن الطقس مشمس
وصحيح أنه ماطر، فسيتشكّل قوس القزح.

00:01:43.737 --> 00:01:46.073
لكن إذا كان أحد هذين الشرطين فقط متحققاً،

00:01:46.173 --> 00:01:47.508
كأن يكون الطقس مشمساً فحسب،

00:01:47.608 --> 00:01:49.776
فلن يظهر قوس قزح.

00:01:49.877 --> 00:01:51.845
والأمر ذاته ينسحب
على كون الجو ماطراً فحسب.

00:01:51.945 --> 00:01:53.580
وإذا لم يكن أي من الشرطين متحققاً،

00:01:53.680 --> 00:01:55.883
فهنا أيضاً لن يتشكل قوس قزح.

00:01:55.983 --> 00:02:01.688
الطريقة الوحيدة لتشكّل قوس قزح هي تحقق
شرطي الطقس المشمس والجو الماطر معاً.

00:02:01.788 --> 00:02:05.225
هذه آلية العمل التي يستخدمها عامل التشغيل
"AND" لإنتاج قيمة الصواب "true".

00:02:05.325 --> 00:02:08.695
في التعابير التي تستخدم عامل التشغيل "AND"
لدمج حالتي اختبار،

00:02:08.795 --> 00:02:12.833
يجب أن يكون الشرطان كلاهما صحيحين
حتى يكون التعبير بأكمله صحيحاً.

00:02:12.933 --> 00:02:16.436
وفي أي حالة أخرى،
ستكون نتيجة تقييم التعبير هي خطأ "false".

00:02:16.537 --> 00:02:18.972
عامل التشغيل "OR" مختلف بعض الشيء،

00:02:19.072 --> 00:02:22.776
حيث يتطلب عامل التشغيل "OR"
أن يتم استيفاء أحد شرطيه فحسب،

00:02:22.876 --> 00:02:24.311
لتكون نتيجة تقييمه "true".

00:02:24.411 --> 00:02:27.381
لذا فإن نتيجة تقييم "true || true"
هي "true"،

00:02:27.481 --> 00:02:29.783
وكذلك نتيجة تقييم "false || true"،

00:02:29.883 --> 00:02:34.388
لأن واحداً على الأقل من التعبيرين المدمجين
صحيح أو "true" في كلا الحالتين.

00:02:34.488 --> 00:02:39.293
ولن يكون التعبير بأكمله خاطئاً أو "false"
إلا إذا كان التعبيران كلاهما "false".

00:02:39.393 --> 00:02:41.995
لفهم عامل التشغيل "OR" بشكل أفضل قليلاً،

00:02:42.095 --> 00:02:45.065
تخيّلوا أنكم تحاولون
تشغيل الحاسوب المحمول واستخدامه.

00:02:45.165 --> 00:02:46.533
حتى يعمل الحاسوب،

00:02:46.633 --> 00:02:51.705
فإنه يحتاج إلى التزوّد بالطاقة إما
من بطارية مشحونة وإما من قابس الكهرباء.

00:02:51.805 --> 00:02:53.674
إذا كان الشرطان كلاهما صحيحين،

00:02:53.774 --> 00:02:56.910
أي أنه إذا كانت البطارية مشحونة
وكان الحاسوب موصولاً بقابس الكهرباء،

00:02:57.010 --> 00:02:58.579
ينبغي للحاسوب المحمول أن يعمل.

00:02:58.679 --> 00:03:02.115
كما أن الحاسوب سيعمل أيضاً
إذا كان أحد الشرطين فقط متحققاً.

00:03:02.216 --> 00:03:04.818
كأن يكون الحاسوب
مزوداً فحسب بطاقة بطارية مشحونة.

00:03:04.918 --> 00:03:10.390
كما سيعمل أيضاً إذا كنتم تستخدمون قابس
الكهرباء فحسب ولم تكن البطارية مشحونة.

00:03:10.490 --> 00:03:12.926
الحالة الوحيدة
التي لن يحصل فيها الحاسوب على الطاقة

00:03:13.026 --> 00:03:15.863
ولن يعمل هي إذا كان الشرطان
كلاهما غير متحققين.

00:03:15.963 --> 00:03:19.466
أي عندما لا يكون موصولاً ببطارية مشحونة
ولا يكون موصولاً بقابس كهرباء.

00:03:19.566 --> 00:03:22.069
وهذه هي آلية
عمل عامل التشغيل "OR"،

00:03:22.169 --> 00:03:25.906
فتماماً كما من الممكن للحاسوب أن يتزود
بالطاقة إما من بطارية مشحونة وإما من قابس،

00:03:26.006 --> 00:03:27.741
فإن التعبير المُركب باستخدام "OR"
سيكون صحيحاً

00:03:27.841 --> 00:03:31.311
إذا كان الشرطان أحدهما أو كلاهما صحيحين.

00:03:31.411 --> 00:03:35.082
وسيكون التعبير خاطئاً
فقط إذا كان الشرطان كلاهما خاطئين.

00:03:35.182 --> 00:03:37.451
لقد فهمنا الآن آلية عمل
كل من "AND" و "OR".

00:03:37.551 --> 00:03:40.187
لكن ماذا لو دمجناهما لتشكيل اختبارات أطول؟

00:03:40.287 --> 00:03:44.391
هذه عبارة أطول
تستخدم عاملي التشغيل "AND" و "OR" معاً.

00:03:44.491 --> 00:03:48.629
يمكن قراءة هذا التعبير كالتالي:
false و true أو true.

00:03:48.729 --> 00:03:50.831
ما نتيجة تقييم هذا التعبير برأيكم؟

00:03:50.931 --> 00:03:55.469
في هذه الحالة، ستنظر لغة Java أولاً
إلى الشروط المرتبطة باستخدام "AND"،

00:03:55.569 --> 00:03:59.072
ثم ستنتقل إلى الشروط المرتبطة
باستخدام عامل التشغيل "OR".

00:03:59.173 --> 00:04:02.176
هذا هو ترتيب العمليات
لعوامل التشغيل المنطقية.

00:04:02.276 --> 00:04:05.245
إذن، ستنظر Java
إلى تركيبة "false &amp;&amp; true" أولاً

00:04:05.345 --> 00:04:07.181
وتقول إن قيمة هذا التعبير هي "false"

00:04:07.281 --> 00:04:11.451
لأن عامل التشغيل "AND" يتطلب
أن يكون الشرطان كلاهما متحققين أي "true"

00:04:11.552 --> 00:04:14.188
حتى تكون نتيجة تقييم تركيبتهما "true".

00:04:14.288 --> 00:04:17.424
أي أن هذا التعبير يعادل القيمة "false".

00:04:17.524 --> 00:04:23.463
وما يتبقى هو نسخة مبسّطة من عبارتنا الأولى:
"false || true".

00:04:23.564 --> 00:04:25.499
ونحن نعلم أن عامل التشغيل "OR"
يتطلب فحسب

00:04:25.599 --> 00:04:28.635
أن يكون أحد شرطيه فقط متحققاً أو "true"
لتكون نتيجة تقييمه هي "true".

00:04:28.735 --> 00:04:30.938
أي أن نتيجة تقييم
هذا التعبير كاملاً هي "true".

00:04:31.038 --> 00:04:32.539
تذكروا أن هاتين العبارتين متكافئتان،

00:04:32.639 --> 00:04:36.243
وعليه فإن نتيجة تقييم
تعبيرنا الطويل الأول هي "true" أيضاً.

00:04:36.343 --> 00:04:39.546
لكن ماذا لو أردنا تقييم التعبير
الموصول باستخدام "OR" أولاً؟

00:04:39.646 --> 00:04:41.348
أي الجزء "true || true".

00:04:41.448 --> 00:04:45.886
لتجاوز ترتيب العمليات
بحيث يتم تقييم هذا التعبير أولاً،

00:04:45.986 --> 00:04:49.056
يمكننا إحاطة ذلك الجزء من التعبير بقوسين.

00:04:49.156 --> 00:04:53.360
ستنفذ Java دائماً الكود
المحاط بأقواس قبل أي تعبير آخر.

00:04:53.460 --> 00:04:58.298
أي أن إحاطة تعبير "OR" بقوسين
سيغير طريقة قراءة التعبير ككل تماماً.

00:04:58.398 --> 00:05:03.170
في هذه الحالة، ستنظر Java إلى ما
بين القوسين أولاً، أي "true || true".

00:05:03.270 --> 00:05:05.772
وبما أن أحد هذين الشرطين
على الأقل صحيح،

00:05:05.873 --> 00:05:07.107
بل إن كليهما صحيحان في الواقع،

00:05:07.207 --> 00:05:09.810
فإن نتيجة تقييم تعبير "OR"
هي صواب أو "true".

00:05:09.910 --> 00:05:13.480
وبهذا يتم تبسيط الشرطين
ليصبحا "false &amp;&amp; true".

00:05:13.580 --> 00:05:17.150
ولأن أحد هذين الشرطين خاطئ أو "false"
وهما مرتبطان باستخدام عامل التشغيل "AND"،

00:05:17.251 --> 00:05:19.720
فإن نتيجة تقييم التعبير كاملاً هي "false".

00:05:19.820 --> 00:05:22.756
وعليه فإنه بالرغم
من التشابه الكبير بين هذين التعبيرين

00:05:22.856 --> 00:05:25.459
فإن ترتيب العمليات يجعلهما مختلفين.

00:05:25.559 --> 00:05:29.196
إن التمرّن على استخدام عوامل التشغيل
المنطقية سيجعلكم تستوعبونها بشكل أفضل.

00:05:29.296 --> 00:05:32.499
فدعونا نطّلع على المزيد
من هذه الأمثلة في الاختبار التالي.

