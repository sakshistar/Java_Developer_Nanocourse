WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
So, for a museum admission price program,

00:00:02.850 --> 00:00:05.964
we're offering the same discount to three different groups of people.

00:00:05.964 --> 00:00:07.620
People 15 years old or younger,

00:00:07.620 --> 00:00:10.605
greater than but not exactly 60 years old,

00:00:10.605 --> 00:00:12.560
and people who are Students.

00:00:12.560 --> 00:00:15.359
We're having to repeat our discount three separate times.

00:00:15.359 --> 00:00:18.629
And in programming it's always a good idea to reduce the repetitive code,

00:00:18.629 --> 00:00:20.489
and in this case we can.

00:00:20.489 --> 00:00:23.429
Java gives us a way to get rid of repetition by

00:00:23.429 --> 00:00:27.199
combining each of these three checks into one larger test condition.

00:00:27.199 --> 00:00:29.175
We want to test all three conditions,

00:00:29.175 --> 00:00:32.355
and apply the discount if a person matches any one of them.

00:00:32.354 --> 00:00:36.839
The condition we want to test is if a person is 15 years old or younger,

00:00:36.840 --> 00:00:38.753
or are greater than 60 years old,

00:00:38.753 --> 00:00:40.350
or if that person is a student.

00:00:40.350 --> 00:00:42.945
And if there are any of these, we offer them the discount.

00:00:42.945 --> 00:00:47.246
We can form this larger test in Java by using Logical Operators.

00:00:47.246 --> 00:00:50.094
There are three main Logical Operators,

00:00:50.094 --> 00:00:56.909
and which is these two &amp;&amp; symbols or which is these two II lines, and not an!

00:00:56.909 --> 00:00:59.559
point, which may look familiar from how we

00:00:59.560 --> 00:01:02.844
checked if some value was not equal to something else.

00:01:02.844 --> 00:01:06.640
Both AND and OR operators combine two test conditions,

00:01:06.640 --> 00:01:10.344
or boolean expressions at a time into one larger expression.

00:01:10.344 --> 00:01:14.179
Like, is 3 &lt; 5 &amp;&amp; and is 2 &gt; 15.

00:01:14.179 --> 00:01:18.879
AND combinations like this one are only true when both tests it

00:01:18.879 --> 00:01:24.614
combines to the expressions to the left and to the right of the &amp;&amp; symbol, are also true.

00:01:24.614 --> 00:01:29.664
In other words, it checks if the left and the right expressions are both true.

00:01:29.665 --> 00:01:31.720
So, in this example, the test,

00:01:31.719 --> 00:01:33.890
is 3 &lt; 5 is true,

00:01:33.890 --> 00:01:36.855
but on the right 2 is not greater than 15

00:01:36.855 --> 00:01:39.204
So, this expression evaluates to false.

00:01:39.204 --> 00:01:41.784
And because just one of these expressions is false,

00:01:41.784 --> 00:01:44.950
this whole AND combination will evaluate to false.

00:01:44.950 --> 00:01:48.174
An OR operator also combines two tests,

00:01:48.174 --> 00:01:52.319
but will evaluate to true when one or both of its two expressions are true.

00:01:52.319 --> 00:01:56.934
So, it checks if it's a left expression or if it's a right expression is true.

00:01:56.935 --> 00:01:58.659
And if at least one of them is,

00:01:58.659 --> 00:02:01.159
then the OR combination will also be true.

00:02:01.159 --> 00:02:05.754
So, for the same combination of expressions this one true and this one false,

00:02:05.754 --> 00:02:10.000
combined with an OR, this whole expression will evaluate to true.

00:02:10.000 --> 00:02:12.819
And finally, the NOT operator works on one test at

00:02:12.819 --> 00:02:16.269
a time and negates whatever value it's applied to.

00:02:16.270 --> 00:02:20.844
Which means that it turns a boolean value or expression into its opposite value.

00:02:20.844 --> 00:02:27.740
For example, saying!(3 &lt; 5) is the same thing as saying NOT this true expression.

00:02:27.740 --> 00:02:30.070
And NOT true is equivalent to false,

00:02:30.069 --> 00:02:32.284
which this expression evaluates to.

00:02:32.284 --> 00:02:35.900
And we'll see more examples of these operators in action in a bit.

00:02:35.900 --> 00:02:39.520
And now if we use these three operators to connect expressions,

00:02:39.520 --> 00:02:43.280
we can combine as many as we want into one larger test.

00:02:43.280 --> 00:02:45.930
And that's what we all want to do for our museum code.

00:02:45.930 --> 00:02:48.280
In the case of our museum ticket discount,

00:02:48.280 --> 00:02:50.995
we're checking three separate test conditions.

00:02:50.995 --> 00:02:54.412
First, if someone's age is less than or equal to 15 years old.

00:02:54.412 --> 00:02:57.455
Then if their age is greater than 60.

00:02:57.455 --> 00:03:00.010
And finally, if a person is a student.

00:03:00.009 --> 00:03:02.199
And we can combine all these conditions into

00:03:02.199 --> 00:03:05.769
one big boolean expression by using two OR operators.

00:03:05.770 --> 00:03:10.765
These operators will say that if a single one of the age or student conditions is met,

00:03:10.764 --> 00:03:12.489
then we can apply the discount.

00:03:12.490 --> 00:03:14.645
And in code that looks like this.

00:03:14.645 --> 00:03:17.530
Our first OR combines our two age conditions,

00:03:17.530 --> 00:03:21.009
and the second combines those with our student condition.

00:03:21.009 --> 00:03:30.257
And this checks if age &lt;= 15 II age &gt; 60 II isStudent.

00:03:30.258 --> 00:03:32.530
And if any one of those three conditions is true,

00:03:32.530 --> 00:03:34.599
we'll enter IF block of code,

00:03:34.599 --> 00:03:37.144
and set our ticket to a discount of $5.

00:03:37.145 --> 00:03:38.689
And it's as simple as that.

00:03:38.689 --> 00:03:41.419
It's each of our previous conditions that we tested,

00:03:41.419 --> 00:03:43.689
separated by logical operators.

00:03:43.689 --> 00:03:47.710
And as long as each test condition is separated by an AND or an OR,

00:03:47.710 --> 00:03:50.710
you can create as long of tests as you want.

00:03:50.710 --> 00:03:54.770
Let's see some more examples of these combined test conditions to understand AND,

00:03:54.770 --> 00:03:56.010
OR and NOT better.

