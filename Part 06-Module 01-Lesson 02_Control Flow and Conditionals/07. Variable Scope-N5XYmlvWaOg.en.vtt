WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.590
One thing you may have noticed in

00:00:01.590 --> 00:00:04.945
our self-driving car code and earlier is that we always declare

00:00:04.945 --> 00:00:08.220
boolean variables like isLightGreen at the very top

00:00:08.220 --> 00:00:11.985
of our code before and outside of our if statement block of code.

00:00:11.984 --> 00:00:14.939
And this is because of something called Variable Scope.

00:00:14.939 --> 00:00:17.460
Variable Scope is the block or range of

00:00:17.460 --> 00:00:20.550
code where a certain variable can be used and referred to.

00:00:20.550 --> 00:00:25.820
In this case, we needed to use our variable isLightGreen in our if test condition.

00:00:25.820 --> 00:00:29.835
And so the scope of isLightGreen has to contain this whole if statement.

00:00:29.835 --> 00:00:34.140
And by declaring isLightGreen outside of any curly braces or conditions,

00:00:34.140 --> 00:00:36.810
we make it available to our whole program.

00:00:36.810 --> 00:00:38.965
So, our whole program is its scope.

00:00:38.965 --> 00:00:43.685
And remember that we also have to declare variables before we can use them in our code.

00:00:43.685 --> 00:00:46.289
And that's why our test condition variable is

00:00:46.289 --> 00:00:50.009
always declared before we use it in our decision making code.

00:00:50.009 --> 00:00:53.714
But what if we instead declare a variable inside our if statement,

00:00:53.715 --> 00:00:56.515
inside its curly braces like this variable,

00:00:56.515 --> 00:00:59.755
double carSpeed that keeps track of our cars speed?

00:00:59.755 --> 00:01:03.960
Let's set it equal to 100 and this is going to be in kilometers per hour,

00:01:03.960 --> 00:01:06.034
so that's about 60 miles per hour.

00:01:06.034 --> 00:01:11.704
Then the scope of our carSpeed variable will only be the code inside these curly braces.

00:01:11.704 --> 00:01:15.920
In fact, a set of curly braces defines a particular Variable Scope.

00:01:15.920 --> 00:01:20.894
So, inside the scope we can use the variable carSpeed and we are by printing it out.

00:01:20.894 --> 00:01:25.560
But if we try to refer to that variable outside of these curly braces, we can't.

00:01:25.560 --> 00:01:27.832
Like if after the last curly brace of

00:01:27.831 --> 00:01:31.274
our if statement we try to reduce our cars speed by 10.

00:01:31.275 --> 00:01:34.695
This will actually cause your computer to generate an error message.

00:01:34.694 --> 00:01:36.464
And that looks something like this,

00:01:36.465 --> 00:01:40.549
Cannot resolve symbol 'carSpeed' and we'll learn more about errors later.

00:01:40.549 --> 00:01:43.500
But just know that this will cause an error because our program

00:01:43.500 --> 00:01:47.459
can't access the variable carSpeed outside of its scope.

00:01:47.459 --> 00:01:50.339
You can think of Variable Scope as if it were a wall or

00:01:50.340 --> 00:01:53.905
boundary whose sides are defined by these curly braces.

00:01:53.905 --> 00:01:56.385
All the variables declared inside these walls,

00:01:56.385 --> 00:01:58.350
like carSpeed in this boundary,

00:01:58.349 --> 00:02:01.184
can be accessed inside the scope bounds.

00:02:01.185 --> 00:02:05.745
But once you leave the wall boundary and go outside the curly braces even just a little,

00:02:05.745 --> 00:02:08.219
these variables can no longer be accessed.

00:02:08.219 --> 00:02:09.810
So, our carSpeed variable,

00:02:09.810 --> 00:02:12.615
which is declared inside the if statement curly braces,

00:02:12.615 --> 00:02:14.370
has a small scope,

00:02:14.370 --> 00:02:17.895
a small bounding wall that doesn't reach outside the if block of code.

00:02:17.895 --> 00:02:22.830
But isLightGreen, which we declared outside of any curly braces, has a big scope.

00:02:22.830 --> 00:02:26.610
A larger wall that contains our whole program and this let's

00:02:26.610 --> 00:02:30.775
us use and refer to our isLightGreen variable in our test condition.

00:02:30.775 --> 00:02:33.260
So, keep this in mind as you write your if statements.

