WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:02.736
في برنامجنا لتحديد رسوم دخول المتحف

00:00:02.836 --> 00:00:05.873
نحن نعرض الخصم نفسه
لثلاثة مجموعات مختلفة من الناس:

00:00:05.973 --> 00:00:07.508
الأشخاص الذين في الخامسة عشر
من العمر أو أصغر،

00:00:07.608 --> 00:00:10.511
وأولئك الذين تزيد أعمارهم عن الستين سنة
وإنما ليسوا في الستين من العمر تماماً،

00:00:10.611 --> 00:00:12.446
وأخيراً الطلبة.

00:00:12.546 --> 00:00:15.249
نحن مضطرون
إلى تكرار خصمنا ثلاث مرات منفصلة،

00:00:15.349 --> 00:00:18.519
ومن الأفضل دائماً في البرمجة
تقليص التعليمات البرمجية المتكررة،

00:00:18.619 --> 00:00:20.387
ويمكننا فعل ذلك في هذه الحالة.

00:00:20.487 --> 00:00:23.223
يزودنا "Java" بطريقة للتخلص من التكرار

00:00:23.323 --> 00:00:27.094
عن طريق دمج عمليات التحقق الثلاثة تلك
لتصبح حالة اختبار واحدة كبيرة.

00:00:27.194 --> 00:00:29.062
نريد اختبار الحالات الثلاثة كلها،

00:00:29.162 --> 00:00:32.266
وتطبيق الخصم
إن طابق شخص أي من تلك الحالات.

00:00:32.366 --> 00:00:36.737
الشرط الذي نريد اختباره هو ما إن كان الشخص
في الخامسة عشر من العمر أو أصغر،

00:00:36.837 --> 00:00:38.639
أو تزيد سنه عن الستين عاماً،

00:00:38.739 --> 00:00:40.240
أو ما إذا كان الشخص طالباً.

00:00:40.340 --> 00:00:42.843
وإذا كان الشخص يستوفي أي من تلك الشروط،
فسنعطيه الخصم.

00:00:42.943 --> 00:00:47.147
يمكننا صياغة هذا الاختبار الأكبر في
لغة Java باستخدام عوامل التشغيل المنطقية.

00:00:47.247 --> 00:00:49.983
هنالك ثلاثة عوامل تشغيل منطقية رئيسية.

00:00:50.083 --> 00:00:53.253
"and" (و) والممثلة بالرمزين "&amp;&amp;"،

00:00:53.353 --> 00:00:58.025
و"or" (أو) الممثلة بخطين "II"
و "not" (ليس) الممثلة بعلامة تعجب "!"

00:00:58.125 --> 00:01:00.561
والتي قد تبدو مألوفة لديك، حيث استخدمناها
مسبقاً للتحقق مما إذا كانت قيمة ما

00:01:00.661 --> 00:01:02.796
لا تساوي قيمة أخرى.

00:01:02.896 --> 00:01:08.635
يدمج عاملا التشغيل "and" و"or"
حالتي اختبار أو تعبيرين منطقيين boolean

00:01:08.735 --> 00:01:10.304
لتشكيل تعبير واحد أكبر.

00:01:10.404 --> 00:01:14.975
مثل هل 3 أقل من 5
وهل 2 أكبر من 15؟

00:01:15.075 --> 00:01:19.646
إن تركيبات "and" كهذه تكون صواباً أو "true"
فقط إذا كان الاختباران اللذان تدمج بينهما،

00:01:19.746 --> 00:01:24.585
أي التعبيرين اللذين على يسار وعلى يمين
علامة "&amp;&amp;"، هما أيضاً صائبين.

00:01:24.685 --> 00:01:29.623
بعبارة أخرى، تتفقد "and" ما إذا كان
التعبيرين الأيسر والأيمن كلاهما صائباً.

00:01:29.723 --> 00:01:33.861
إذن في هذا المثال،
فإن الاختبار هل 3 أقل من 5 صواب،

00:01:33.961 --> 00:01:36.830
ولكن في الجهة اليمنى،
2 ليست أكبر من 15،

00:01:36.930 --> 00:01:39.166
لذا فإن ناتج تقييم هذا التعبير
هو خطأ أو "false".

00:01:39.266 --> 00:01:41.735
وبما أن أحد هذين التعبيرين خاطئ "false"،

00:01:41.835 --> 00:01:44.905
فإن ناتج تقييم جملة "and" هذه بأكملها
سيكون خطأ "false".

00:01:45.005 --> 00:01:48.141
يقوم عامل التشغيل (أو) "or"
أيضاً بدمج اختبارين،

00:01:48.242 --> 00:01:50.010
ولكن تقييم التعبير الناتج سيكون صواباً

00:01:50.110 --> 00:01:52.279
عندما تكون نتيجة تقييم
أحد أو كلا التعبيرين هي صواب.

00:01:52.379 --> 00:01:56.917
إذن، تتحقق "or" مما إذا كانت قيمة التعبير
الأيسر أو التعبير الأيمن هي صواب "true".

00:01:57.017 --> 00:01:58.619
وإذا كان أحد التعبيرين على الأقل كذلك،

00:01:58.719 --> 00:02:01.188
فسيصبح تقييم جملة "or" المولّفة
هي صواب "true" كذلك.

00:02:01.288 --> 00:02:05.792
لذا فإنه لزوج التعابير نفسه، حيث تقييم
هذا التعبير صواب وهذا تقييمه خطأ،

00:02:05.893 --> 00:02:10.030
فإنه عند دمجهما باستخدام (أو) "or" ستكون
قيمة التعبير الناتج الكلي هي صواب "true".

00:02:10.130 --> 00:02:12.866
وأخيراً، يؤثر عامل التشغيل (ليس) "not"
في اختبار واحد في كل مرة

00:02:12.966 --> 00:02:16.303
بحيث ينفي القيمة التي يتم تطبيقه عليها،

00:02:16.403 --> 00:02:20.874
ما يعني أنه يحوّل القيمة المنطقية
أو التعبير إلى القيمة المعاكسة.

00:02:20.974 --> 00:02:27.781
على سبيل المثال، قولنا (5&gt;3)! يعني تطبيق
(ليس) "not" على هذا التعبير الصواب،

00:02:27.881 --> 00:02:30.017
وعكس الصواب "not true"
مكافئ للخطأ "false"،

00:02:30.117 --> 00:02:32.319
وذلك هو ناتج تقييم هذا التعبير.

00:02:32.419 --> 00:02:35.923
وسنرى المزيد من أمثلة
تطبيق عوامل التشغيل هذه بعد قليل.

00:02:36.023 --> 00:02:39.660
والآن إن استخدمنا
عوامل التشغيل الثلاثة هذه لربط التعابير،

00:02:39.760 --> 00:02:43.330
يمكننا دمج أي عدد نشاء من التعابير
لتشكيل اختبار واحد كبير.

00:02:43.430 --> 00:02:45.866
وهذا ما نريد فعله لكتابة كود المتحف.

00:02:45.966 --> 00:02:48.302
في سيناريو خصم سعر تذاكر المتحف،

00:02:48.402 --> 00:02:51.038
سنتحقق من ثلاث حالات اختبار منفصلة.

00:02:51.138 --> 00:02:54.441
أولاً، ما إذا كان عمر أحدهم
أقل أو يساوي 15 سنة،

00:02:54.541 --> 00:02:57.477
ثم ما إذا كان عمره يفوق الستين،

00:02:57.578 --> 00:03:00.047
وأخيراً ما إذا كان الشخص طالباً.

00:03:00.147 --> 00:03:01.882
يمكننا دمج جميع هذه الحالات

00:03:01.982 --> 00:03:05.886
لتصبح تعبيراً منطقياً "boolean" كبيراً
باستخدام عاملي تشغيل من النوع "or".

00:03:05.986 --> 00:03:10.858
عاملا التشغيل هذان سيفيدان أنه إذا ما
تم استيفاء أحد شرطي العمر أو شرط "طالب"،

00:03:10.958 --> 00:03:12.593
يمكننا عندها تطبيق الخصم.

00:03:12.693 --> 00:03:14.761
وستبدو التعليمات البرمجية
للقيام بذلك هكذا:

00:03:14.862 --> 00:03:17.631
عامل التشغيل "or" الأول
يدمج الشرطين الخاصين بالعمر،

00:03:17.731 --> 00:03:20.834
فيما تدمج "or" الثانية
الشرطين السابقين مع شرط "طالب".

00:03:20.934 --> 00:03:24.938
هذا التعبير يتحقق
مما إذا كان العمر أقل أو يساوي 15،

00:03:25.038 --> 00:03:30.344
أو إذا كان العمر أكبر من 60،
أو إذا كان الشخص طالباً.

00:03:30.444 --> 00:03:32.646
إن تحققت أي من تلك الشروط الثلاثة

00:03:32.746 --> 00:03:34.715
عندها سننتقل إلى داخل كتلة
التعليمات البرمجية الخاصة بـ "if"،

00:03:34.815 --> 00:03:37.251
ونحدد خصماً على سعر التذكرة
مقداره 5 دولارات.

00:03:37.351 --> 00:03:38.785
الأمر بهذه البساطة.

00:03:38.886 --> 00:03:41.522
هذا التعبير هو كل حالة
من الحالات السابقة التي اختبرناها،

00:03:41.622 --> 00:03:43.790
مفصولة باستخدام عوامل تشغيل منطقية.

00:03:43.891 --> 00:03:47.794
طالما يتم فصل كل حالة اختبار
باستخدام "and" و"or"،

00:03:47.895 --> 00:03:50.797
يمكنك صياغة اختبارات مُركّبة
بغض النظر عن طولها.

00:03:50.898 --> 00:03:53.467
دعنا نطّلع على المزيد من الأمثلة
على حالات الاختبار المُركّبة هذه

00:03:53.567 --> 00:03:56.203
لفهم عمل "and" و"or" و"not" بشكل أفضل.

