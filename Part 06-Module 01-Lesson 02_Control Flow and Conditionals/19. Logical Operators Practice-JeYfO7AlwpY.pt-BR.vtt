WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:05.367
Até aqui, usamos operadores lógicos
com expressões, como 3 &lt; 5?

00:00:05.400 --> 00:00:07.133
Ou 6 &gt; 1?

00:00:07.167 --> 00:00:11.667
Mas além dos operadores lógicos,
devemos acompanhar essas comparações.

00:00:11.701 --> 00:00:15.234
Outra boa forma de ver
como operadores lógicos funcionam

00:00:15.267 --> 00:00:19.767
é usá-los em combinação diretamente,
com os valores verdadeiro e falso.

00:00:19.801 --> 00:00:23.267
Em vez de checar se 6 &gt; 1,
que é verdadeiro,

00:00:23.300 --> 00:00:25.567
escrevo o valor true
no seu lugar.

00:00:25.601 --> 00:00:28.000
Qualquer comparação
que você encontrar

00:00:28.033 --> 00:00:30.801
pode ser simplificada
a verdadeiro ou falso.

00:00:30.834 --> 00:00:33.868
Posso usar esses valores
com operadores lógicos.

00:00:33.901 --> 00:00:38.167
Peguemos o operador NOT,
um ponto de exclamação, como exemplo.

00:00:38.200 --> 00:00:43.734
O código NOT(6 &gt; 1) é o equivalente
deste código: NOT verdadeiro,

00:00:43.767 --> 00:00:49.000
porque a expressão 6 &gt; 1
tem o valor de verdadeiro.

00:00:49.033 --> 00:00:51.734
E ambas as expressões
têm o valor de falso,

00:00:51.767 --> 00:00:56.734
pois o operador NOT torna qualquer
valor booleano no seu valor oposto.

00:00:56.767 --> 00:01:01.100
NOT verdadeiro se torna falso
e NOT falso se torna verdadeiro.

00:01:01.133 --> 00:01:03.734
Agora vamos ver
o operador AND.

00:01:03.767 --> 00:01:08.467
Para ele, verdadeiro AND verdadeiro
é verdadeiro.

00:01:08.501 --> 00:01:11.567
Mas falso AND verdadeiro
é falso.

00:01:11.601 --> 00:01:16.167
Este operador precisa que as duas
condições combinadas sejam verdadeiras

00:01:16.200 --> 00:01:18.834
para que toda a expressão
seja verdadeira.

00:01:18.868 --> 00:01:22.734
Se só uma ou as duas
condições combinadas foram falsas,

00:01:22.767 --> 00:01:25.601
toda a combinação AND
também será.

00:01:25.634 --> 00:01:29.167
Pode ajudar pensar em como
operadores lógicos, como AND,

00:01:29.200 --> 00:01:32.033
podem ser aplicados
a situações da vida real.

00:01:32.067 --> 00:01:33.934
Vejamos o clima,
como exemplo.

00:01:33.968 --> 00:01:38.734
Se o dia estiver com sol e chovendo,
isto criará um arco-íris.

00:01:38.767 --> 00:01:42.567
Se o sol for verdadeiro
e se a chuva for verdadeira,

00:01:42.601 --> 00:01:43.968
haverá um arco-íris.

00:01:44.000 --> 00:01:47.434
Mas se só uma condição for verdadeira,
como o sol,

00:01:47.467 --> 00:01:49.601
não haverá um arco-íris.

00:01:49.634 --> 00:01:52.067
O mesmo
se só estiver chovendo.

00:01:52.100 --> 00:01:55.868
E se nenhuma condição for verdadeira,
também não haverá.

00:01:55.901 --> 00:02:01.400
Só haverá um arco-íris se as condições
sol e chuva forem verdadeiras.

00:02:01.434 --> 00:02:05.167
É como o operador AND funciona
para ter o valor verdadeiro.

00:02:05.200 --> 00:02:08.868
Para uma expressão AND
que combina duas condições de teste

00:02:08.901 --> 00:02:12.901
as duas devem ser verdadeiras
para a expressão ser verdadeira.

00:02:12.934 --> 00:02:16.567
Em qualquer outro caso,
a expressão será falsa.

00:02:16.601 --> 00:02:18.601
O operador OR
é meio diferente.

00:02:18.634 --> 00:02:22.734
Ele só precisa que uma
das condições combinadas seja atendida

00:02:22.767 --> 00:02:24.200
para ser verdadeira.

00:02:24.234 --> 00:02:27.400
Verdadeiro OR verdadeiro
é verdadeiro,

00:02:27.434 --> 00:02:29.434
assim como falso OR verdadeiro,

00:02:29.467 --> 00:02:34.534
porque ao menos uma das expressões
combinadas é verdadeira nos dois casos.

00:02:34.567 --> 00:02:36.901
Só se as duas condições
forem falsas,

00:02:36.934 --> 00:02:39.367
toda esta expressão
será falsa.

00:02:39.400 --> 00:02:41.834
Para entender melhor
o operador OR,

00:02:41.868 --> 00:02:45.100
pense que está tentando
ligar e usar o seu laptop.

00:02:45.133 --> 00:02:49.400
Para ele funcionar, precisa de energia,
ou de uma bateria carregada

00:02:49.434 --> 00:02:51.000
ou da tomada.

00:02:51.033 --> 00:02:53.501
Se as duas condições
forem verdadeiras,

00:02:53.534 --> 00:02:57.133
se ele tem uma bateria carregada
e está ligado na tomada,

00:02:57.167 --> 00:02:58.400
ele deve funcionar.

00:02:58.434 --> 00:03:02.033
Também funcionará se uma
das condições for verdadeira.

00:03:02.067 --> 00:03:04.801
Só com uma bateria carregada.

00:03:04.834 --> 00:03:09.734
E também só ligado na tomada,
com a bateria descarregada.

00:03:09.767 --> 00:03:15.734
Ele só não funcionará
se as duas condições forem falsas.

00:03:15.767 --> 00:03:19.467
Quando não tem acesso
a uma bateria ou a uma tomada.

00:03:19.501 --> 00:03:21.601
É como
o operador OR funciona.

00:03:21.634 --> 00:03:25.934
Assim como seu laptop obtém energia
de uma bateria ou de uma tomada,

00:03:25.968 --> 00:03:28.033
uma combinação OR
será verdadeira

00:03:28.067 --> 00:03:31.367
se uma ou as duas condições
combinadas também forem.

00:03:31.400 --> 00:03:35.033
E só se os dois testes
forem falsos, ela será falsa.

00:03:35.067 --> 00:03:37.133
Viram como
AND e OR funcionam.

00:03:37.167 --> 00:03:40.067
Mas e se os combinarmos
em testes mais longos?

00:03:40.100 --> 00:03:44.400
Aqui temos uma expressão mais longa
que usa um operador AND e um OR.

00:03:44.434 --> 00:03:48.534
Lemos:
falso AND verdadeiro OR verdadeiro.

00:03:48.567 --> 00:03:50.701
O que acham
que vai resultar?

00:03:50.734 --> 00:03:55.167
Neste caso, o Java primeiro olhará
as condições ligadas por AND,

00:03:55.200 --> 00:03:58.400
e depois irá às condições
ligadas por OR.

00:03:58.434 --> 00:04:02.033
Esta á a ordem de operações
para operadores lógicos.

00:04:02.067 --> 00:04:05.534
Olharemos primeiro para
a combinação verdadeiro e falso

00:04:05.567 --> 00:04:08.601
e vai se tornar falsa,
pois um operador AND

00:04:08.634 --> 00:04:11.501
exige que as duas condições
sejam verdadeiras

00:04:11.534 --> 00:04:14.067
para que sua combinação
seja verdadeira.

00:04:14.100 --> 00:04:16.934
Esta expressão equivale
a um valor falso,

00:04:16.968 --> 00:04:20.901
e o que sobra é uma versão
simplificada da primeira expressão:

00:04:20.934 --> 00:04:23.300
falso OR verdadeiro.

00:04:23.334 --> 00:04:27.133
Um OR só precisa que uma
condição combinada seja verdadeira

00:04:27.167 --> 00:04:28.467
para ser verdadeira.

00:04:28.501 --> 00:04:31.000
Esta expressão toda
será verdadeira.

00:04:31.033 --> 00:04:32.834
Esses dois são equivalentes.

00:04:32.868 --> 00:04:36.267
Nossa primeira expressão maior
também será verdadeira.

00:04:36.300 --> 00:04:39.601
Mas e se quisermos
avaliar primeiro a combinação OR?

00:04:39.634 --> 00:04:41.634
A parte
verdadeiro OR verdadeiro.

00:04:41.667 --> 00:04:45.601
Para mudar a ordem de operações
e fazer a combinação OR antes,

00:04:45.634 --> 00:04:49.133
podemos pôr essa parte da expressão
entre parênteses.

00:04:49.167 --> 00:04:53.267
O Java sempre executará
código entre parênteses primeiro.

00:04:53.300 --> 00:04:58.234
A mesma checagem, mas com parênteses
no OR, será lido de forma diferente.

00:04:58.267 --> 00:05:01.300
O Java olha o que está
entre parênteses antes:

00:05:01.334 --> 00:05:02.968
verdadeiro OR verdadeiro.

00:05:03.000 --> 00:05:05.634
Como pelo menos
uma condição é verdadeira,

00:05:05.667 --> 00:05:09.434
as duas aqui são, esta combinação OR
será verdadeira.

00:05:09.467 --> 00:05:13.267
Essas condições são simplificadas
para falso AND verdadeiro.

00:05:13.300 --> 00:05:16.968
Como uma delas é falsa,
e são combinadas por um AND,

00:05:17.000 --> 00:05:19.701
toda a expressão será falsa.

00:05:19.734 --> 00:05:22.501
Embora as duas expressões
pareçam similares,

00:05:22.534 --> 00:05:24.901
a ordem de operações
faz diferença.

00:05:24.934 --> 00:05:29.434
Operadores lógicos fazem mais sentido
quando você se acostuma com eles.

00:05:29.467 --> 00:05:32.400
Veremos mais combinações
no próximo segmento.

