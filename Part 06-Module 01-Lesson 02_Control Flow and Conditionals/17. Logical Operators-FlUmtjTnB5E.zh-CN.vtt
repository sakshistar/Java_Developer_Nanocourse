WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.850
以某博物馆门票价格程序为例

00:00:02.850 --> 00:00:05.964
我们为三类人群提供相同折扣

00:00:05.964 --> 00:00:07.620
15 岁及以下的青少年

00:00:07.620 --> 00:00:10.605
60 岁以上的老人

00:00:10.605 --> 00:00:12.560
以及学生

00:00:12.560 --> 00:00:15.359
我们需要分别重复检查三次来确定是否符合折扣条件

00:00:15.359 --> 00:00:18.629
在编程中 减少重复代码会是个好主意

00:00:18.629 --> 00:00:20.489
我们在这个示例中也能做到

00:00:20.489 --> 00:00:23.429
Java 让我们可以通过将这三项检查

00:00:23.429 --> 00:00:27.199
合并为一个较大的测试条件来消除重复

00:00:27.199 --> 00:00:29.175
我们要测试所有三个条件

00:00:29.175 --> 00:00:32.355
并对符合任意条件的对象应用折扣

00:00:32.354 --> 00:00:36.839
我们测试的条件是:对象的年龄是否在 15 岁或以下

00:00:36.840 --> 00:00:38.753
是否在 60 岁以上

00:00:38.753 --> 00:00:40.350
或者对象是否为学生

00:00:40.350 --> 00:00:42.945
对象只需满足任意条件便可享受折扣

00:00:42.945 --> 00:00:47.246
在 Java 中 我们可以利用逻辑运算符来构建这个较大的测试条件

00:00:47.246 --> 00:00:50.094
主要的逻辑运算符有三个

00:00:50.094 --> 00:00:56.909
AND 由两个 &amp; 符号表示 OR 由两条竖线 | 表示 NOT 由感叹号 ! 表示

00:00:56.909 --> 00:00:59.559
你可能会觉得它有点眼熟

00:00:59.560 --> 00:01:02.844
因为我们曾用它来检查某个值是否不等于另外一个值

00:01:02.844 --> 00:01:06.640
AND 和 OR 运算符都可以一次性将两个测试条件

00:01:06.640 --> 00:01:10.344
或者布尔表达式组合形成一个较大的表达式

00:01:10.344 --> 00:01:14.179
例如”3 是否小于 5“ 和 ”2 是否小于 3“

00:01:14.179 --> 00:01:18.879
只有当 &amp;&amp; 符号左右两边表达式中的检查条件均为真时

00:01:18.879 --> 00:01:24.614
这种 AND 组合才为真

00:01:24.614 --> 00:01:29.664
换句话说 它用于检查左右两个表达式是否都为真

00:01:29.665 --> 00:01:31.720
在本例中

00:01:31.719 --> 00:01:33.890
”3 小于 5“为真

00:01:33.890 --> 00:01:36.855
但在右边 2 并非大于 15

00:01:36.855 --> 00:01:39.204
所以这个表达式的值为假

00:01:39.204 --> 00:01:41.784
只要其中一个表达式为假

00:01:41.784 --> 00:01:44.950
整个 AND 组合的值就为假

00:01:44.950 --> 00:01:48.174
OR 运算符也是由两个测试组合而成

00:01:48.174 --> 00:01:52.319
当其中一个或两个表达式都为真时 整个 OR 组合的值便为真

00:01:52.319 --> 00:01:56.934
所以它用于检查 || 符号左边或右边的表达式是否为真

00:01:56.935 --> 00:01:58.659
只要其中有一个为真

00:01:58.659 --> 00:02:01.159
整个 OR 组合的值便为真

00:02:01.159 --> 00:02:05.754
对于这两个相同表达式的组合 这边表达式为真 这边表达式为假

00:02:05.754 --> 00:02:10.000
以 OR 组合时 整个表达式的值便为真

00:02:10.000 --> 00:02:12.819
最后 NOT 运算符每次只处理一个测试项

00:02:12.819 --> 00:02:16.269
用于否定应用了 NOT 的任何值

00:02:16.270 --> 00:02:20.844
这表示它会将布尔值或表达式转化为相反值

00:02:20.844 --> 00:02:27.740
举例而言 !(3 &lt; 5) 表示 这个真表达式非真

00:02:27.740 --> 00:02:30.070
非真即等于假

00:02:30.069 --> 00:02:32.284
也就是这个表达式的值为假

00:02:32.284 --> 00:02:35.900
我们将在后面通过更多示例讲解这些运算符的实际应用

00:02:35.900 --> 00:02:39.520
现在 如果我们用这三个运算符来连接表达式

00:02:39.520 --> 00:02:43.280
就能够将任意数量的表达式组合成一个更大的测试条件

00:02:43.280 --> 00:02:45.930
这正是我们要在这个博物馆门票价格代码中做的

00:02:45.930 --> 00:02:48.280
在确定博物馆门票价格折扣时

00:02:48.280 --> 00:02:50.995
我们将检查三个不同的测试条件

00:02:50.995 --> 00:02:54.412
首先检查对象的年龄是否小于或等于 15 岁

00:02:54.412 --> 00:02:57.455
然后检查他们的年龄是否大于 60 岁

00:02:57.455 --> 00:03:00.010
最后检查对象是否为学生

00:03:00.009 --> 00:03:02.199
现在 我们可以利用两个 OR 运算符

00:03:02.199 --> 00:03:05.769
将所有这些条件组合成一个较大的布尔表达式

00:03:05.770 --> 00:03:10.765
这些运算符表示 如果对象符合两个年龄条件或学生身份条件中的任意一项

00:03:10.764 --> 00:03:12.489
我们便为其提供折扣

00:03:12.490 --> 00:03:14.645
写成代码就是这个样子

00:03:14.645 --> 00:03:17.530
第一个 OR 用于组合两个年龄条件

00:03:17.530 --> 00:03:21.009
第二个 OR 用于将它们与学生身份条件进行组合

00:03:21.009 --> 00:03:30.257
这个表达式会检查年龄是否小于等于 15 或者大于 60 或者一个人是否是学生

00:03:30.258 --> 00:03:32.530
如果三个条件中的任何一个为真

00:03:32.530 --> 00:03:34.599
那么我们将进入 if 代码块

00:03:34.599 --> 00:03:37.144
并将门票折扣设为 $5

00:03:37.145 --> 00:03:38.689
非常简单

00:03:38.689 --> 00:03:41.419
这是我们之前测试的几个条件

00:03:41.419 --> 00:03:43.689
现在已用逻辑运算符分隔开来

00:03:43.689 --> 00:03:47.710
只要保证每个测试条件都用 AND 或者 OR 分隔

00:03:47.710 --> 00:03:50.710
我们就可以在表达式中加入任意多个测试条件

00:03:50.710 --> 00:03:54.770
接下来我们将学习更多有关这种组合测试条件的示例

00:03:54.770 --> 00:03:56.010
进一步了解 AND、OR 和 NOT 运算符的用法

