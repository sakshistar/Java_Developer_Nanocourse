WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.725
These are the correct values.

00:00:01.725 --> 00:00:06.300
Our first expression is true because all of these conditions are separated by

00:00:06.299 --> 00:00:11.099
ORs which means only one of them must be true for this whole combination to be true.

00:00:11.099 --> 00:00:12.410
And the first condition,

00:00:12.410 --> 00:00:14.630
a equals a, is true.

00:00:14.630 --> 00:00:18.734
Our next expression is false because with an AND operator,

00:00:18.734 --> 00:00:23.125
both of it's combined conditions need to be true for the whole combination to be true.

00:00:23.125 --> 00:00:26.429
And is three greater than five is false.

00:00:26.429 --> 00:00:29.480
So that means this whole expression is false as well.

00:00:29.480 --> 00:00:31.949
Our third expression is a little tricky.

00:00:31.949 --> 00:00:34.549
First, Java sees what's in the parentheses.

00:00:34.549 --> 00:00:37.119
Here are two comparisons combined with an or.

00:00:37.119 --> 00:00:39.509
And that means that only one of these comparisons has to be

00:00:39.509 --> 00:00:42.474
true for this combination to also be true.

00:00:42.475 --> 00:00:45.105
We know that three greater than five is false,

00:00:45.104 --> 00:00:47.739
but two less than 10 is true.

00:00:47.740 --> 00:00:51.155
And that means that this or combination is also true.

00:00:51.155 --> 00:00:55.575
And then this value is combined with another true with an AND operator,

00:00:55.575 --> 00:00:59.820
and an and combination is true when both of its side conditions are true.

00:00:59.820 --> 00:01:02.075
So this whole expression is true.

00:01:02.075 --> 00:01:04.439
Our last expression checks if not,

00:01:04.439 --> 00:01:06.299
10 is greater than one.

00:01:06.299 --> 00:01:08.864
We know that 10 greater than one is true,

00:01:08.864 --> 00:01:11.750
and then are NOT operator negates this value.

00:01:11.750 --> 00:01:15.864
So this whole thing turns into not true which is to say, false.

00:01:15.864 --> 00:01:17.909
So logical operators let you combine

00:01:17.909 --> 00:01:21.049
multiple test conditions and negate values when you want to.

