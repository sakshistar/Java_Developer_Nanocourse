WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.730
有很多决策情境需要两个以上的路径

00:00:05.730 --> 00:00:07.215
比如我们的自动驾驶汽车

00:00:07.214 --> 00:00:10.060
如果它看到的交通信号灯是黄色 将会怎样？

00:00:10.060 --> 00:00:14.440
我们会期望车采取其它动作比如减速

00:00:14.439 --> 00:00:18.644
但现在 我们只能选择停车或开车

00:00:18.644 --> 00:00:24.000
那么 我们如何在 if – else 语句之外构建包含除这两种选择的其它选择的呢？

00:00:24.000 --> 00:00:25.905
这就需要使用 else-if 语句

00:00:25.905 --> 00:00:28.800
else-if 语句放在 if 语句后 else 语句前

00:00:28.800 --> 00:00:34.085
其所检验的测试条件与 if 语句中的不同

00:00:34.085 --> 00:00:36.780
因此 我们的 else-if 语句会检验是否为黄灯

00:00:36.780 --> 00:00:39.524
而不是是否为绿灯

00:00:39.524 --> 00:00:42.600
它提供了另一个决策路径

00:00:42.600 --> 00:00:46.429
即一组备用指令 比如减速

00:00:46.429 --> 00:00:51.859
而且只在上一个 if 测试条件为假的情况下才会执行

00:00:51.859 --> 00:00:53.799
当 isLightGreen 为假时

00:00:53.799 --> 00:00:56.339
我们的代码将跳到 else-if 语句

00:00:56.340 --> 00:00:59.640
而且如果其测试条件 isLightYellow 为真

00:00:59.640 --> 00:01:01.825
那么就可以输出 Slow Down (减速)

00:01:01.825 --> 00:01:05.969
Slow Down 就成为另一个决策路径

00:01:05.969 --> 00:01:08.189
所以只有在两个信号灯条件均为假时

00:01:08.189 --> 00:01:12.409
我们的代码才会跳到 else 输出 Stop.

00:01:12.409 --> 00:01:16.094
让我们看看这在自动驾驶汽车 Java 代码中是什么样子

00:01:16.094 --> 00:01:18.495
这就是含有 else-if 语句的代码

00:01:18.495 --> 00:01:20.910
对于 else-if 测试条件 首先我们要知道

00:01:20.909 --> 00:01:24.325
交通信号灯是否亮的是黄灯

00:01:24.325 --> 00:01:27.045
这样我们就有一个新的布尔变量

00:01:27.045 --> 00:01:30.799
isLightYellow 该变量要么为真要么为假

00:01:30.799 --> 00:01:32.625
然后 我们把 else-if 语句 

00:01:32.625 --> 00:01:35.549
放在 if 语句后 else 语句前

00:01:35.549 --> 00:01:39.090
其检验的测试条件是 isLightYellow 

00:01:39.090 --> 00:01:41.460
因此 如果是黄灯而不是绿灯

00:01:41.459 --> 00:01:44.804
我们将进入 else-if 语句 输出 Slow Down.

00:01:44.805 --> 00:01:47.955
现在 我们就有了可采用的三个决策路径

00:01:47.954 --> 00:01:51.149
一 如果是绿灯 则输出 Drive

00:01:51.150 --> 00:01:55.425
二 如果不是绿灯而是黄灯

00:01:55.424 --> 00:01:57.364
则将输出 Slow Down

00:01:57.364 --> 00:02:00.189
三 如果以上两个条件都没有满足

00:02:00.189 --> 00:02:02.534
则输出 Stop

00:02:02.534 --> 00:02:04.114
那么我们来试一下

00:02:04.114 --> 00:02:09.509
首先 让我们考虑一下 isLightGreen 为真 isLightYellow 为假时会发生什么

00:02:09.509 --> 00:02:11.669
在这种情况下 isLightYellow 的值是不重要的

00:02:11.669 --> 00:02:14.974
我们马上就会知道原因

00:02:14.974 --> 00:02:16.870
现在 我们有这些布尔值

00:02:16.870 --> 00:02:20.340
计算机将逐行执行我们的决策代码

00:02:20.340 --> 00:02:24.800
它首先到达 if 语句并检验 isLightGreen 是否为真

00:02:24.800 --> 00:02:29.185
其为真 则进入我们的 if 代码块 输出 Drive! 

00:02:29.185 --> 00:02:30.944
并结束运行

00:02:30.944 --> 00:02:32.549
这就是输出的全部内容

00:02:32.550 --> 00:02:36.570
我们的 else-if 和 else 语句将被完全跳过

00:02:36.569 --> 00:02:40.919
且 isLightYellow 的值永远不会被测试

00:02:40.919 --> 00:02:42.659
这是因为一旦计算机执行了 if 代码块

00:02:42.659 --> 00:02:45.659
输出了 Drive! 

00:02:45.659 --> 00:02:50.525
它就会跳到最后一个 else 语句或者 else-if 语句末尾的大括号

00:02:50.525 --> 00:02:54.460
就这个代码而言 这就是我们程序的终点

00:02:54.460 --> 00:02:56.599
现在 如果我们调换这两个布尔值将会怎么样？

00:02:56.599 --> 00:03:00.680
isLightGreen 为假 isLightYellow 为真

00:03:00.680 --> 00:03:05.750
计算机将再次从顶部读取代码 首先读取 if 语句

00:03:05.750 --> 00:03:10.875
它检验了测试条件 isLightGreen 是否为真 这一次 测试条件为假

00:03:10.875 --> 00:03:14.889
所以 它会跳到下一个 else-if 的代码块

00:03:14.889 --> 00:03:18.659
else-if 检验 isLightYellow 是否为真

00:03:18.659 --> 00:03:23.384
其为真 则向下运行 else-if 代码块 输出 Slow Down

00:03:23.384 --> 00:03:26.340
就像上个例子 else 语句将再次被跳过

00:03:26.340 --> 00:03:31.170
这是因为只要计算机执行了 else-if 代码块

00:03:31.169 --> 00:03:35.774
就会跳到 else 或 else-if 代码块末尾的大括号

00:03:35.775 --> 00:03:40.635
这意味着 即使是一系列含有多个 else-if 语句的更长的检验代码

00:03:40.634 --> 00:03:44.669
一次也只能执行其中一个代码块

00:03:44.669 --> 00:03:48.780
即那个测试条件最先得到满足的代码块

00:03:48.780 --> 00:03:51.748
只有在两个信号灯条件均为假的情况下

00:03:51.748 --> 00:03:55.549
我们的计算机才会进入 else 语句 输出 Stop.

00:03:55.550 --> 00:03:59.385
因此 只有当 isLightGreen 为假且 isLightYellow 为假时 

00:03:59.384 --> 00:04:02.620
我们才能到达 else 语句

00:04:02.620 --> 00:04:07.000
让我们看看关于使用 else-if 语句进行决策的其它例子

