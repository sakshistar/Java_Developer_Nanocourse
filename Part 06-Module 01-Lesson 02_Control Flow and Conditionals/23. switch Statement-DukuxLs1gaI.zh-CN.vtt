WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.445
— 你们还记得吗 在本课程开始时 我曾打算为智能咖啡机写一个程序

00:00:04.445 --> 00:00:08.359
我希望对咖啡机编程 让大家都喝到自己最喜欢的咖啡

00:00:08.359 --> 00:00:12.164
为此 咖啡机需要知道是谁在点咖啡

00:00:12.164 --> 00:00:16.504
然后我们才能命令它为那个人倒一杯正确的咖啡

00:00:16.504 --> 00:00:19.129
每个人都要选择一个三位数密码 将此密码输入咖啡机

00:00:19.129 --> 00:00:21.945
他们便能得到自己最喜欢的咖啡

00:00:21.945 --> 00:00:24.754
我给自己选择的密码是 555

00:00:24.754 --> 00:00:26.049
通过它我能获得一杯浓咖啡

00:00:26.050 --> 00:00:29.385
— 如果你喜欢其他口味

00:00:29.385 --> 00:00:33.797
那么可以通过输入 312 获得一杯美味的香草拿铁

00:00:33.796 --> 00:00:36.019
— 每个人的偏好各不相同

00:00:36.020 --> 00:00:37.980
咖啡机知道的密码越多

00:00:37.979 --> 00:00:39.599
它就越智能

00:00:39.600 --> 00:00:42.158
现在我们来编写该程序

00:00:42.158 --> 00:00:44.020
对于智能咖啡机而言

00:00:44.020 --> 00:00:47.625
我们希望检查一个整数变量 即密码

00:00:47.625 --> 00:00:51.869
然后检测该变量是否与咖啡机接受的特定密码值相等

00:00:51.869 --> 00:00:55.364
密码 555 对应我和我的浓咖啡

00:00:55.365 --> 00:00:58.260
代码 312 对应 Asor 和他的香草拿铁

00:00:58.259 --> 00:01:03.214
我们再添加一个对应挂耳咖啡的密码 629

00:01:03.215 --> 00:01:07.564
我们可以利用一系列决策语句来实现这一行为

00:01:07.564 --> 00:01:10.739
假设我们可以使用整数密码变量

00:01:10.739 --> 00:01:12.959
但我们不确定其准确值

00:01:12.959 --> 00:01:15.704
只知道那是一个三数位

00:01:15.704 --> 00:01:18.774
我们可以利用 if 和 else-if 语句来编写一系列测试条件

00:01:18.775 --> 00:01:22.605
检查输入的密码是否等于某个特定值

00:01:22.605 --> 00:01:25.250
例如 555 或 312

00:01:25.250 --> 00:01:27.040
在每个语句内部

00:01:27.040 --> 00:01:28.995
我们将根据密码值

00:01:28.995 --> 00:01:30.870
分配一种要制作的咖啡

00:01:30.870 --> 00:01:35.310
我们通过字符串变量 coffeeType 来记录咖啡的种类

00:01:35.310 --> 00:01:36.750
在代码的最后

00:01:36.750 --> 00:01:38.969
我们将输出 coffeeType 的值

00:01:38.969 --> 00:01:41.730
我们来仔细看第一个 if 语句

00:01:41.730 --> 00:01:45.760
它会测试密码是否等于 555

00:01:45.760 --> 00:01:48.660
我们用这个双等于号来检测这种相等关系

00:01:48.659 --> 00:01:52.560
值 555 对应于浓咖啡密码

00:01:52.560 --> 00:01:54.570
如果这个测试条件为真

00:01:54.569 --> 00:01:59.359
那么我们将进入 if 代码块 并将 coffeeType 的值设置为 espresso

00:01:59.359 --> 00:02:02.084
因为我们已执行了 if 语句中的代码

00:02:02.084 --> 00:02:06.524
所以程序会跳出 if 代码块来到输出代码行

00:02:06.525 --> 00:02:08.789
这时将输出 espresso

00:02:08.789 --> 00:02:11.054
代码其余部分的原理与此类似

00:02:11.055 --> 00:02:13.795
我们检查输入的密码是否等于 312

00:02:13.794 --> 00:02:17.174
如果不是 则继续检查是否等于 629

00:02:17.175 --> 00:02:19.135
如果密码与任何这些值都不匹配

00:02:19.134 --> 00:02:21.634
那么 coffeeType 将设置为 unknown

00:02:21.634 --> 00:02:25.504
但是如果需要执行多次密码检查 这个代码可能会变得很长很长

00:02:25.504 --> 00:02:29.379
而且在每个测试条件中 我们都在进行类似的相等关系检查

00:02:29.379 --> 00:02:33.294
我们在检查某个密码是否等于某个特定值

00:02:33.294 --> 00:02:37.484
在 Java 中 我们可以利用 switch 语句以另一种方式来编写这样的代码

00:02:37.485 --> 00:02:41.430
switch 语句能够更简洁地实现相同目的

00:02:41.430 --> 00:02:45.030
我们可以用它来检查密码等特定变量的值

00:02:45.030 --> 00:02:49.050
检查变量值是否等于咖啡机可能接受的某个值

00:02:49.050 --> 00:02:53.025
例如 555、312 和 629

00:02:53.025 --> 00:02:55.620
每个这种特定的值都称为一个 case

00:02:55.620 --> 00:02:58.980
我们可以为每个 case 编写不同的行为

00:02:58.979 --> 00:03:01.884
在 Java 中 这种 switch 语句就是这个样子

00:03:01.884 --> 00:03:04.289
switch 后跟待检查的变量

00:03:04.289 --> 00:03:07.289
变量用括号包围起来

00:03:07.289 --> 00:03:11.204
然后用一对大括号将所有相等关系检查语句包围起来

00:03:11.205 --> 00:03:14.469
相等关系检查就是这些特定的 case

00:03:14.469 --> 00:03:18.539
这是程序已知的特定三位数密码

00:03:18.539 --> 00:03:22.745
555、312 和 629

00:03:22.745 --> 00:03:28.064
这边第一个 if 语句所执行的代码与这边的 case 555 完全相同

00:03:28.064 --> 00:03:31.319
程序将检查密码值与数字 555

00:03:31.319 --> 00:03:34.574
是否存在相等关系 如果是

00:03:34.574 --> 00:03:37.750
我们便将 coffeeType 字符串设置为等于 espresso

00:03:37.750 --> 00:03:40.664
这边第一个 if 语句的作用也是如此

00:03:40.664 --> 00:03:43.590
但是如果密码不等于 555

00:03:43.590 --> 00:03:45.569
我们将会运行下一个 case

00:03:45.569 --> 00:03:48.254
就像继续运行下一个 else if 语句一样

00:03:48.254 --> 00:03:52.995
case 312 和 case 629 相当于这两个 else if 语句代码

00:03:52.995 --> 00:03:56.870
这个 case 用于检查密码是否等于 312

00:03:56.870 --> 00:04:00.514
如果是 那么我们将 coffeeType 设置为 vanilla latte

00:04:00.514 --> 00:04:02.490
如果不是 我们就继续运行下一个 case

00:04:02.490 --> 00:04:04.882
就像这边继续运行下一个 else if语句一样

00:04:04.882 --> 00:04:09.039
这三个 case 就是用于检查我们已知的三个密码值

00:04:09.039 --> 00:04:11.909
如果输入的密码与其中任何一个值匹配

00:04:11.909 --> 00:04:14.264
我们便会进入相应的 case 代码

00:04:14.264 --> 00:04:17.789
并将 coffeeType 设置为正确的咖啡种类值

00:04:17.790 --> 00:04:19.814
请注意 在定义每个 case 后

00:04:19.814 --> 00:04:22.350
例如 case 312 我们会添加一个冒号

00:04:22.350 --> 00:04:26.770
而不是分号 然后编写希望程序执行的指令

00:04:26.769 --> 00:04:29.719
也就是给 coffeeType 字符串指定具体的值

00:04:29.720 --> 00:04:33.465
这是所有 case 的格式:单词 case

00:04:33.464 --> 00:04:36.299
用于检查等式的特定值

00:04:36.300 --> 00:04:39.389
冒号 然后是要执行的代码

00:04:39.389 --> 00:04:42.375
在每个 case 代码行下 我们会添加这个单词 break

00:04:42.375 --> 00:04:46.004
case 中的代码获得执行后 程序便会中断

00:04:46.004 --> 00:04:49.942
它用于中断 switch 语句 并跳转到右边大括号

00:04:49.942 --> 00:04:52.034
在每个 case 下添加一个 break

00:04:52.035 --> 00:04:55.710
可确保仅执行这些代码块中的一个

00:04:55.709 --> 00:04:58.199
与此相同的是

00:04:58.199 --> 00:05:01.670
程序每次也只会执行一系列 if 和 else if代码块中的一个

00:05:01.670 --> 00:05:04.710
break 将中断决策代码并转到

00:05:04.709 --> 00:05:09.180
右边大括号之后 并输出 coffeeType 的值

00:05:09.180 --> 00:05:13.050
这里也有一个 default case 其作用与一个 else 语句相同

00:05:13.050 --> 00:05:16.665
当任何 case 都不满足时 程序便会执行 default 代码

00:05:16.665 --> 00:05:18.780
比方说输入密码为 914

00:05:18.779 --> 00:05:22.634
且我们不认识这个密码 也没有相对应的 case

00:05:22.634 --> 00:05:25.459
这两段代码所执行的内容是一样的

00:05:25.459 --> 00:05:28.219
事实上 如果输入密码 555

00:05:28.220 --> 00:05:31.915
那么两段代码都会输出 espresso

00:05:31.915 --> 00:05:36.879
这段代码会进入第一个 if 语句 并将 coffeeType 设置为 espresso

00:05:36.879 --> 00:05:41.094
这段代码会根据第一个 case 检查密码值

00:05:41.095 --> 00:05:43.835
case 555 由于这两个值一致

00:05:43.834 --> 00:05:47.544
所以程序会进入这个代码块 并也将 coffeeType 设置为 espresso

00:05:47.545 --> 00:05:50.830
所以 switch 语句虽然可以通过 if 和 else 语句来实现

00:05:50.829 --> 00:05:53.349
但如果要进行大量相等关系检查

00:05:53.350 --> 00:05:56.655
那么用 switch 语句来编写代码将更为简单易懂

00:05:56.654 --> 00:05:59.254
作为一名程序员

00:05:59.254 --> 00:06:02.230
你将决定采用什么语句来确保你的代码易于理解和使用

00:06:02.230 --> 00:06:04.620
现在我们通过更多示例代码来练习 switch 语句

