WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.120
假设有两个朋友过来和你一起看电影

00:00:03.120 --> 00:00:07.035
你准备写个程序来挑选一部所有人都喜欢的电影

00:00:07.035 --> 00:00:08.960
你只喜欢动作片

00:00:08.960 --> 00:00:12.315
但你知道朋友 1 只看爱情片

00:00:12.314 --> 00:00:16.839
朋友 2 只看搞笑片或恐怖片

00:00:16.839 --> 00:00:21.719
假设我们用这四个布尔变量来储存电影是否包含动作、爱情、恐怖或搞笑情节

00:00:21.719 --> 00:00:25.949
（如果包含 则为真 如果不包含 则为假）

00:00:25.949 --> 00:00:30.189
我们应该如何编写 if 语句 才能挑选出一部所有人都喜欢看的电影？

00:00:30.190 --> 00:00:35.160
我们必须编写一个包含所有三个人的观影偏好的测试条件

00:00:35.159 --> 00:00:37.364
第一个偏好是动作情节

00:00:37.365 --> 00:00:42.950
第二个偏好是爱情情节 第三个偏好是搞笑或恐怖情节

00:00:42.950 --> 00:00:48.359
我们可以使用逻辑运算符将所有这些偏好组合到一个测试条件中

00:00:48.359 --> 00:00:52.213
将所有三个人的偏好用 AND 运算符分隔开

00:00:52.213 --> 00:00:53.879
表示三种偏好都必须得到满足

00:00:53.880 --> 00:00:56.670
整个测试条件才为真

00:00:56.670 --> 00:00:58.310
对于第三种偏好

00:00:58.310 --> 00:01:01.109
这位朋友喜欢看搞笑片或恐怖片

00:01:01.109 --> 00:01:02.700
只要这两个条件之一得到满足

00:01:02.700 --> 00:01:04.995
这整个组合的值便为真

00:01:04.995 --> 00:01:09.000
但想象一下 如果再来一个有着复杂观影偏好的朋友

00:01:09.000 --> 00:01:11.790
那么这些逻辑测试可能变得很长 带很多括号

00:01:11.790 --> 00:01:14.660
从而让人难以理解

00:01:14.659 --> 00:01:18.420
程序员有时候会转而选择嵌套 if 语句

00:01:18.420 --> 00:01:22.424
嵌套 if 语句其实就是在 if 语句内包含 if 语句

00:01:22.424 --> 00:01:27.134
我们可以通过这种语句组合多个测试条件 就像使用 AND 运算符一样

00:01:27.135 --> 00:01:31.825
我们可以通过在 if 语句中加入另一个 if 语句来编写很长的语句

00:01:31.825 --> 00:01:35.685
外层 if 语句的大括号应将内层 if 语句包围起来

00:01:35.685 --> 00:01:40.230
嵌套的 if 语句仅包含其大括号内的这一代码块

00:01:40.230 --> 00:01:43.150
这段代码和之前那段代码的检查效果是一样的

00:01:43.150 --> 00:01:47.594
外层 if 语句将检查电影是否包含动作和爱情情节

00:01:47.594 --> 00:01:52.039
内层 if 语句将检查第三个偏好 也就是电影中是否包含搞笑或恐怖情节

00:01:52.040 --> 00:01:56.969
通过嵌套 if 语句 我们可以中断较长的测试条件

00:01:56.969 --> 00:02:02.189
并添加将在每个 if 语句中单独执行的代码

00:02:02.189 --> 00:02:06.810
假设某部电影满足这些值 我们来逐行解说这段电影挑选代码

00:02:06.810 --> 00:02:09.990
我们知道动作和爱情情节条件均为真

00:02:09.990 --> 00:02:12.240
通过 AND 运算符将它们组合起来时

00:02:12.240 --> 00:02:14.515
这整个组合的值也为真

00:02:14.514 --> 00:02:17.719
所以我们将进入外层 if 语句的代码并输出

00:02:17.719 --> 00:02:20.354
“This movie includes action and romance.”

00:02:20.354 --> 00:02:23.234
下一行是嵌套 if 语句

00:02:23.235 --> 00:02:26.220
它将检查电影中是否包含搞笑或恐怖情节

00:02:26.219 --> 00:02:28.395
由于这两个条件都为假

00:02:28.395 --> 00:02:30.710
所以这个表达式的值为假

00:02:30.710 --> 00:02:33.885
因而我们将跳过内层 if 语句中的代码

00:02:33.884 --> 00:02:38.204
仅输出“This movie includes action and romance.”

00:02:38.205 --> 00:02:41.265
现在我们将搞笑情节这个变量改为真

00:02:41.264 --> 00:02:45.049
这一次 我们还是会进入外层 if 语句并输出

00:02:45.050 --> 00:02:48.105
“This movie includes action and romance.”

00:02:48.104 --> 00:02:51.569
然后内层 if 语句将检查搞笑或恐怖情节条件是否为真

00:02:51.569 --> 00:02:53.549
这一次 搞笑情节条件为真

00:02:53.550 --> 00:02:56.880
所以我们将进入内层 if 语句并同时输出

00:02:56.879 --> 00:02:59.354
“This also includes comedy or horror!”

00:02:59.354 --> 00:03:02.554
我们的输出将是这两行文本

00:03:02.555 --> 00:03:06.915
所以无论是检查复杂的测试条件 还是仅仅想要分离代码

00:03:06.914 --> 00:03:09.299
嵌套 if 语句都非常有用

