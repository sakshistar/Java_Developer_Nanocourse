WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.120
Say you have a couple of friends coming over to see a movie

00:00:03.120 --> 00:00:07.035
and you're trying to write a program that will pick a movie that everyone will like.

00:00:07.035 --> 00:00:08.960
You only like action movies,

00:00:08.960 --> 00:00:12.315
but you know friend one only watches movies that have romance in them,

00:00:12.314 --> 00:00:16.839
and friend two only watches movies that have either comedy or horror.

00:00:16.839 --> 00:00:21.719
Given these four boolean variables that store whether a movie includes action, romance,

00:00:21.719 --> 00:00:25.949
horror or comedy (all true if it does and false if it doesn't),

00:00:25.949 --> 00:00:30.189
what if statement can be right to choose a movie that everyone can enjoy?

00:00:30.190 --> 00:00:35.160
We have to focus on writing a test condition that involves all three of our preferences.

00:00:35.159 --> 00:00:37.364
Our first preference is action.

00:00:37.365 --> 00:00:42.950
Our second, romance; and our third preference is either comedy or horror.

00:00:42.950 --> 00:00:48.359
We can combine all our preferences in one test condition by using logical operators.

00:00:48.359 --> 00:00:52.213
By separating all three of our preferences with And operators,

00:00:52.213 --> 00:00:53.879
that means that all of them must be

00:00:53.880 --> 00:00:56.670
true in order for the whole test condition to be true.

00:00:56.670 --> 00:00:58.310
For our third preference,

00:00:58.310 --> 00:01:01.109
our friend wanted either comedy or horror.

00:01:01.109 --> 00:01:02.700
So, as long as one of these is true,

00:01:02.700 --> 00:01:04.995
this whole combination will also be true.

00:01:04.995 --> 00:01:09.000
But imagine adding another friend to this list with complicated preferences,

00:01:09.000 --> 00:01:11.790
these logical tests can get really long and with

00:01:11.790 --> 00:01:14.660
lots of parentheses so they can be hard to understand.

00:01:14.659 --> 00:01:18.420
Sometimes programmers choose to use nested if statements instead.

00:01:18.420 --> 00:01:22.424
Nested if statements are just an if statement within an if statement.

00:01:22.424 --> 00:01:27.134
They let you combine multiple test conditions similar to how an And operator does.

00:01:27.135 --> 00:01:31.825
So, our long if statement can be written instead as an if within another if.

00:01:31.825 --> 00:01:35.685
Our outer if has its curly braces surrounding our inner if,

00:01:35.685 --> 00:01:40.230
and our nested if only contains this block of code inside its curly braces.

00:01:40.230 --> 00:01:43.150
This code performs the same checks as before.

00:01:43.150 --> 00:01:47.594
Our outer if checks if a movie includes action and romance,

00:01:47.594 --> 00:01:52.039
and our inner if checks our third preference whether there's comedy or horror.

00:01:52.040 --> 00:01:56.969
The nested if has given us the ability to break up a long test condition.

00:01:56.969 --> 00:02:02.189
It also let's us add code that executes inside each if statement separately.

00:02:02.189 --> 00:02:06.810
With these values, we'll then look at our decision making code line by line.

00:02:06.810 --> 00:02:09.990
We know action and romance are both true,

00:02:09.990 --> 00:02:12.240
so when they're combined with an And operator,

00:02:12.240 --> 00:02:14.515
this whole expression will also be true.

00:02:14.514 --> 00:02:17.719
So, we'll enter the code in our outer if statement and print out,

00:02:17.719 --> 00:02:20.354
"This movie includes action and romance."

00:02:20.354 --> 00:02:23.234
The next line we get to is our nested if statement,

00:02:23.235 --> 00:02:26.220
which checks if comedy or horror is true,

00:02:26.219 --> 00:02:28.395
and since both of these are false,

00:02:28.395 --> 00:02:30.710
this expression will also be false.

00:02:30.710 --> 00:02:33.885
So, we'll skip over the code in our inner if,

00:02:33.884 --> 00:02:38.204
and all that we'll print out is "This movie includes action and romance."

00:02:38.205 --> 00:02:41.265
Now, let's change our comedy variable so that it's true.

00:02:41.264 --> 00:02:45.049
This time, we'll still enter our first outer if and print out,

00:02:45.050 --> 00:02:48.105
"This movie includes action and romance," then our

00:02:48.104 --> 00:02:51.569
inner if checks if either comedy or horror is true.

00:02:51.569 --> 00:02:53.549
This time, comedy is true.

00:02:53.550 --> 00:02:56.880
So, we'll enter our inner if and also print out,

00:02:56.879 --> 00:02:59.354
"This also includes comedy or horror."

00:02:59.354 --> 00:03:02.554
Our print output will be those two lines of text.

00:03:02.555 --> 00:03:06.915
So, whether you're checking a complicated test condition or just want a separate code,

00:03:06.914 --> 00:03:09.299
nested if's can be a really useful tool.

