WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.469
We've talked about how booleans take on the value of either true or false.

00:00:04.469 --> 00:00:07.429
And so far we've been directly assigning that value.

00:00:07.429 --> 00:00:12.449
Like with the code boolean b1 equals true and boolean b2 equals false.

00:00:12.449 --> 00:00:17.009
But boolean values can also be calculated by doing tests like comparisons,

00:00:17.010 --> 00:00:19.530
and these are called boolean expressions,

00:00:19.530 --> 00:00:22.155
and expressions look something like this.

00:00:22.155 --> 00:00:25.315
This expression, which checks if three is less than five,

00:00:25.315 --> 00:00:27.240
is something we know is true.

00:00:27.239 --> 00:00:28.869
Three is less than five.

00:00:28.870 --> 00:00:33.060
And, in fact, this expression evaluates to the boolean value of true,

00:00:33.060 --> 00:00:36.825
and we can assign that value to a boolean variable like before.

00:00:36.825 --> 00:00:38.984
And let's name this one b3.

00:00:38.984 --> 00:00:42.594
So here b1 and b3 are equal to the same value.

00:00:42.594 --> 00:00:48.689
True. But b3 is assigned to the value of this comparison and not to true directly.

00:00:48.689 --> 00:00:50.189
Then if we wrote this expression,

00:00:50.189 --> 00:00:52.619
which checks if three is greater than five,

00:00:52.619 --> 00:00:57.669
this would evaluate to the boolean value of false since three is not greater than five.

00:00:57.670 --> 00:01:01.042
And then b2 and b4 will have the same value.

00:01:01.042 --> 00:01:03.420
There are a number of ways that we can compare

00:01:03.420 --> 00:01:07.245
numbers or variables that will evaluate to true or false.

00:01:07.245 --> 00:01:10.335
In addition to these less than and greater than expressions,

00:01:10.334 --> 00:01:14.859
we can also have less than or equal to and greater than or equal to.

00:01:14.859 --> 00:01:16.900
And let's use these in examples too.

00:01:16.900 --> 00:01:22.480
We could compare two numbers again like to test if seven is less than or equal to six.

00:01:22.480 --> 00:01:26.445
And since seven is greater than six then this expression is not true,

00:01:26.444 --> 00:01:28.199
it evaluates to false.

00:01:28.200 --> 00:01:29.790
And instead of using numbers,

00:01:29.790 --> 00:01:32.250
we can use variables in these comparisons too.

00:01:32.250 --> 00:01:34.814
Like say we have declared an integer variable named

00:01:34.814 --> 00:01:39.034
X and initialized it to 10 before starting these comparisons.

00:01:39.034 --> 00:01:42.840
We can then compare that variable to another number or variable,

00:01:42.840 --> 00:01:44.984
like this expression which tests,

00:01:44.984 --> 00:01:47.519
"Is X greater than or equal to 10?"

00:01:47.519 --> 00:01:50.045
Java will see this and say X is 10.

00:01:50.045 --> 00:01:53.549
So, yes, it's equal to 10 and the expression is true.

00:01:53.549 --> 00:01:56.009
And if we want to only test for equality,

00:01:56.010 --> 00:01:59.550
we use double equal signs so we can test something like if

00:01:59.549 --> 00:02:04.349
X is equal to 9 and since 10 is not equal to 9,

00:02:04.349 --> 00:02:07.049
this expression will evaluate to false.

00:02:07.049 --> 00:02:10.092
And let's look at this equality check in detail.

00:02:10.092 --> 00:02:14.339
In Java, the double equal sign tests for equality and is not to be

00:02:14.340 --> 00:02:19.104
mistaken with the single equal sign which in Java is a variable assignment.

00:02:19.104 --> 00:02:21.299
So when we write X equals equals

00:02:21.300 --> 00:02:25.200
nine this expression is the equivalent of the boolean value false,

00:02:25.199 --> 00:02:28.375
and our variable X will still be equal to 10.

00:02:28.375 --> 00:02:31.620
But if we said X equals nine with one equals,

00:02:31.620 --> 00:02:34.425
this would change the value of X from 10 to 9,

00:02:34.425 --> 00:02:37.094
and no boolean value will be calculated.

00:02:37.094 --> 00:02:40.918
So remember to use double equals signs to check for equality.

00:02:40.918 --> 00:02:43.543
And to check if two values are not equal,

00:02:43.543 --> 00:02:45.795
we use exclamation point equals,

00:02:45.794 --> 00:02:48.574
where this exclamation point means not.

00:02:48.574 --> 00:02:53.879
So X not equal to 9 will evaluate to true because 10 is not equal to 9.

00:02:53.879 --> 00:02:56.539
It's the opposite of the previous equality check.

00:02:56.539 --> 00:03:00.629
And because all these types of expressions evaluate to true or false,

00:03:00.629 --> 00:03:04.859
they are often used as test conditions in decision making if statements.

00:03:04.860 --> 00:03:07.361
But before we get to using these for decision making,

00:03:07.360 --> 00:03:10.009
let's get more practice evaluating these expressions.

