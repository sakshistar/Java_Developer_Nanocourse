WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.480
So far, we've been using logical operators with expressions,

00:00:03.480 --> 00:00:05.280
like is three less than five?

00:00:05.280 --> 00:00:07.165
Or is six greater than one?

00:00:07.165 --> 00:00:09.644
But then, in addition to our logical operators,

00:00:09.644 --> 00:00:11.867
we have all these comparisons to keep track of.

00:00:11.868 --> 00:00:15.449
Another good way to see how logical operators work is to

00:00:15.449 --> 00:00:19.554
use them in combination directly with the values true or false.

00:00:19.554 --> 00:00:22.274
So instead of checking is six greater than one?

00:00:22.274 --> 00:00:25.704
Which is true. I'll just write the value true in its place.

00:00:25.704 --> 00:00:30.529
In any other comparison you come across can be simplified to true or false as well.

00:00:30.530 --> 00:00:33.689
And I can use these values with logical operators.

00:00:33.689 --> 00:00:35.265
Let's take the NOT operator,

00:00:35.265 --> 00:00:37.994
which is an exclamation point, as an example.

00:00:37.994 --> 00:00:43.875
The code NOT, six greater than one is the equivalent of this code, not true.

00:00:43.875 --> 00:00:49.019
Because the expression six greater than one evaluates to the boolean value of true.

00:00:49.020 --> 00:00:52.740
And both expressions evaluate to false because the NOT operator

00:00:52.740 --> 00:00:56.969
turns whatever boolean value it operates on into its opposite value.

00:00:56.969 --> 00:00:58.814
So not true becomes false,

00:00:58.814 --> 00:01:01.344
and not false becomes true.

00:01:01.344 --> 00:01:03.494
Next, let's look at the AND operator.

00:01:03.494 --> 00:01:05.512
For the AND operator,

00:01:05.513 --> 00:01:08.400
true and true will evaluate to true,

00:01:08.400 --> 00:01:11.800
but false and true will evaluate to false.

00:01:11.799 --> 00:01:14.429
And this is because the AND operator needs both of

00:01:14.430 --> 00:01:18.680
its combined conditions to be true for the whole expression to evaluate to true.

00:01:18.680 --> 00:01:22.605
So if just one or both of its combined conditions are false,

00:01:22.605 --> 00:01:26.174
then the whole and combination will also be false.

00:01:26.174 --> 00:01:27.719
It might be helpful to think of how

00:01:27.719 --> 00:01:31.804
logical operators like an and can be applied to real life scenarios.

00:01:31.805 --> 00:01:33.945
Let's take the weather as an example,

00:01:33.944 --> 00:01:36.764
let's say that if it's sunny and raining outside,

00:01:36.765 --> 00:01:38.799
then this will create a rainbow.

00:01:38.799 --> 00:01:43.679
So if it's true that it's sunny and it's true that it's raining, we'll create a rainbow.

00:01:43.680 --> 00:01:46.095
But if only one of these conditions is true,

00:01:46.094 --> 00:01:47.530
like if it's only sunny,

00:01:47.530 --> 00:01:49.799
then no rainbow will be created.

00:01:49.799 --> 00:01:51.879
Same goes for if it's only raining.

00:01:51.879 --> 00:01:53.609
And if neither condition is true,

00:01:53.609 --> 00:01:55.929
then still no rainbow will be created.

00:01:55.930 --> 00:02:01.670
The only way a rainbow is created is if both sunny and raining conditions are true.

00:02:01.670 --> 00:02:05.204
And this is like how an AND operator works to produce a true value.

00:02:05.204 --> 00:02:09.030
For an and expression that combines two test conditions both

00:02:09.030 --> 00:02:12.810
of its conditions must be true for the whole expression to evaluate to true,

00:02:12.810 --> 00:02:14.235
and in any other case,

00:02:14.235 --> 00:02:16.390
the expression will evaluate to false.

00:02:16.389 --> 00:02:18.934
The OR operator is a little different.

00:02:18.935 --> 00:02:20.759
The OR operator only needs one of

00:02:20.759 --> 00:02:24.269
its two combined conditions to be met for it to be true.

00:02:24.270 --> 00:02:27.335
So true or true evaluates to true,

00:02:27.335 --> 00:02:29.760
and so does false or true.

00:02:29.759 --> 00:02:34.364
And that's because at least one of its combined expressions is true in both cases.

00:02:34.365 --> 00:02:39.270
Only if both conditions and combines are false will this whole expression be false.

00:02:39.270 --> 00:02:41.973
To understand an OR operator a little better,

00:02:41.973 --> 00:02:45.030
think about if you're trying to power and use your laptop.

00:02:45.030 --> 00:02:46.500
For your laptop to work,

00:02:46.500 --> 00:02:51.675
it needs to get power either from a charged battery or from a power outlet.

00:02:51.675 --> 00:02:53.650
If both of these conditions are true,

00:02:53.650 --> 00:02:56.879
if it has a charged battery and it's plugged into a power outlet,

00:02:56.879 --> 00:02:58.560
your laptop should work.

00:02:58.560 --> 00:03:02.129
Your laptop will also work if only one of the conditions is true.

00:03:02.129 --> 00:03:04.724
Like if it's only working off of a charged battery.

00:03:04.724 --> 00:03:07.019
And it will also be powered if you're only use

00:03:07.020 --> 00:03:10.290
a power outlet but your battery isn't charged.

00:03:10.289 --> 00:03:12.840
The only time the laptop won't get any power and

00:03:12.840 --> 00:03:15.750
won't work is when both conditions are false.

00:03:15.750 --> 00:03:19.370
When it doesn't have access to a charged battery or a power outlet.

00:03:19.370 --> 00:03:21.960
And this is like how the OR operator works,

00:03:21.960 --> 00:03:25.805
just like your laptop can get power from a battery or a power outlet,

00:03:25.805 --> 00:03:28.409
an or combination will be true if one

00:03:28.409 --> 00:03:31.219
or both of the conditions it combines are also true.

00:03:31.219 --> 00:03:34.979
And only if both tested combines are false will it be false.

00:03:34.979 --> 00:03:37.364
So now we understand how ANDs and ORs work.

00:03:37.365 --> 00:03:40.080
But what if we combine these into longer tests?

00:03:40.080 --> 00:03:44.445
Here's a longer expression that uses an AND and an OR operator.

00:03:44.444 --> 00:03:46.125
This could be read false,

00:03:46.125 --> 00:03:48.520
and true, or true.

00:03:48.520 --> 00:03:50.745
What do you think this evaluates to?

00:03:50.745 --> 00:03:55.379
In this case Java will first look at the conditions that are tied together with ANDs,

00:03:55.379 --> 00:03:58.984
and then it will move on to conditions tied together with ORs.

00:03:58.985 --> 00:04:02.010
This is the order of operations for logical operators.

00:04:02.009 --> 00:04:04.560
So it will look at our false and true combo

00:04:04.560 --> 00:04:07.500
first and say this will evaluate to false because

00:04:07.500 --> 00:04:10.500
an AND operator requires both of its combined conditions

00:04:10.500 --> 00:04:14.020
to be true before its combination will evaluate to true.

00:04:14.020 --> 00:04:17.250
So this expression is equivalent to a false value.

00:04:17.250 --> 00:04:23.310
And what remains is a simplified version of our first expression, false or true.

00:04:23.310 --> 00:04:25.439
And we know that an OR only needs one of

00:04:25.439 --> 00:04:28.459
its combined conditions to be true to evaluate to true.

00:04:28.459 --> 00:04:31.004
So this whole expression evaluates to true.

00:04:31.004 --> 00:04:32.629
And remember these two are equivalent.

00:04:32.629 --> 00:04:36.089
So our first larger expression also evaluates to true.

00:04:36.089 --> 00:04:39.449
But what if we wanted to evaluate the OR combination first?

00:04:39.449 --> 00:04:41.189
The true or true part.

00:04:41.189 --> 00:04:45.704
To override the order of operations and make this or combination evaluate first,

00:04:45.704 --> 00:04:48.904
we can surround that part of the expression in parentheses.

00:04:48.904 --> 00:04:53.409
And Java will always execute code in parentheses before anything else.

00:04:53.410 --> 00:04:58.120
So this same check but with parentheses around the or will be read differently.

00:04:58.120 --> 00:05:02.944
In this case, Java looks at what's in the parentheses first, true or true.

00:05:02.944 --> 00:05:05.524
And since at least one of these two conditions is true,

00:05:05.524 --> 00:05:06.879
in fact both of them are true,

00:05:06.879 --> 00:05:09.569
this or combination evaluates to true.

00:05:09.569 --> 00:05:13.250
In these conditions, simplify to false and true.

00:05:13.250 --> 00:05:16.915
And because one of these conditions is false and they're combined with an AND,

00:05:16.915 --> 00:05:19.835
this whole expression evaluates to false.

00:05:19.834 --> 00:05:22.509
So even though these two expressions look very similar,

00:05:22.509 --> 00:05:25.230
the order of operations makes a difference.

00:05:25.230 --> 00:05:29.285
Logical operators make the most sense when you get used to them with practice.

00:05:29.285 --> 00:05:32.170
So let's take a look at more combinations in the next quiz.

