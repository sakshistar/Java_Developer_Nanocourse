WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:04.100
Computadores tomam decisões
através de instruções if.

00:00:04.133 --> 00:00:06.767
Não difere muito
de como os humanos fazem.

00:00:06.801 --> 00:00:10.868
Vou explicar melhor. Por exemplo,
quando vou a uma loja de arte,

00:00:10.901 --> 00:00:14.534
se canetas estão em liquidação,
eu compro muitas.

00:00:14.567 --> 00:00:18.734
Se saio, penso: "Se estiver frio,
levarei um casaco."

00:00:18.767 --> 00:00:22.133
São simples instruções if
que sempre usamos.

00:00:22.167 --> 00:00:26.067
Se alguma condição é verdadeira,
como estar frio lá fora,

00:00:26.100 --> 00:00:29.000
eu desempenho uma ação,
como vestir um casaco.

00:00:29.033 --> 00:00:31.834
Em programação,
são usadas da mesma forma.

00:00:31.868 --> 00:00:35.100
Para testar condições
e executar códigos de acordo.

00:00:35.133 --> 00:00:38.534
Vamos traduzir a decisão
sobre vestir ou não um casaco

00:00:38.567 --> 00:00:39.934
para o código Java.

00:00:39.968 --> 00:00:44.801
Para decidir sobre vestir um casaco,
basta saber se está frio lá fora.

00:00:44.834 --> 00:00:46.934
Se estiver, vestiremos.

00:00:46.968 --> 00:00:52.300
O código Java para tomar esta decisão
é uma instrução if assim.

00:00:52.334 --> 00:00:55.200
Vejamos o código
de tomada de decisão antes.

00:00:55.234 --> 00:01:01.434
Começamos com um if, seguido pela
informação necessária para a decisão.

00:01:01.467 --> 00:01:06.400
Isto nos dirá se está frio lá fora,
e está entre os parênteses.

00:01:06.434 --> 00:01:11.000
Este valor variável isCold,
é chamado de condição de teste.

00:01:11.033 --> 00:01:14.868
Seu valor varia para nos dizer
se está frio ou não.

00:01:14.901 --> 00:01:17.734
E devemos testá-lo
para determinar seu valor.

00:01:17.767 --> 00:01:21.801
E esta condição de teste deve ser
verdadeira ou falsa.

00:01:21.834 --> 00:01:24.934
Que variável faz isso?
Booleanas.

00:01:24.968 --> 00:01:28.133
Booleanas só podem ter
o valor verdadeiro ou falso

00:01:28.167 --> 00:01:30.033
e são perfeitas
para decisões.

00:01:30.067 --> 00:01:33.300
Digamos que temos acesso
a esta booleana isCold.

00:01:33.334 --> 00:01:36.634
Mas não sabemos
se será verdadeira ou falsa.

00:01:36.667 --> 00:01:40.400
A próxima coisa na nossa instrução if
é um bloco de código,

00:01:40.434 --> 00:01:43.267
que podem ser linhas de código
e comentários.

00:01:43.300 --> 00:01:45.167
Este código só será executado

00:01:45.200 --> 00:01:48.400
se a condição de teste isCold
for verdadeira.

00:01:48.434 --> 00:01:51.801
Todo este bloco de código
é cercado por estas chaves.

00:01:51.834 --> 00:01:54.033
E isso completa
nossa instrução if.

00:01:54.067 --> 00:01:58.667
Ela não termina com ponto e vírgula
como outras linhas de código.

00:01:58.701 --> 00:02:01.467
Ela começa e termina
com chaves,

00:02:01.501 --> 00:02:06.000
pois um ponto e vírgula diz ao código
que é o fim de uma instrução.

00:02:06.033 --> 00:02:08.667
Mas uma instrução if
é mais como uma caixa

00:02:08.701 --> 00:02:11.601
que segura linhas de código
dentro das chaves.

00:02:11.634 --> 00:02:14.534
Digamos que o valor de isCold
seja verdadeiro.

00:02:14.567 --> 00:02:18.934
Nossa condição de teste também será,
e entraremos no bloco de código.

00:02:18.968 --> 00:02:22.434
O resultado será imprimir
"está frio, vista um casaco".

00:02:22.467 --> 00:02:24.267
Mas se isCold for falso,

00:02:24.300 --> 00:02:28.367
a condição de teste também será,
e pulamos este bloco de código.

00:02:28.400 --> 00:02:30.067
E nada será impresso.

00:02:30.100 --> 00:02:33.067
Vamos aplicar
o que sabemos sobre instruções if

00:02:33.100 --> 00:02:35.667
para programar
um carro autônomo simples.

