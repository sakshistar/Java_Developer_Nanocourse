WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.445
&gt;&gt; Remember I planned to program a smart coffee maker from the beginning of this lesson?

00:00:04.445 --> 00:00:08.359
We wanted to program a coffee maker that gives us our favorite cup of coffee.

00:00:08.359 --> 00:00:12.164
To build this, our coffee machine needs to know who's asking for coffee,

00:00:12.164 --> 00:00:16.504
and then we can give it instructions to select the right coffee for that person.

00:00:16.504 --> 00:00:19.129
Each person will choose a three-digit passcode that they can

00:00:19.129 --> 00:00:21.945
enter into the coffee maker to get their favorite cup.

00:00:21.945 --> 00:00:24.754
I've chosen my passcode to be 555,

00:00:24.754 --> 00:00:26.049
which will get me an espresso.

00:00:26.050 --> 00:00:29.385
&gt;&gt; Or if you prefer something with flavor,

00:00:29.385 --> 00:00:33.797
you could enter 312 and get this delicious vanilla latte.

00:00:33.796 --> 00:00:36.019
&gt;&gt; Everyone has their own preference,

00:00:36.020 --> 00:00:37.980
and the more passcodes a coffee maker knows,

00:00:37.979 --> 00:00:39.599
the smarter it will be.

00:00:39.600 --> 00:00:42.158
Now let's get into programming this behavior.

00:00:42.158 --> 00:00:44.020
For our smart coffee machine,

00:00:44.020 --> 00:00:47.625
we wanted to check the value of an int variable called passcode,

00:00:47.625 --> 00:00:51.869
and test it for equality against the list of specific values that it can take.

00:00:51.869 --> 00:00:55.364
Passcodes like 555 for me and my espresso,

00:00:55.365 --> 00:00:58.260
and 312 for Asor and his vanilla latte;

00:00:58.259 --> 00:01:03.214
and let's include one more passcode 629 that makes a drip coffee.

00:01:03.215 --> 00:01:07.564
We can program this behavior using a series of decision making statements.

00:01:07.564 --> 00:01:10.739
Let's say we have access to our int passcode variable,

00:01:10.739 --> 00:01:12.959
but we aren't sure what value will be.

00:01:12.959 --> 00:01:15.704
We just know that it will be some three-digit number.

00:01:15.704 --> 00:01:18.774
We can then write an if statement and else ifs with

00:01:18.775 --> 00:01:22.605
test conditions that check if our passcode is equal to a certain value,

00:01:22.605 --> 00:01:25.250
like 555 or 312.

00:01:25.250 --> 00:01:27.040
And then inside each statement,

00:01:27.040 --> 00:01:28.995
we'll assign what type of coffee to make,

00:01:28.995 --> 00:01:30.870
based on the value of passcode;

00:01:30.870 --> 00:01:35.310
and the type of coffee is kept track of in a string variable coffee type.

00:01:35.310 --> 00:01:36.750
Then at the very end of our code,

00:01:36.750 --> 00:01:38.969
we'll print out the value of coffee type.

00:01:38.969 --> 00:01:41.730
So if we look at our first if in detail,

00:01:41.730 --> 00:01:45.760
it tests if our passcode is equal to 555;

00:01:45.760 --> 00:01:48.660
and we test for equality with this double equal sign;

00:01:48.659 --> 00:01:52.560
and the value 555 corresponds to our espresso passcode.

00:01:52.560 --> 00:01:54.570
Then if this test condition is true,

00:01:54.569 --> 00:01:59.359
we'll enter if block of code and set coffee type to the value espresso.

00:01:59.359 --> 00:02:02.084
Then because we've executed the code in our if,

00:02:02.084 --> 00:02:06.524
we'll skip down to the int curly brace of all these statements to our print line of code,

00:02:06.525 --> 00:02:08.789
and this will just print out espresso.

00:02:08.789 --> 00:02:11.054
And the rest of this code works similarly.

00:02:11.055 --> 00:02:13.795
We check if the passcode is equal to 312.

00:02:13.794 --> 00:02:17.174
If it's not, we then check if it's equal to 629;

00:02:17.175 --> 00:02:19.135
and if it's not equal to any of these,

00:02:19.134 --> 00:02:21.634
our coffee type will be set to unknown.

00:02:21.634 --> 00:02:25.504
But this type of code can get really long for multiple passcode checks;

00:02:25.504 --> 00:02:29.379
and we're doing a similar check for equality in each of these test conditions.

00:02:29.379 --> 00:02:33.294
We're saying passcode equals equals some specific value.

00:02:33.294 --> 00:02:37.484
And Java gives us another way to write this code with the switch statement.

00:02:37.485 --> 00:02:41.430
A switch statement does the same thing a little more concisely.

00:02:41.430 --> 00:02:45.030
It let's us check the value of a certain variable like our passcode,

00:02:45.030 --> 00:02:49.050
and test it for equality against a list of possible values it can take,

00:02:49.050 --> 00:02:53.025
like 555, 312 and 629.

00:02:53.025 --> 00:02:55.620
Each of these specific values is called the case,

00:02:55.620 --> 00:02:58.980
and we can program different behavior for each case.

00:02:58.979 --> 00:03:01.884
In Java, this switch statement looks like this.

00:03:01.884 --> 00:03:04.289
It says switch followed by the variable it

00:03:04.289 --> 00:03:07.289
wants to check for equality surrounded by parentheses.

00:03:07.289 --> 00:03:11.204
Then, it has curly braces that will contain all of our equality checks,

00:03:11.205 --> 00:03:14.469
and our equality checks are just these specific cases;

00:03:14.469 --> 00:03:18.539
which here are the specific three-digit passcodes that our program knows,

00:03:18.539 --> 00:03:22.745
555, 312 and 629.

00:03:22.745 --> 00:03:28.064
Our first if statement here will execute the same code as our case 555 here.

00:03:28.064 --> 00:03:31.319
The value of our passcode will be checked for equality

00:03:31.319 --> 00:03:34.574
against the number 555 and if it matches,

00:03:34.574 --> 00:03:37.750
we'll set our coffee type string to be equal to espresso;

00:03:37.750 --> 00:03:40.664
and that's the same thing we did in our first if.

00:03:40.664 --> 00:03:43.590
But if our passcode is not equal to 555,

00:03:43.590 --> 00:03:45.569
then we'll move on to our next case.

00:03:45.569 --> 00:03:48.254
Just like we'd move on to our next else if.

00:03:48.254 --> 00:03:52.995
And case 312 and case 629 correspond to our else if code.

00:03:52.995 --> 00:03:56.870
This case checks for passcode is equal to 312.

00:03:56.870 --> 00:04:00.514
If it is, we set our coffee type to be vanilla latte.

00:04:00.514 --> 00:04:02.490
If it's not, we move on to our next case.

00:04:02.490 --> 00:04:04.882
Just like we move on to our next else if.

00:04:04.882 --> 00:04:09.039
So these three cases check for our three known passcode values.

00:04:09.039 --> 00:04:11.909
And if our passcode matches any one of these values,

00:04:11.909 --> 00:04:14.264
we'll enter the corresponding case code

00:04:14.264 --> 00:04:17.789
and set our coffee type to the correct coffee value.

00:04:17.790 --> 00:04:19.814
Notice that after each case is defined;

00:04:19.814 --> 00:04:22.350
like case 312, we write a colon,

00:04:22.350 --> 00:04:26.770
not a semi-colon, and then the instructions we want our program to execute,

00:04:26.769 --> 00:04:29.719
which is to give a certain value to our coffee type string.

00:04:29.720 --> 00:04:33.465
And this is the format for all our cases: the word case,

00:04:33.464 --> 00:04:36.299
the specific value we want to check for equality,

00:04:36.300 --> 00:04:39.389
a colon, and then the code we want to execute.

00:04:39.389 --> 00:04:42.375
After each case is this word break.

00:04:42.375 --> 00:04:46.004
A break happens after code inside a case executes.

00:04:46.004 --> 00:04:49.942
It breaks out of the switch statement and goes to its ending curly brace.

00:04:49.942 --> 00:04:52.034
So having breaks after each case

00:04:52.035 --> 00:04:55.710
ensures that only one of these blocks of code will execute.

00:04:55.709 --> 00:04:58.199
This is just like how only one block of code in

00:04:58.199 --> 00:05:01.670
a series of ifs and else ifs will execute at a time.

00:05:01.670 --> 00:05:04.710
The break will break out of our decision making code and go to

00:05:04.709 --> 00:05:09.180
the end of the ending curly brace where it will print out the value of coffee type.

00:05:09.180 --> 00:05:13.050
There's also a default case that acts the same as an else statement.

00:05:13.050 --> 00:05:16.665
The default code will execute whenever other cases aren't met,

00:05:16.665 --> 00:05:18.780
like if the passcode was something like

00:05:18.779 --> 00:05:22.634
914 and we don't recognize it or don't have a case for it.

00:05:22.634 --> 00:05:25.459
So both of these sets of code do the same thing.

00:05:25.459 --> 00:05:28.219
In fact, if our passcode was 555,

00:05:28.220 --> 00:05:31.915
the print output for both of these codes would be espresso.

00:05:31.915 --> 00:05:36.879
For this code, it would enter our first if statement and set coffee type to espresso,

00:05:36.879 --> 00:05:41.094
and for this code it would check the value of our passcode against our first case;

00:05:41.095 --> 00:05:43.835
case 555; and because these match,

00:05:43.834 --> 00:05:47.544
it would enter this code and set our coffee type to espresso again.

00:05:47.545 --> 00:05:50.830
So switch statements can be implemented with ifs and else's,

00:05:50.829 --> 00:05:53.349
but it can be easier and more understandable to write

00:05:53.350 --> 00:05:56.655
code in a switch if you're doing a lot of equality checks.

00:05:56.654 --> 00:05:59.254
And as a programmer, it's up to you to decide what to

00:05:59.254 --> 00:06:02.230
use to make your code easy to understand and use.

00:06:02.230 --> 00:06:04.620
Let's get some more practice with switch statements.

